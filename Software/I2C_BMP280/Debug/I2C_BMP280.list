
I2C_BMP280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008774  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08008904  08008904  00009904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089b0  080089b0  0000a14c  2**0
                  CONTENTS
  4 .ARM          00000008  080089b0  080089b0  000099b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089b8  080089b8  0000a14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089b8  080089b8  000099b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089bc  080089bc  000099bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  080089c0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a14c  2**0
                  CONTENTS
 10 .bss          00001eb0  2000014c  2000014c  0000a14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001ffc  20001ffc  0000a14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010809  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eb0  00000000  00000000  0001a985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  0001d838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad0  00000000  00000000  0001e688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002131a  00000000  00000000  0001f158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b68  00000000  00000000  00040472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbfc7  00000000  00000000  00053fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010ffa1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fb8  00000000  00000000  0010ffe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00113f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080088ec 	.word	0x080088ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	080088ec 	.word	0x080088ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <BMP280_Init>:
#define BMP280_I2C_ADDRESS  0x76

uint16_t size;
uint8_t Data[256];

void BMP280_Init() {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af02      	add	r7, sp, #8
    uint8_t settings[2];
    settings[0] = 0xF4;
 8000566:	23f4      	movs	r3, #244	@ 0xf4
 8000568:	713b      	strb	r3, [r7, #4]
    settings[1] = 0x27;
 800056a:	2327      	movs	r3, #39	@ 0x27
 800056c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, BMP280_I2C_ADDRESS << 1, settings, 2, HAL_MAX_DELAY);
 800056e:	1d3a      	adds	r2, r7, #4
 8000570:	f04f 33ff 	mov.w	r3, #4294967295
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2302      	movs	r3, #2
 8000578:	21ec      	movs	r1, #236	@ 0xec
 800057a:	4803      	ldr	r0, [pc, #12]	@ (8000588 <BMP280_Init+0x28>)
 800057c:	f000 ff96 	bl	80014ac <HAL_I2C_Master_Transmit>
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000168 	.word	0x20000168

0800058c <BMP280_ReadCalibration>:

uint16_t dig_T1;
int16_t dig_T2, dig_T3;

void BMP280_ReadCalibration() {
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af02      	add	r7, sp, #8
    uint8_t calib[6];
    uint8_t reg = 0x88;
 8000592:	2388      	movs	r3, #136	@ 0x88
 8000594:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c1, BMP280_I2C_ADDRESS << 1, &reg, 1, HAL_MAX_DELAY);
 8000596:	1dfa      	adds	r2, r7, #7
 8000598:	f04f 33ff 	mov.w	r3, #4294967295
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2301      	movs	r3, #1
 80005a0:	21ec      	movs	r1, #236	@ 0xec
 80005a2:	4816      	ldr	r0, [pc, #88]	@ (80005fc <BMP280_ReadCalibration+0x70>)
 80005a4:	f000 ff82 	bl	80014ac <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, BMP280_I2C_ADDRESS << 1, calib, 6, HAL_MAX_DELAY);
 80005a8:	f107 0208 	add.w	r2, r7, #8
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2306      	movs	r3, #6
 80005b4:	21ec      	movs	r1, #236	@ 0xec
 80005b6:	4811      	ldr	r0, [pc, #68]	@ (80005fc <BMP280_ReadCalibration+0x70>)
 80005b8:	f001 f876 	bl	80016a8 <HAL_I2C_Master_Receive>
    dig_T1 = (calib[1] << 8) | calib[0];
 80005bc:	7a7b      	ldrb	r3, [r7, #9]
 80005be:	021b      	lsls	r3, r3, #8
 80005c0:	b21a      	sxth	r2, r3
 80005c2:	7a3b      	ldrb	r3, [r7, #8]
 80005c4:	b21b      	sxth	r3, r3
 80005c6:	4313      	orrs	r3, r2
 80005c8:	b21b      	sxth	r3, r3
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <BMP280_ReadCalibration+0x74>)
 80005ce:	801a      	strh	r2, [r3, #0]
    dig_T2 = (calib[3] << 8) | calib[2];
 80005d0:	7afb      	ldrb	r3, [r7, #11]
 80005d2:	021b      	lsls	r3, r3, #8
 80005d4:	b21a      	sxth	r2, r3
 80005d6:	7abb      	ldrb	r3, [r7, #10]
 80005d8:	b21b      	sxth	r3, r3
 80005da:	4313      	orrs	r3, r2
 80005dc:	b21a      	sxth	r2, r3
 80005de:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <BMP280_ReadCalibration+0x78>)
 80005e0:	801a      	strh	r2, [r3, #0]
    dig_T3 = (calib[5] << 8) | calib[4];
 80005e2:	7b7b      	ldrb	r3, [r7, #13]
 80005e4:	021b      	lsls	r3, r3, #8
 80005e6:	b21a      	sxth	r2, r3
 80005e8:	7b3b      	ldrb	r3, [r7, #12]
 80005ea:	b21b      	sxth	r3, r3
 80005ec:	4313      	orrs	r3, r2
 80005ee:	b21a      	sxth	r2, r3
 80005f0:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <BMP280_ReadCalibration+0x7c>)
 80005f2:	801a      	strh	r2, [r3, #0]
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000168 	.word	0x20000168
 8000600:	200002c0 	.word	0x200002c0
 8000604:	200002c2 	.word	0x200002c2
 8000608:	200002c4 	.word	0x200002c4

0800060c <BMP280_ReadRawTemp>:

int32_t BMP280_ReadRawTemp() {
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af02      	add	r7, sp, #8
    uint8_t reg = 0xFA;
 8000612:	23fa      	movs	r3, #250	@ 0xfa
 8000614:	70fb      	strb	r3, [r7, #3]
    uint8_t data[3];
    int32_t temp_raw;
    HAL_I2C_Master_Transmit(&hi2c1, BMP280_I2C_ADDRESS << 1, &reg, 1, HAL_MAX_DELAY);
 8000616:	1cfa      	adds	r2, r7, #3
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2301      	movs	r3, #1
 8000620:	21ec      	movs	r1, #236	@ 0xec
 8000622:	480e      	ldr	r0, [pc, #56]	@ (800065c <BMP280_ReadRawTemp+0x50>)
 8000624:	f000 ff42 	bl	80014ac <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, BMP280_I2C_ADDRESS << 1, data, 3, HAL_MAX_DELAY);
 8000628:	463a      	mov	r2, r7
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2303      	movs	r3, #3
 8000632:	21ec      	movs	r1, #236	@ 0xec
 8000634:	4809      	ldr	r0, [pc, #36]	@ (800065c <BMP280_ReadRawTemp+0x50>)
 8000636:	f001 f837 	bl	80016a8 <HAL_I2C_Master_Receive>
    temp_raw = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((data[2] >> 4) & 0x0F);
 800063a:	783b      	ldrb	r3, [r7, #0]
 800063c:	031a      	lsls	r2, r3, #12
 800063e:	787b      	ldrb	r3, [r7, #1]
 8000640:	011b      	lsls	r3, r3, #4
 8000642:	431a      	orrs	r2, r3
 8000644:	78bb      	ldrb	r3, [r7, #2]
 8000646:	091b      	lsrs	r3, r3, #4
 8000648:	b2db      	uxtb	r3, r3
 800064a:	f003 030f 	and.w	r3, r3, #15
 800064e:	4313      	orrs	r3, r2
 8000650:	607b      	str	r3, [r7, #4]
    return temp_raw;
 8000652:	687b      	ldr	r3, [r7, #4]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000168 	.word	0x20000168

08000660 <BMP280_CalculateTemp>:

float BMP280_CalculateTemp(int32_t temp_raw) {
 8000660:	b480      	push	{r7}
 8000662:	b087      	sub	sp, #28
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
    int32_t var1, var2;
    float temperature;
    var1 = ((((temp_raw >> 3) - ((int32_t)dig_T1 << 1))) * ((int32_t)dig_T2)) >> 11;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	10da      	asrs	r2, r3, #3
 800066c:	4b20      	ldr	r3, [pc, #128]	@ (80006f0 <BMP280_CalculateTemp+0x90>)
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	4a1f      	ldr	r2, [pc, #124]	@ (80006f4 <BMP280_CalculateTemp+0x94>)
 8000676:	f9b2 2000 	ldrsh.w	r2, [r2]
 800067a:	fb02 f303 	mul.w	r3, r2, r3
 800067e:	12db      	asrs	r3, r3, #11
 8000680:	617b      	str	r3, [r7, #20]
    var2 = (((((temp_raw >> 4) - ((int32_t)dig_T1)) * ((temp_raw >> 4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	111b      	asrs	r3, r3, #4
 8000686:	4a1a      	ldr	r2, [pc, #104]	@ (80006f0 <BMP280_CalculateTemp+0x90>)
 8000688:	8812      	ldrh	r2, [r2, #0]
 800068a:	1a9b      	subs	r3, r3, r2
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	1112      	asrs	r2, r2, #4
 8000690:	4917      	ldr	r1, [pc, #92]	@ (80006f0 <BMP280_CalculateTemp+0x90>)
 8000692:	8809      	ldrh	r1, [r1, #0]
 8000694:	1a52      	subs	r2, r2, r1
 8000696:	fb02 f303 	mul.w	r3, r2, r3
 800069a:	131b      	asrs	r3, r3, #12
 800069c:	4a16      	ldr	r2, [pc, #88]	@ (80006f8 <BMP280_CalculateTemp+0x98>)
 800069e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80006a2:	fb02 f303 	mul.w	r3, r2, r3
 80006a6:	139b      	asrs	r3, r3, #14
 80006a8:	613b      	str	r3, [r7, #16]
    int32_t t_fine = var1 + var2;
 80006aa:	697a      	ldr	r2, [r7, #20]
 80006ac:	693b      	ldr	r3, [r7, #16]
 80006ae:	4413      	add	r3, r2
 80006b0:	60fb      	str	r3, [r7, #12]
    temperature = (t_fine * 5 + 128) >> 8;
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	4613      	mov	r3, r2
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4413      	add	r3, r2
 80006ba:	3380      	adds	r3, #128	@ 0x80
 80006bc:	121b      	asrs	r3, r3, #8
 80006be:	ee07 3a90 	vmov	s15, r3
 80006c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006c6:	edc7 7a02 	vstr	s15, [r7, #8]
    temperature /= 100;
 80006ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80006ce:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80006fc <BMP280_CalculateTemp+0x9c>
 80006d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006d6:	edc7 7a02 	vstr	s15, [r7, #8]
    return temperature;
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	ee07 3a90 	vmov	s15, r3
}
 80006e0:	eeb0 0a67 	vmov.f32	s0, s15
 80006e4:	371c      	adds	r7, #28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	200002c0 	.word	0x200002c0
 80006f4:	200002c2 	.word	0x200002c2
 80006f8:	200002c4 	.word	0x200002c4
 80006fc:	42c80000 	.word	0x42c80000

08000700 <main>:

int main(void) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
    HAL_Init();
 8000706:	f000 fa2f 	bl	8000b68 <HAL_Init>
    SystemClock_Config();
 800070a:	f000 f833 	bl	8000774 <SystemClock_Config>
    MX_GPIO_Init();
 800070e:	f000 f8c7 	bl	80008a0 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000712:	f000 f897 	bl	8000844 <MX_I2C1_Init>
    MX_USB_DEVICE_Init();
 8000716:	f006 ff2f 	bl	8007578 <MX_USB_DEVICE_Init>

    BMP280_Init();
 800071a:	f7ff ff21 	bl	8000560 <BMP280_Init>
    BMP280_ReadCalibration();
 800071e:	f7ff ff35 	bl	800058c <BMP280_ReadCalibration>

    while (1) {
        int32_t temp_raw = BMP280_ReadRawTemp();
 8000722:	f7ff ff73 	bl	800060c <BMP280_ReadRawTemp>
 8000726:	60f8      	str	r0, [r7, #12]
        float temp = BMP280_CalculateTemp(temp_raw);
 8000728:	68f8      	ldr	r0, [r7, #12]
 800072a:	f7ff ff99 	bl	8000660 <BMP280_CalculateTemp>
 800072e:	ed87 0a02 	vstr	s0, [r7, #8]
        int temp_int = (int)temp;
 8000732:	edd7 7a02 	vldr	s15, [r7, #8]
 8000736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800073a:	ee17 3a90 	vmov	r3, s15
 800073e:	607b      	str	r3, [r7, #4]
        size = sprintf((char *)Data, "Temperature: %d °C\r\n", temp_int);
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	4909      	ldr	r1, [pc, #36]	@ (8000768 <main+0x68>)
 8000744:	4809      	ldr	r0, [pc, #36]	@ (800076c <main+0x6c>)
 8000746:	f007 fc31 	bl	8007fac <siprintf>
 800074a:	4603      	mov	r3, r0
 800074c:	b29a      	uxth	r2, r3
 800074e:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <main+0x70>)
 8000750:	801a      	strh	r2, [r3, #0]
        CDC_Transmit_FS(Data, size);
 8000752:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <main+0x70>)
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	4619      	mov	r1, r3
 8000758:	4804      	ldr	r0, [pc, #16]	@ (800076c <main+0x6c>)
 800075a:	f006 ffcb 	bl	80076f4 <CDC_Transmit_FS>
        HAL_Delay(100);
 800075e:	2064      	movs	r0, #100	@ 0x64
 8000760:	f000 fa74 	bl	8000c4c <HAL_Delay>
    while (1) {
 8000764:	bf00      	nop
 8000766:	e7dc      	b.n	8000722 <main+0x22>
 8000768:	08008904 	.word	0x08008904
 800076c:	200001c0 	.word	0x200001c0
 8000770:	200001bc 	.word	0x200001bc

08000774 <SystemClock_Config>:
    }
}

void SystemClock_Config(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b094      	sub	sp, #80	@ 0x50
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 0320 	add.w	r3, r7, #32
 800077e:	2230      	movs	r2, #48	@ 0x30
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f007 fc32 	bl	8007fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	4b27      	ldr	r3, [pc, #156]	@ (800083c <SystemClock_Config+0xc8>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a0:	4a26      	ldr	r2, [pc, #152]	@ (800083c <SystemClock_Config+0xc8>)
 80007a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a8:	4b24      	ldr	r3, [pc, #144]	@ (800083c <SystemClock_Config+0xc8>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b4:	2300      	movs	r3, #0
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	4b21      	ldr	r3, [pc, #132]	@ (8000840 <SystemClock_Config+0xcc>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a20      	ldr	r2, [pc, #128]	@ (8000840 <SystemClock_Config+0xcc>)
 80007be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000840 <SystemClock_Config+0xcc>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d0:	2302      	movs	r3, #2
 80007d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	2301      	movs	r3, #1
 80007d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d8:	2310      	movs	r3, #16
 80007da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007dc:	2302      	movs	r3, #2
 80007de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e0:	2300      	movs	r3, #0
 80007e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007e4:	2310      	movs	r3, #16
 80007e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007e8:	23c0      	movs	r3, #192	@ 0xc0
 80007ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f0:	2304      	movs	r3, #4
 80007f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007f4:	f107 0320 	add.w	r3, r7, #32
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 ff5f 	bl	80036bc <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x94>
    Error_Handler();
 8000804:	f000 f88e 	bl	8000924 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8000808:	230f      	movs	r3, #15
 800080a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800080c:	2300      	movs	r3, #0
 800080e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f003 f9c2 	bl	8003bac <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0xbe>
    Error_Handler();
 800082e:	f000 f879 	bl	8000924 <Error_Handler>
  }
}
 8000832:	bf00      	nop
 8000834:	3750      	adds	r7, #80	@ 0x50
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800
 8000840:	40007000 	.word	0x40007000

08000844 <MX_I2C1_Init>:

static void MX_I2C1_Init(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <MX_I2C1_Init+0x50>)
 800084a:	4a13      	ldr	r2, [pc, #76]	@ (8000898 <MX_I2C1_Init+0x54>)
 800084c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_I2C1_Init+0x50>)
 8000850:	4a12      	ldr	r2, [pc, #72]	@ (800089c <MX_I2C1_Init+0x58>)
 8000852:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <MX_I2C1_Init+0x50>)
 8000862:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000866:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b0a      	ldr	r3, [pc, #40]	@ (8000894 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000874:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <MX_I2C1_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087a:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <MX_I2C1_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000880:	4804      	ldr	r0, [pc, #16]	@ (8000894 <MX_I2C1_Init+0x50>)
 8000882:	f000 fccf 	bl	8001224 <HAL_I2C_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_I2C1_Init+0x4c>
    Error_Handler();
 800088c:	f000 f84a 	bl	8000924 <Error_Handler>
  }
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000168 	.word	0x20000168
 8000898:	40005400 	.word	0x40005400
 800089c:	000186a0 	.word	0x000186a0

080008a0 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b18      	ldr	r3, [pc, #96]	@ (800091c <MX_GPIO_Init+0x7c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a17      	ldr	r2, [pc, #92]	@ (800091c <MX_GPIO_Init+0x7c>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b15      	ldr	r3, [pc, #84]	@ (800091c <MX_GPIO_Init+0x7c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b11      	ldr	r3, [pc, #68]	@ (800091c <MX_GPIO_Init+0x7c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a10      	ldr	r2, [pc, #64]	@ (800091c <MX_GPIO_Init+0x7c>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <MX_GPIO_Init+0x7c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2102      	movs	r1, #2
 80008f2:	480b      	ldr	r0, [pc, #44]	@ (8000920 <MX_GPIO_Init+0x80>)
 80008f4:	f000 fc7c 	bl	80011f0 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008f8:	2302      	movs	r3, #2
 80008fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	4619      	mov	r1, r3
 800090e:	4804      	ldr	r0, [pc, #16]	@ (8000920 <MX_GPIO_Init+0x80>)
 8000910:	f000 fad2 	bl	8000eb8 <HAL_GPIO_Init>
}
 8000914:	bf00      	nop
 8000916:	3720      	adds	r7, #32
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	40020400 	.word	0x40020400

08000924 <Error_Handler>:

void Error_Handler(void) {
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  __disable_irq();
  while (1) {}
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <Error_Handler+0x8>

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093e:	4a0f      	ldr	r2, [pc, #60]	@ (800097c <HAL_MspInit+0x4c>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000944:	6453      	str	r3, [r2, #68]	@ 0x44
 8000946:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <HAL_MspInit+0x4c>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	4a08      	ldr	r2, [pc, #32]	@ (800097c <HAL_MspInit+0x4c>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	@ 0x40
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a19      	ldr	r2, [pc, #100]	@ (8000a04 <HAL_I2C_MspInit+0x84>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d12c      	bne.n	80009fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <HAL_I2C_MspInit+0x88>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a17      	ldr	r2, [pc, #92]	@ (8000a08 <HAL_I2C_MspInit+0x88>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <HAL_I2C_MspInit+0x88>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c4:	2312      	movs	r3, #18
 80009c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009cc:	2303      	movs	r3, #3
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d0:	2304      	movs	r3, #4
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	480c      	ldr	r0, [pc, #48]	@ (8000a0c <HAL_I2C_MspInit+0x8c>)
 80009dc:	f000 fa6c 	bl	8000eb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <HAL_I2C_MspInit+0x88>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e8:	4a07      	ldr	r2, [pc, #28]	@ (8000a08 <HAL_I2C_MspInit+0x88>)
 80009ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f0:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <HAL_I2C_MspInit+0x88>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80009fc:	bf00      	nop
 80009fe:	3728      	adds	r7, #40	@ 0x28
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40005400 	.word	0x40005400
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020400 	.word	0x40020400

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <NMI_Handler+0x4>

08000a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <MemManage_Handler+0x4>

08000a28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a66:	f000 f8d1 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a74:	4802      	ldr	r0, [pc, #8]	@ (8000a80 <OTG_FS_IRQHandler+0x10>)
 8000a76:	f001 fd13 	bl	80024a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200017b0 	.word	0x200017b0

08000a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ae0 <_sbrk+0x5c>)
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <_sbrk+0x60>)
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a98:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d102      	bne.n	8000aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <_sbrk+0x64>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	@ (8000aec <_sbrk+0x68>)
 8000aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d207      	bcs.n	8000ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab4:	f007 faa2 	bl	8007ffc <__errno>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	220c      	movs	r2, #12
 8000abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	e009      	b.n	8000ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aca:	4b07      	ldr	r3, [pc, #28]	@ (8000ae8 <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	4a05      	ldr	r2, [pc, #20]	@ (8000ae8 <_sbrk+0x64>)
 8000ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20020000 	.word	0x20020000
 8000ae4:	00000400 	.word	0x00000400
 8000ae8:	200002c8 	.word	0x200002c8
 8000aec:	20002000 	.word	0x20002000

08000af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <SystemInit+0x20>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000afa:	4a05      	ldr	r2, [pc, #20]	@ (8000b10 <SystemInit+0x20>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b18:	f7ff ffea 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b1c:	480c      	ldr	r0, [pc, #48]	@ (8000b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b1e:	490d      	ldr	r1, [pc, #52]	@ (8000b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b20:	4a0d      	ldr	r2, [pc, #52]	@ (8000b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b34:	4c0a      	ldr	r4, [pc, #40]	@ (8000b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000b42:	f007 fa61 	bl	8008008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b46:	f7ff fddb 	bl	8000700 <main>
  bx  lr    
 8000b4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000b58:	080089c0 	.word	0x080089c0
  ldr r2, =_sbss
 8000b5c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000b60:	20001ffc 	.word	0x20001ffc

08000b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC_IRQHandler>
	...

08000b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <HAL_Init+0x40>)
 8000b72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <HAL_Init+0x40>)
 8000b7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a07      	ldr	r2, [pc, #28]	@ (8000ba8 <HAL_Init+0x40>)
 8000b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f94f 	bl	8000e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	200f      	movs	r0, #15
 8000b98:	f000 f808 	bl	8000bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff fec8 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023c00 	.word	0x40023c00

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb4:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <HAL_InitTick+0x54>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <HAL_InitTick+0x58>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f967 	bl	8000e9e <HAL_SYSTICK_Config>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00e      	b.n	8000bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d80a      	bhi.n	8000bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f000 f92f 	bl	8000e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bec:	4a06      	ldr	r2, [pc, #24]	@ (8000c08 <HAL_InitTick+0x5c>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e000      	b.n	8000bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000004 	.word	0x20000004

08000c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	200002cc 	.word	0x200002cc

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	@ (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	200002cc 	.word	0x200002cc

08000c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c54:	f7ff ffee 	bl	8000c34 <HAL_GetTick>
 8000c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c64:	d005      	beq.n	8000c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c66:	4b0a      	ldr	r3, [pc, #40]	@ (8000c90 <HAL_Delay+0x44>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c72:	bf00      	nop
 8000c74:	f7ff ffde 	bl	8000c34 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d8f7      	bhi.n	8000c74 <HAL_Delay+0x28>
  {
  }
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008

08000c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	@ (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce0:	4b04      	ldr	r3, [pc, #16]	@ (8000cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	f003 0307 	and.w	r3, r3, #7
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db0b      	blt.n	8000d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 021f 	and.w	r2, r3, #31
 8000d10:	4907      	ldr	r1, [pc, #28]	@ (8000d30 <__NVIC_EnableIRQ+0x38>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	2001      	movs	r0, #1
 8000d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	@ (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	@ (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	@ 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	@ 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e00:	d301      	bcc.n	8000e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00f      	b.n	8000e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e06:	4a0a      	ldr	r2, [pc, #40]	@ (8000e30 <SysTick_Config+0x40>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0e:	210f      	movs	r1, #15
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f7ff ff8e 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e18:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <SysTick_Config+0x40>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1e:	4b04      	ldr	r3, [pc, #16]	@ (8000e30 <SysTick_Config+0x40>)
 8000e20:	2207      	movs	r2, #7
 8000e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	e000e010 	.word	0xe000e010

08000e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff29 	bl	8000c94 <__NVIC_SetPriorityGrouping>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5c:	f7ff ff3e 	bl	8000cdc <__NVIC_GetPriorityGrouping>
 8000e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68b9      	ldr	r1, [r7, #8]
 8000e66:	6978      	ldr	r0, [r7, #20]
 8000e68:	f7ff ff8e 	bl	8000d88 <NVIC_EncodePriority>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff5d 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	4603      	mov	r3, r0
 8000e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff31 	bl	8000cf8 <__NVIC_EnableIRQ>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ffa2 	bl	8000df0 <SysTick_Config>
 8000eac:	4603      	mov	r3, r0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	@ 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
 8000ed2:	e16b      	b.n	80011ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	f040 815a 	bne.w	80011a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d005      	beq.n	8000f0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d130      	bne.n	8000f6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	2203      	movs	r2, #3
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	68da      	ldr	r2, [r3, #12]
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f40:	2201      	movs	r2, #1
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	091b      	lsrs	r3, r3, #4
 8000f56:	f003 0201 	and.w	r2, r3, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b03      	cmp	r3, #3
 8000f76:	d017      	beq.n	8000fa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d123      	bne.n	8000ffc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	08da      	lsrs	r2, r3, #3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3208      	adds	r2, #8
 8000fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	f003 0307 	and.w	r3, r3, #7
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	220f      	movs	r2, #15
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	691a      	ldr	r2, [r3, #16]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	08da      	lsrs	r2, r3, #3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3208      	adds	r2, #8
 8000ff6:	69b9      	ldr	r1, [r7, #24]
 8000ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0203 	and.w	r2, r3, #3
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 80b4 	beq.w	80011a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b60      	ldr	r3, [pc, #384]	@ (80011c4 <HAL_GPIO_Init+0x30c>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001046:	4a5f      	ldr	r2, [pc, #380]	@ (80011c4 <HAL_GPIO_Init+0x30c>)
 8001048:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800104c:	6453      	str	r3, [r2, #68]	@ 0x44
 800104e:	4b5d      	ldr	r3, [pc, #372]	@ (80011c4 <HAL_GPIO_Init+0x30c>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001052:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800105a:	4a5b      	ldr	r2, [pc, #364]	@ (80011c8 <HAL_GPIO_Init+0x310>)
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	3302      	adds	r3, #2
 8001062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	220f      	movs	r2, #15
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a52      	ldr	r2, [pc, #328]	@ (80011cc <HAL_GPIO_Init+0x314>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d02b      	beq.n	80010de <HAL_GPIO_Init+0x226>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a51      	ldr	r2, [pc, #324]	@ (80011d0 <HAL_GPIO_Init+0x318>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d025      	beq.n	80010da <HAL_GPIO_Init+0x222>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a50      	ldr	r2, [pc, #320]	@ (80011d4 <HAL_GPIO_Init+0x31c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d01f      	beq.n	80010d6 <HAL_GPIO_Init+0x21e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4f      	ldr	r2, [pc, #316]	@ (80011d8 <HAL_GPIO_Init+0x320>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d019      	beq.n	80010d2 <HAL_GPIO_Init+0x21a>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a4e      	ldr	r2, [pc, #312]	@ (80011dc <HAL_GPIO_Init+0x324>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d013      	beq.n	80010ce <HAL_GPIO_Init+0x216>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4d      	ldr	r2, [pc, #308]	@ (80011e0 <HAL_GPIO_Init+0x328>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d00d      	beq.n	80010ca <HAL_GPIO_Init+0x212>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4c      	ldr	r2, [pc, #304]	@ (80011e4 <HAL_GPIO_Init+0x32c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d007      	beq.n	80010c6 <HAL_GPIO_Init+0x20e>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4b      	ldr	r2, [pc, #300]	@ (80011e8 <HAL_GPIO_Init+0x330>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d101      	bne.n	80010c2 <HAL_GPIO_Init+0x20a>
 80010be:	2307      	movs	r3, #7
 80010c0:	e00e      	b.n	80010e0 <HAL_GPIO_Init+0x228>
 80010c2:	2308      	movs	r3, #8
 80010c4:	e00c      	b.n	80010e0 <HAL_GPIO_Init+0x228>
 80010c6:	2306      	movs	r3, #6
 80010c8:	e00a      	b.n	80010e0 <HAL_GPIO_Init+0x228>
 80010ca:	2305      	movs	r3, #5
 80010cc:	e008      	b.n	80010e0 <HAL_GPIO_Init+0x228>
 80010ce:	2304      	movs	r3, #4
 80010d0:	e006      	b.n	80010e0 <HAL_GPIO_Init+0x228>
 80010d2:	2303      	movs	r3, #3
 80010d4:	e004      	b.n	80010e0 <HAL_GPIO_Init+0x228>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e002      	b.n	80010e0 <HAL_GPIO_Init+0x228>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <HAL_GPIO_Init+0x228>
 80010de:	2300      	movs	r3, #0
 80010e0:	69fa      	ldr	r2, [r7, #28]
 80010e2:	f002 0203 	and.w	r2, r2, #3
 80010e6:	0092      	lsls	r2, r2, #2
 80010e8:	4093      	lsls	r3, r2
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f0:	4935      	ldr	r1, [pc, #212]	@ (80011c8 <HAL_GPIO_Init+0x310>)
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	089b      	lsrs	r3, r3, #2
 80010f6:	3302      	adds	r3, #2
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fe:	4b3b      	ldr	r3, [pc, #236]	@ (80011ec <HAL_GPIO_Init+0x334>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001122:	4a32      	ldr	r2, [pc, #200]	@ (80011ec <HAL_GPIO_Init+0x334>)
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001128:	4b30      	ldr	r3, [pc, #192]	@ (80011ec <HAL_GPIO_Init+0x334>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800114c:	4a27      	ldr	r2, [pc, #156]	@ (80011ec <HAL_GPIO_Init+0x334>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001152:	4b26      	ldr	r3, [pc, #152]	@ (80011ec <HAL_GPIO_Init+0x334>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001176:	4a1d      	ldr	r2, [pc, #116]	@ (80011ec <HAL_GPIO_Init+0x334>)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800117c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ec <HAL_GPIO_Init+0x334>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011a0:	4a12      	ldr	r2, [pc, #72]	@ (80011ec <HAL_GPIO_Init+0x334>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3301      	adds	r3, #1
 80011aa:	61fb      	str	r3, [r7, #28]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	2b0f      	cmp	r3, #15
 80011b0:	f67f ae90 	bls.w	8000ed4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3724      	adds	r7, #36	@ 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40013800 	.word	0x40013800
 80011cc:	40020000 	.word	0x40020000
 80011d0:	40020400 	.word	0x40020400
 80011d4:	40020800 	.word	0x40020800
 80011d8:	40020c00 	.word	0x40020c00
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40021400 	.word	0x40021400
 80011e4:	40021800 	.word	0x40021800
 80011e8:	40021c00 	.word	0x40021c00
 80011ec:	40013c00 	.word	0x40013c00

080011f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	807b      	strh	r3, [r7, #2]
 80011fc:	4613      	mov	r3, r2
 80011fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001200:	787b      	ldrb	r3, [r7, #1]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800120c:	e003      	b.n	8001216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800120e:	887b      	ldrh	r3, [r7, #2]
 8001210:	041a      	lsls	r2, r3, #16
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	619a      	str	r2, [r3, #24]
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e12b      	b.n	800148e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d106      	bne.n	8001250 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff fb98 	bl	8000980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2224      	movs	r2, #36	@ 0x24
 8001254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 0201 	bic.w	r2, r2, #1
 8001266:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001276:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001286:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001288:	f002 fe48 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
 800128c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	4a81      	ldr	r2, [pc, #516]	@ (8001498 <HAL_I2C_Init+0x274>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d807      	bhi.n	80012a8 <HAL_I2C_Init+0x84>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4a80      	ldr	r2, [pc, #512]	@ (800149c <HAL_I2C_Init+0x278>)
 800129c:	4293      	cmp	r3, r2
 800129e:	bf94      	ite	ls
 80012a0:	2301      	movls	r3, #1
 80012a2:	2300      	movhi	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	e006      	b.n	80012b6 <HAL_I2C_Init+0x92>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4a7d      	ldr	r2, [pc, #500]	@ (80014a0 <HAL_I2C_Init+0x27c>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	bf94      	ite	ls
 80012b0:	2301      	movls	r3, #1
 80012b2:	2300      	movhi	r3, #0
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e0e7      	b.n	800148e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4a78      	ldr	r2, [pc, #480]	@ (80014a4 <HAL_I2C_Init+0x280>)
 80012c2:	fba2 2303 	umull	r2, r3, r2, r3
 80012c6:	0c9b      	lsrs	r3, r3, #18
 80012c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68ba      	ldr	r2, [r7, #8]
 80012da:	430a      	orrs	r2, r1
 80012dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	4a6a      	ldr	r2, [pc, #424]	@ (8001498 <HAL_I2C_Init+0x274>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d802      	bhi.n	80012f8 <HAL_I2C_Init+0xd4>
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	3301      	adds	r3, #1
 80012f6:	e009      	b.n	800130c <HAL_I2C_Init+0xe8>
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80012fe:	fb02 f303 	mul.w	r3, r2, r3
 8001302:	4a69      	ldr	r2, [pc, #420]	@ (80014a8 <HAL_I2C_Init+0x284>)
 8001304:	fba2 2303 	umull	r2, r3, r2, r3
 8001308:	099b      	lsrs	r3, r3, #6
 800130a:	3301      	adds	r3, #1
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	430b      	orrs	r3, r1
 8001312:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800131e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	495c      	ldr	r1, [pc, #368]	@ (8001498 <HAL_I2C_Init+0x274>)
 8001328:	428b      	cmp	r3, r1
 800132a:	d819      	bhi.n	8001360 <HAL_I2C_Init+0x13c>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	1e59      	subs	r1, r3, #1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	fbb1 f3f3 	udiv	r3, r1, r3
 800133a:	1c59      	adds	r1, r3, #1
 800133c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001340:	400b      	ands	r3, r1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00a      	beq.n	800135c <HAL_I2C_Init+0x138>
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1e59      	subs	r1, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fbb1 f3f3 	udiv	r3, r1, r3
 8001354:	3301      	adds	r3, #1
 8001356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800135a:	e051      	b.n	8001400 <HAL_I2C_Init+0x1dc>
 800135c:	2304      	movs	r3, #4
 800135e:	e04f      	b.n	8001400 <HAL_I2C_Init+0x1dc>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d111      	bne.n	800138c <HAL_I2C_Init+0x168>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	1e58      	subs	r0, r3, #1
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6859      	ldr	r1, [r3, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	440b      	add	r3, r1
 8001376:	fbb0 f3f3 	udiv	r3, r0, r3
 800137a:	3301      	adds	r3, #1
 800137c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001380:	2b00      	cmp	r3, #0
 8001382:	bf0c      	ite	eq
 8001384:	2301      	moveq	r3, #1
 8001386:	2300      	movne	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	e012      	b.n	80013b2 <HAL_I2C_Init+0x18e>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	1e58      	subs	r0, r3, #1
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6859      	ldr	r1, [r3, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	0099      	lsls	r1, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	fbb0 f3f3 	udiv	r3, r0, r3
 80013a2:	3301      	adds	r3, #1
 80013a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	bf0c      	ite	eq
 80013ac:	2301      	moveq	r3, #1
 80013ae:	2300      	movne	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_I2C_Init+0x196>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e022      	b.n	8001400 <HAL_I2C_Init+0x1dc>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10e      	bne.n	80013e0 <HAL_I2C_Init+0x1bc>
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	1e58      	subs	r0, r3, #1
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6859      	ldr	r1, [r3, #4]
 80013ca:	460b      	mov	r3, r1
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	440b      	add	r3, r1
 80013d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80013d4:	3301      	adds	r3, #1
 80013d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013de:	e00f      	b.n	8001400 <HAL_I2C_Init+0x1dc>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	1e58      	subs	r0, r3, #1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6859      	ldr	r1, [r3, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	0099      	lsls	r1, r3, #2
 80013f0:	440b      	add	r3, r1
 80013f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013f6:	3301      	adds	r3, #1
 80013f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	6809      	ldr	r1, [r1, #0]
 8001404:	4313      	orrs	r3, r2
 8001406:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69da      	ldr	r2, [r3, #28]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	430a      	orrs	r2, r1
 8001422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800142e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6911      	ldr	r1, [r2, #16]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	68d2      	ldr	r2, [r2, #12]
 800143a:	4311      	orrs	r1, r2
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	430b      	orrs	r3, r1
 8001442:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695a      	ldr	r2, [r3, #20]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	430a      	orrs	r2, r1
 800145e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 0201 	orr.w	r2, r2, #1
 800146e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2220      	movs	r2, #32
 800147a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	000186a0 	.word	0x000186a0
 800149c:	001e847f 	.word	0x001e847f
 80014a0:	003d08ff 	.word	0x003d08ff
 80014a4:	431bde83 	.word	0x431bde83
 80014a8:	10624dd3 	.word	0x10624dd3

080014ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	461a      	mov	r2, r3
 80014b8:	460b      	mov	r3, r1
 80014ba:	817b      	strh	r3, [r7, #10]
 80014bc:	4613      	mov	r3, r2
 80014be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014c0:	f7ff fbb8 	bl	8000c34 <HAL_GetTick>
 80014c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b20      	cmp	r3, #32
 80014d0:	f040 80e0 	bne.w	8001694 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2319      	movs	r3, #25
 80014da:	2201      	movs	r2, #1
 80014dc:	4970      	ldr	r1, [pc, #448]	@ (80016a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f000 fc64 	bl	8001dac <I2C_WaitOnFlagUntilTimeout>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80014ea:	2302      	movs	r3, #2
 80014ec:	e0d3      	b.n	8001696 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d101      	bne.n	80014fc <HAL_I2C_Master_Transmit+0x50>
 80014f8:	2302      	movs	r3, #2
 80014fa:	e0cc      	b.n	8001696 <HAL_I2C_Master_Transmit+0x1ea>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b01      	cmp	r3, #1
 8001510:	d007      	beq.n	8001522 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f042 0201 	orr.w	r2, r2, #1
 8001520:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001530:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2221      	movs	r2, #33	@ 0x21
 8001536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2210      	movs	r2, #16
 800153e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2200      	movs	r2, #0
 8001546:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	893a      	ldrh	r2, [r7, #8]
 8001552:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001558:	b29a      	uxth	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4a50      	ldr	r2, [pc, #320]	@ (80016a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001562:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001564:	8979      	ldrh	r1, [r7, #10]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	6a3a      	ldr	r2, [r7, #32]
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f000 face 	bl	8001b0c <I2C_MasterRequestWrite>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e08d      	b.n	8001696 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001590:	e066      	b.n	8001660 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	6a39      	ldr	r1, [r7, #32]
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f000 fd22 	bl	8001fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00d      	beq.n	80015be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d107      	bne.n	80015ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e06b      	b.n	8001696 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c2:	781a      	ldrb	r2, [r3, #0]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015d8:	b29b      	uxth	r3, r3
 80015da:	3b01      	subs	r3, #1
 80015dc:	b29a      	uxth	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015e6:	3b01      	subs	r3, #1
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d11b      	bne.n	8001634 <HAL_I2C_Master_Transmit+0x188>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001600:	2b00      	cmp	r3, #0
 8001602:	d017      	beq.n	8001634 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001608:	781a      	ldrb	r2, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800161e:	b29b      	uxth	r3, r3
 8001620:	3b01      	subs	r3, #1
 8001622:	b29a      	uxth	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800162c:	3b01      	subs	r3, #1
 800162e:	b29a      	uxth	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	6a39      	ldr	r1, [r7, #32]
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f000 fd19 	bl	8002070 <I2C_WaitOnBTFFlagUntilTimeout>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00d      	beq.n	8001660 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	2b04      	cmp	r3, #4
 800164a:	d107      	bne.n	800165c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800165a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e01a      	b.n	8001696 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001664:	2b00      	cmp	r3, #0
 8001666:	d194      	bne.n	8001592 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001676:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2220      	movs	r2, #32
 800167c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	e000      	b.n	8001696 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001694:	2302      	movs	r3, #2
  }
}
 8001696:	4618      	mov	r0, r3
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	00100002 	.word	0x00100002
 80016a4:	ffff0000 	.word	0xffff0000

080016a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08c      	sub	sp, #48	@ 0x30
 80016ac:	af02      	add	r7, sp, #8
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	461a      	mov	r2, r3
 80016b4:	460b      	mov	r3, r1
 80016b6:	817b      	strh	r3, [r7, #10]
 80016b8:	4613      	mov	r3, r2
 80016ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016bc:	f7ff faba 	bl	8000c34 <HAL_GetTick>
 80016c0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b20      	cmp	r3, #32
 80016cc:	f040 8217 	bne.w	8001afe <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2319      	movs	r3, #25
 80016d6:	2201      	movs	r2, #1
 80016d8:	497c      	ldr	r1, [pc, #496]	@ (80018cc <HAL_I2C_Master_Receive+0x224>)
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f000 fb66 	bl	8001dac <I2C_WaitOnFlagUntilTimeout>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80016e6:	2302      	movs	r3, #2
 80016e8:	e20a      	b.n	8001b00 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_I2C_Master_Receive+0x50>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e203      	b.n	8001b00 <HAL_I2C_Master_Receive+0x458>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b01      	cmp	r3, #1
 800170c:	d007      	beq.n	800171e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 0201 	orr.w	r2, r2, #1
 800171c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800172c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2222      	movs	r2, #34	@ 0x22
 8001732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2210      	movs	r2, #16
 800173a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	893a      	ldrh	r2, [r7, #8]
 800174e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001754:	b29a      	uxth	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4a5c      	ldr	r2, [pc, #368]	@ (80018d0 <HAL_I2C_Master_Receive+0x228>)
 800175e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001760:	8979      	ldrh	r1, [r7, #10]
 8001762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001764:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 fa52 	bl	8001c10 <I2C_MasterRequestRead>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e1c4      	b.n	8001b00 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800177a:	2b00      	cmp	r3, #0
 800177c:	d113      	bne.n	80017a6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	623b      	str	r3, [r7, #32]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	623b      	str	r3, [r7, #32]
 8001792:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	e198      	b.n	8001ad8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d11b      	bne.n	80017e6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	61fb      	str	r3, [r7, #28]
 80017d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	e178      	b.n	8001ad8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d11b      	bne.n	8001826 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800180c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	61bb      	str	r3, [r7, #24]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	61bb      	str	r3, [r7, #24]
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	e158      	b.n	8001ad8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001834:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800184c:	e144      	b.n	8001ad8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001852:	2b03      	cmp	r3, #3
 8001854:	f200 80f1 	bhi.w	8001a3a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800185c:	2b01      	cmp	r3, #1
 800185e:	d123      	bne.n	80018a8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001862:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f000 fc4b 	bl	8002100 <I2C_WaitOnRXNEFlagUntilTimeout>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e145      	b.n	8001b00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	691a      	ldr	r2, [r3, #16]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001890:	3b01      	subs	r3, #1
 8001892:	b29a      	uxth	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189c:	b29b      	uxth	r3, r3
 800189e:	3b01      	subs	r3, #1
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80018a6:	e117      	b.n	8001ad8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d14e      	bne.n	800194e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018b6:	2200      	movs	r2, #0
 80018b8:	4906      	ldr	r1, [pc, #24]	@ (80018d4 <HAL_I2C_Master_Receive+0x22c>)
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f000 fa76 	bl	8001dac <I2C_WaitOnFlagUntilTimeout>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d008      	beq.n	80018d8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e11a      	b.n	8001b00 <HAL_I2C_Master_Receive+0x458>
 80018ca:	bf00      	nop
 80018cc:	00100002 	.word	0x00100002
 80018d0:	ffff0000 	.word	0xffff0000
 80018d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	691a      	ldr	r2, [r3, #16]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001904:	3b01      	subs	r3, #1
 8001906:	b29a      	uxth	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001910:	b29b      	uxth	r3, r3
 8001912:	3b01      	subs	r3, #1
 8001914:	b29a      	uxth	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001936:	3b01      	subs	r3, #1
 8001938:	b29a      	uxth	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001942:	b29b      	uxth	r3, r3
 8001944:	3b01      	subs	r3, #1
 8001946:	b29a      	uxth	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800194c:	e0c4      	b.n	8001ad8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800194e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001954:	2200      	movs	r2, #0
 8001956:	496c      	ldr	r1, [pc, #432]	@ (8001b08 <HAL_I2C_Master_Receive+0x460>)
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 fa27 	bl	8001dac <I2C_WaitOnFlagUntilTimeout>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0cb      	b.n	8001b00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001976:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	691a      	ldr	r2, [r3, #16]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001994:	3b01      	subs	r3, #1
 8001996:	b29a      	uxth	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	3b01      	subs	r3, #1
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019b0:	2200      	movs	r2, #0
 80019b2:	4955      	ldr	r1, [pc, #340]	@ (8001b08 <HAL_I2C_Master_Receive+0x460>)
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f000 f9f9 	bl	8001dac <I2C_WaitOnFlagUntilTimeout>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e09d      	b.n	8001b00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	691a      	ldr	r2, [r3, #16]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019f0:	3b01      	subs	r3, #1
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	3b01      	subs	r3, #1
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a22:	3b01      	subs	r3, #1
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	3b01      	subs	r3, #1
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001a38:	e04e      	b.n	8001ad8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f000 fb5e 	bl	8002100 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e058      	b.n	8001b00 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d124      	bne.n	8001ad8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d107      	bne.n	8001aa6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001aa4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f47f aeb6 	bne.w	800184e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e000      	b.n	8001b00 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001afe:	2302      	movs	r3, #2
  }
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3728      	adds	r7, #40	@ 0x28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	00010004 	.word	0x00010004

08001b0c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b20:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d006      	beq.n	8001b36 <I2C_MasterRequestWrite+0x2a>
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d003      	beq.n	8001b36 <I2C_MasterRequestWrite+0x2a>
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b34:	d108      	bne.n	8001b48 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	e00b      	b.n	8001b60 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4c:	2b12      	cmp	r3, #18
 8001b4e:	d107      	bne.n	8001b60 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 f91d 	bl	8001dac <I2C_WaitOnFlagUntilTimeout>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00d      	beq.n	8001b94 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b86:	d103      	bne.n	8001b90 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e035      	b.n	8001c00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b9c:	d108      	bne.n	8001bb0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b9e:	897b      	ldrh	r3, [r7, #10]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001bac:	611a      	str	r2, [r3, #16]
 8001bae:	e01b      	b.n	8001be8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001bb0:	897b      	ldrh	r3, [r7, #10]
 8001bb2:	11db      	asrs	r3, r3, #7
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	f003 0306 	and.w	r3, r3, #6
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	f063 030f 	orn	r3, r3, #15
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	490e      	ldr	r1, [pc, #56]	@ (8001c08 <I2C_MasterRequestWrite+0xfc>)
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 f966 	bl	8001ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e010      	b.n	8001c00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001bde:	897b      	ldrh	r3, [r7, #10]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	4907      	ldr	r1, [pc, #28]	@ (8001c0c <I2C_MasterRequestWrite+0x100>)
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 f956 	bl	8001ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	00010008 	.word	0x00010008
 8001c0c:	00010002 	.word	0x00010002

08001c10 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af02      	add	r7, sp, #8
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c24:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c34:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d006      	beq.n	8001c4a <I2C_MasterRequestRead+0x3a>
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d003      	beq.n	8001c4a <I2C_MasterRequestRead+0x3a>
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c48:	d108      	bne.n	8001c5c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	e00b      	b.n	8001c74 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c60:	2b11      	cmp	r3, #17
 8001c62:	d107      	bne.n	8001c74 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 f893 	bl	8001dac <I2C_WaitOnFlagUntilTimeout>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00d      	beq.n	8001ca8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c9a:	d103      	bne.n	8001ca4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ca2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e079      	b.n	8001d9c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001cb0:	d108      	bne.n	8001cc4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001cb2:	897b      	ldrh	r3, [r7, #10]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	611a      	str	r2, [r3, #16]
 8001cc2:	e05f      	b.n	8001d84 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cc4:	897b      	ldrh	r3, [r7, #10]
 8001cc6:	11db      	asrs	r3, r3, #7
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	f003 0306 	and.w	r3, r3, #6
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	f063 030f 	orn	r3, r3, #15
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4930      	ldr	r1, [pc, #192]	@ (8001da4 <I2C_MasterRequestRead+0x194>)
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 f8dc 	bl	8001ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e054      	b.n	8001d9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001cf2:	897b      	ldrh	r3, [r7, #10]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	4929      	ldr	r1, [pc, #164]	@ (8001da8 <I2C_MasterRequestRead+0x198>)
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 f8cc 	bl	8001ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e044      	b.n	8001d9c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d36:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 f831 	bl	8001dac <I2C_WaitOnFlagUntilTimeout>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00d      	beq.n	8001d6c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d5e:	d103      	bne.n	8001d68 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d66:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e017      	b.n	8001d9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001d6c:	897b      	ldrh	r3, [r7, #10]
 8001d6e:	11db      	asrs	r3, r3, #7
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	f003 0306 	and.w	r3, r3, #6
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f063 030e 	orn	r3, r3, #14
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	4907      	ldr	r1, [pc, #28]	@ (8001da8 <I2C_MasterRequestRead+0x198>)
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 f888 	bl	8001ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	00010008 	.word	0x00010008
 8001da8:	00010002 	.word	0x00010002

08001dac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	4613      	mov	r3, r2
 8001dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dbc:	e048      	b.n	8001e50 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc4:	d044      	beq.n	8001e50 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dc6:	f7fe ff35 	bl	8000c34 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d302      	bcc.n	8001ddc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d139      	bne.n	8001e50 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	0c1b      	lsrs	r3, r3, #16
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d10d      	bne.n	8001e02 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	43da      	mvns	r2, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	4013      	ands	r3, r2
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bf0c      	ite	eq
 8001df8:	2301      	moveq	r3, #1
 8001dfa:	2300      	movne	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	e00c      	b.n	8001e1c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	43da      	mvns	r2, r3
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bf0c      	ite	eq
 8001e14:	2301      	moveq	r3, #1
 8001e16:	2300      	movne	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d116      	bne.n	8001e50 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3c:	f043 0220 	orr.w	r2, r3, #32
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e023      	b.n	8001e98 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	0c1b      	lsrs	r3, r3, #16
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d10d      	bne.n	8001e76 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	43da      	mvns	r2, r3
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	4013      	ands	r3, r2
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	e00c      	b.n	8001e90 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	43da      	mvns	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	4013      	ands	r3, r2
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bf0c      	ite	eq
 8001e88:	2301      	moveq	r3, #1
 8001e8a:	2300      	movne	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	461a      	mov	r2, r3
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d093      	beq.n	8001dbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001eae:	e071      	b.n	8001f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ebe:	d123      	bne.n	8001f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ece:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ed8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef4:	f043 0204 	orr.w	r2, r3, #4
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e067      	b.n	8001fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0e:	d041      	beq.n	8001f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f10:	f7fe fe90 	bl	8000c34 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d302      	bcc.n	8001f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d136      	bne.n	8001f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	0c1b      	lsrs	r3, r3, #16
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d10c      	bne.n	8001f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	43da      	mvns	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	bf14      	ite	ne
 8001f42:	2301      	movne	r3, #1
 8001f44:	2300      	moveq	r3, #0
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	e00b      	b.n	8001f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	43da      	mvns	r2, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	4013      	ands	r3, r2
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bf14      	ite	ne
 8001f5c:	2301      	movne	r3, #1
 8001f5e:	2300      	moveq	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d016      	beq.n	8001f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f80:	f043 0220 	orr.w	r2, r3, #32
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e021      	b.n	8001fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	0c1b      	lsrs	r3, r3, #16
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d10c      	bne.n	8001fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	43da      	mvns	r2, r3
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	bf14      	ite	ne
 8001fb0:	2301      	movne	r3, #1
 8001fb2:	2300      	moveq	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	e00b      	b.n	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	bf14      	ite	ne
 8001fca:	2301      	movne	r3, #1
 8001fcc:	2300      	moveq	r3, #0
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f47f af6d 	bne.w	8001eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fec:	e034      	b.n	8002058 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 f8e3 	bl	80021ba <I2C_IsAcknowledgeFailed>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e034      	b.n	8002068 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002004:	d028      	beq.n	8002058 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002006:	f7fe fe15 	bl	8000c34 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	429a      	cmp	r2, r3
 8002014:	d302      	bcc.n	800201c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d11d      	bne.n	8002058 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002026:	2b80      	cmp	r3, #128	@ 0x80
 8002028:	d016      	beq.n	8002058 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002044:	f043 0220 	orr.w	r2, r3, #32
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e007      	b.n	8002068 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002062:	2b80      	cmp	r3, #128	@ 0x80
 8002064:	d1c3      	bne.n	8001fee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800207c:	e034      	b.n	80020e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 f89b 	bl	80021ba <I2C_IsAcknowledgeFailed>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e034      	b.n	80020f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d028      	beq.n	80020e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002096:	f7fe fdcd 	bl	8000c34 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d302      	bcc.n	80020ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d11d      	bne.n	80020e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d016      	beq.n	80020e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d4:	f043 0220 	orr.w	r2, r3, #32
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e007      	b.n	80020f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d1c3      	bne.n	800207e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800210c:	e049      	b.n	80021a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	2b10      	cmp	r3, #16
 800211a:	d119      	bne.n	8002150 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0210 	mvn.w	r2, #16
 8002124:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e030      	b.n	80021b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002150:	f7fe fd70 	bl	8000c34 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	429a      	cmp	r2, r3
 800215e:	d302      	bcc.n	8002166 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d11d      	bne.n	80021a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002170:	2b40      	cmp	r3, #64	@ 0x40
 8002172:	d016      	beq.n	80021a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2220      	movs	r2, #32
 800217e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	f043 0220 	orr.w	r2, r3, #32
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e007      	b.n	80021b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ac:	2b40      	cmp	r3, #64	@ 0x40
 80021ae:	d1ae      	bne.n	800210e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021d0:	d11b      	bne.n	800220a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2220      	movs	r2, #32
 80021e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	f043 0204 	orr.w	r2, r3, #4
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af02      	add	r7, sp, #8
 800221e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e101      	b.n	800242e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d106      	bne.n	800224a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f005 fb9d 	bl	8007984 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2203      	movs	r2, #3
 800224e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002258:	d102      	bne.n	8002260 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f001 ff84 	bl	8004172 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	7c1a      	ldrb	r2, [r3, #16]
 8002272:	f88d 2000 	strb.w	r2, [sp]
 8002276:	3304      	adds	r3, #4
 8002278:	cb0e      	ldmia	r3, {r1, r2, r3}
 800227a:	f001 fe63 	bl	8003f44 <USB_CoreInit>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0ce      	b.n	800242e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f001 ff7c 	bl	8004194 <USB_SetCurrentMode>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2202      	movs	r2, #2
 80022a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0bf      	b.n	800242e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	73fb      	strb	r3, [r7, #15]
 80022b2:	e04a      	b.n	800234a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	3315      	adds	r3, #21
 80022c4:	2201      	movs	r2, #1
 80022c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022c8:	7bfa      	ldrb	r2, [r7, #15]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	3314      	adds	r3, #20
 80022d8:	7bfa      	ldrb	r2, [r7, #15]
 80022da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	b298      	uxth	r0, r3
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	332e      	adds	r3, #46	@ 0x2e
 80022f0:	4602      	mov	r2, r0
 80022f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022f4:	7bfa      	ldrb	r2, [r7, #15]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	3318      	adds	r3, #24
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	331c      	adds	r3, #28
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	3320      	adds	r3, #32
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	3324      	adds	r3, #36	@ 0x24
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	3301      	adds	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	791b      	ldrb	r3, [r3, #4]
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	429a      	cmp	r2, r3
 8002352:	d3af      	bcc.n	80022b4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002354:	2300      	movs	r3, #0
 8002356:	73fb      	strb	r3, [r7, #15]
 8002358:	e044      	b.n	80023e4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800235a:	7bfa      	ldrb	r2, [r7, #15]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002370:	7bfa      	ldrb	r2, [r7, #15]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002386:	7bfa      	ldrb	r2, [r7, #15]
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	4413      	add	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	440b      	add	r3, r1
 8002394:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800239c:	7bfa      	ldrb	r2, [r7, #15]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023b2:	7bfa      	ldrb	r2, [r7, #15]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023c8:	7bfa      	ldrb	r2, [r7, #15]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	3301      	adds	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	791b      	ldrb	r3, [r3, #4]
 80023e8:	7bfa      	ldrb	r2, [r7, #15]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d3b5      	bcc.n	800235a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	7c1a      	ldrb	r2, [r3, #16]
 80023f6:	f88d 2000 	strb.w	r2, [sp]
 80023fa:	3304      	adds	r3, #4
 80023fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023fe:	f001 ff15 	bl	800422c <USB_DevInit>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e00c      	b.n	800242e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f002 ff5f 	bl	80052ea <USB_DevDisconnect>

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800244a:	2b01      	cmp	r3, #1
 800244c:	d101      	bne.n	8002452 <HAL_PCD_Start+0x1c>
 800244e:	2302      	movs	r3, #2
 8002450:	e022      	b.n	8002498 <HAL_PCD_Start+0x62>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800246a:	2b01      	cmp	r3, #1
 800246c:	d105      	bne.n	800247a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002472:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f001 fe66 	bl	8004150 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f002 ff0d 	bl	80052a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b08d      	sub	sp, #52	@ 0x34
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f002 ffcb 	bl	8005452 <USB_GetMode>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f040 848c 	bne.w	8002ddc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f002 ff2f 	bl	800532c <USB_ReadInterrupts>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 8482 	beq.w	8002dda <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	0a1b      	lsrs	r3, r3, #8
 80024e0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f002 ff1c 	bl	800532c <USB_ReadInterrupts>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d107      	bne.n	800250e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f002 0202 	and.w	r2, r2, #2
 800250c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f002 ff0a 	bl	800532c <USB_ReadInterrupts>
 8002518:	4603      	mov	r3, r0
 800251a:	f003 0310 	and.w	r3, r3, #16
 800251e:	2b10      	cmp	r3, #16
 8002520:	d161      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0210 	bic.w	r2, r2, #16
 8002530:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	f003 020f 	and.w	r2, r3, #15
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	3304      	adds	r3, #4
 8002550:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	0c5b      	lsrs	r3, r3, #17
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	2b02      	cmp	r3, #2
 800255c:	d124      	bne.n	80025a8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002564:	4013      	ands	r3, r2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d035      	beq.n	80025d6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002574:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002578:	b29b      	uxth	r3, r3
 800257a:	461a      	mov	r2, r3
 800257c:	6a38      	ldr	r0, [r7, #32]
 800257e:	f002 fd41 	bl	8005004 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800258e:	441a      	add	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	695a      	ldr	r2, [r3, #20]
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	091b      	lsrs	r3, r3, #4
 800259c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025a0:	441a      	add	r2, r3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	615a      	str	r2, [r3, #20]
 80025a6:	e016      	b.n	80025d6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	0c5b      	lsrs	r3, r3, #17
 80025ac:	f003 030f 	and.w	r3, r3, #15
 80025b0:	2b06      	cmp	r3, #6
 80025b2:	d110      	bne.n	80025d6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025ba:	2208      	movs	r2, #8
 80025bc:	4619      	mov	r1, r3
 80025be:	6a38      	ldr	r0, [r7, #32]
 80025c0:	f002 fd20 	bl	8005004 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	695a      	ldr	r2, [r3, #20]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025d0:	441a      	add	r2, r3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699a      	ldr	r2, [r3, #24]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0210 	orr.w	r2, r2, #16
 80025e4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f002 fe9e 	bl	800532c <USB_ReadInterrupts>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025f6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80025fa:	f040 80a7 	bne.w	800274c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f002 fea3 	bl	8005352 <USB_ReadDevAllOutEpInterrupt>
 800260c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800260e:	e099      	b.n	8002744 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 808e 	beq.w	8002738 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	4611      	mov	r1, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f002 fec7 	bl	80053ba <USB_ReadDevOutEPInterrupt>
 800262c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00c      	beq.n	8002652 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	4413      	add	r3, r2
 8002640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002644:	461a      	mov	r2, r3
 8002646:	2301      	movs	r3, #1
 8002648:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800264a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fea3 	bl	8003398 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00c      	beq.n	8002676 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	4413      	add	r3, r2
 8002664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002668:	461a      	mov	r2, r3
 800266a:	2308      	movs	r3, #8
 800266c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800266e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 ff79 	bl	8003568 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	4413      	add	r3, r2
 8002688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800268c:	461a      	mov	r2, r3
 800268e:	2310      	movs	r3, #16
 8002690:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d030      	beq.n	80026fe <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a4:	2b80      	cmp	r3, #128	@ 0x80
 80026a6:	d109      	bne.n	80026bc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026ba:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026be:	4613      	mov	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	3304      	adds	r3, #4
 80026d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	78db      	ldrb	r3, [r3, #3]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d108      	bne.n	80026ec <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2200      	movs	r2, #0
 80026de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	4619      	mov	r1, r3
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f005 fa52 	bl	8007b90 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80026ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026f8:	461a      	mov	r2, r3
 80026fa:	2302      	movs	r3, #2
 80026fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	4413      	add	r3, r2
 8002710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002714:	461a      	mov	r2, r3
 8002716:	2320      	movs	r3, #32
 8002718:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d009      	beq.n	8002738 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	4413      	add	r3, r2
 800272c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002730:	461a      	mov	r2, r3
 8002732:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002736:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	3301      	adds	r3, #1
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800273e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002746:	2b00      	cmp	r3, #0
 8002748:	f47f af62 	bne.w	8002610 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f002 fdeb 	bl	800532c <USB_ReadInterrupts>
 8002756:	4603      	mov	r3, r0
 8002758:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800275c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002760:	f040 80db 	bne.w	800291a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f002 fe0c 	bl	8005386 <USB_ReadDevAllInEpInterrupt>
 800276e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002774:	e0cd      	b.n	8002912 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80c2 	beq.w	8002906 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f002 fe32 	bl	80053f6 <USB_ReadDevInEPInterrupt>
 8002792:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d057      	beq.n	800284e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	2201      	movs	r2, #1
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69f9      	ldr	r1, [r7, #28]
 80027ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80027be:	4013      	ands	r3, r2
 80027c0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027ce:	461a      	mov	r2, r3
 80027d0:	2301      	movs	r3, #1
 80027d2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	799b      	ldrb	r3, [r3, #6]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d132      	bne.n	8002842 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	3320      	adds	r3, #32
 80027ec:	6819      	ldr	r1, [r3, #0]
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4403      	add	r3, r0
 80027fc:	331c      	adds	r3, #28
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4419      	add	r1, r3
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4403      	add	r3, r0
 8002810:	3320      	adds	r3, #32
 8002812:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002816:	2b00      	cmp	r3, #0
 8002818:	d113      	bne.n	8002842 <HAL_PCD_IRQHandler+0x3a2>
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	3324      	adds	r3, #36	@ 0x24
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d108      	bne.n	8002842 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800283a:	461a      	mov	r2, r3
 800283c:	2101      	movs	r1, #1
 800283e:	f002 fe39 	bl	80054b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	b2db      	uxtb	r3, r3
 8002846:	4619      	mov	r1, r3
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f005 f91c 	bl	8007a86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002864:	461a      	mov	r2, r3
 8002866:	2308      	movs	r3, #8
 8002868:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	4413      	add	r3, r2
 800287c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002880:	461a      	mov	r2, r3
 8002882:	2310      	movs	r3, #16
 8002884:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	4413      	add	r3, r2
 8002898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800289c:	461a      	mov	r2, r3
 800289e:	2340      	movs	r3, #64	@ 0x40
 80028a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d023      	beq.n	80028f4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028ae:	6a38      	ldr	r0, [r7, #32]
 80028b0:	f001 fe20 	bl	80044f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b6:	4613      	mov	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	3310      	adds	r3, #16
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	4413      	add	r3, r2
 80028c4:	3304      	adds	r3, #4
 80028c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	78db      	ldrb	r3, [r3, #3]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d108      	bne.n	80028e2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2200      	movs	r2, #0
 80028d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	4619      	mov	r1, r3
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f005 f969 	bl	8007bb4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028ee:	461a      	mov	r2, r3
 80028f0:	2302      	movs	r3, #2
 80028f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fcbd 	bl	8003280 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	3301      	adds	r3, #1
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800290c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290e:	085b      	lsrs	r3, r3, #1
 8002910:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002914:	2b00      	cmp	r3, #0
 8002916:	f47f af2e 	bne.w	8002776 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f002 fd04 	bl	800532c <USB_ReadInterrupts>
 8002924:	4603      	mov	r3, r0
 8002926:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800292a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800292e:	d122      	bne.n	8002976 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	69fa      	ldr	r2, [r7, #28]
 800293a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800293e:	f023 0301 	bic.w	r3, r3, #1
 8002942:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800294a:	2b01      	cmp	r3, #1
 800294c:	d108      	bne.n	8002960 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002956:	2100      	movs	r1, #0
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fea3 	bl	80036a4 <HAL_PCDEx_LPM_Callback>
 800295e:	e002      	b.n	8002966 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f005 f907 	bl	8007b74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002974:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f002 fcd6 	bl	800532c <USB_ReadInterrupts>
 8002980:	4603      	mov	r3, r0
 8002982:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002986:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800298a:	d112      	bne.n	80029b2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b01      	cmp	r3, #1
 800299a:	d102      	bne.n	80029a2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f005 f8c3 	bl	8007b28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695a      	ldr	r2, [r3, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80029b0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f002 fcb8 	bl	800532c <USB_ReadInterrupts>
 80029bc:	4603      	mov	r3, r0
 80029be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029c6:	f040 80b7 	bne.w	8002b38 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	69fa      	ldr	r2, [r7, #28]
 80029d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2110      	movs	r1, #16
 80029e4:	4618      	mov	r0, r3
 80029e6:	f001 fd85 	bl	80044f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ea:	2300      	movs	r3, #0
 80029ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029ee:	e046      	b.n	8002a7e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029fc:	461a      	mov	r2, r3
 80029fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a02:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a14:	0151      	lsls	r1, r2, #5
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	440a      	add	r2, r1
 8002a1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002a1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a22:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a30:	461a      	mov	r2, r3
 8002a32:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a36:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a48:	0151      	lsls	r1, r2, #5
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	440a      	add	r2, r1
 8002a4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002a52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a56:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a68:	0151      	lsls	r1, r2, #5
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	440a      	add	r2, r1
 8002a6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002a72:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002a76:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	791b      	ldrb	r3, [r3, #4]
 8002a82:	461a      	mov	r2, r3
 8002a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d3b2      	bcc.n	80029f0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	69fa      	ldr	r2, [r7, #28]
 8002a94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a98:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002a9c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	7bdb      	ldrb	r3, [r3, #15]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d016      	beq.n	8002ad4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ab0:	69fa      	ldr	r2, [r7, #28]
 8002ab2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ab6:	f043 030b 	orr.w	r3, r3, #11
 8002aba:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002acc:	f043 030b 	orr.w	r3, r3, #11
 8002ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ad2:	e015      	b.n	8002b00 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ae2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ae6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002aea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	69fa      	ldr	r2, [r7, #28]
 8002af6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002afa:	f043 030b 	orr.w	r3, r3, #11
 8002afe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b0e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002b12:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6818      	ldr	r0, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b22:	461a      	mov	r2, r3
 8002b24:	f002 fcc6 	bl	80054b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002b36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f002 fbf5 	bl	800532c <USB_ReadInterrupts>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b4c:	d123      	bne.n	8002b96 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f002 fc8b 	bl	800546e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 fd42 	bl	80045e6 <USB_GetDevSpeed>
 8002b62:	4603      	mov	r3, r0
 8002b64:	461a      	mov	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681c      	ldr	r4, [r3, #0]
 8002b6e:	f001 f9c9 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8002b72:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f001 fa46 	bl	800400c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f004 ffa8 	bl	8007ad6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695a      	ldr	r2, [r3, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002b94:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f002 fbc6 	bl	800532c <USB_ReadInterrupts>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d10a      	bne.n	8002bc0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f004 ff85 	bl	8007aba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695a      	ldr	r2, [r3, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f002 0208 	and.w	r2, r2, #8
 8002bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f002 fbb1 	bl	800532c <USB_ReadInterrupts>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd0:	2b80      	cmp	r3, #128	@ 0x80
 8002bd2:	d123      	bne.n	8002c1c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002be0:	2301      	movs	r3, #1
 8002be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002be4:	e014      	b.n	8002c10 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bea:	4613      	mov	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4413      	add	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d105      	bne.n	8002c0a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	4619      	mov	r1, r3
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 fb0a 	bl	800321e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	791b      	ldrb	r3, [r3, #4]
 8002c14:	461a      	mov	r2, r3
 8002c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d3e4      	bcc.n	8002be6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f002 fb83 	bl	800532c <USB_ReadInterrupts>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c30:	d13c      	bne.n	8002cac <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c32:	2301      	movs	r3, #1
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c36:	e02b      	b.n	8002c90 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	3318      	adds	r3, #24
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d115      	bne.n	8002c8a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c5e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	da12      	bge.n	8002c8a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	3317      	adds	r3, #23
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	4619      	mov	r1, r3
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 faca 	bl	800321e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	791b      	ldrb	r3, [r3, #4]
 8002c94:	461a      	mov	r2, r3
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d3cd      	bcc.n	8002c38 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002caa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f002 fb3b 	bl	800532c <USB_ReadInterrupts>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cc0:	d156      	bne.n	8002d70 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc6:	e045      	b.n	8002d54 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d12e      	bne.n	8002d4e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cf0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	da2b      	bge.n	8002d4e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002d02:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d121      	bne.n	8002d4e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10a      	bne.n	8002d4e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	69fa      	ldr	r2, [r7, #28]
 8002d42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d4a:	6053      	str	r3, [r2, #4]
            break;
 8002d4c:	e008      	b.n	8002d60 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	3301      	adds	r3, #1
 8002d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	791b      	ldrb	r3, [r3, #4]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d3b3      	bcc.n	8002cc8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002d6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f002 fad9 	bl	800532c <USB_ReadInterrupts>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d84:	d10a      	bne.n	8002d9c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f004 ff26 	bl	8007bd8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002d9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f002 fac3 	bl	800532c <USB_ReadInterrupts>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d115      	bne.n	8002ddc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f004 ff16 	bl	8007bf4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6859      	ldr	r1, [r3, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	605a      	str	r2, [r3, #4]
 8002dd8:	e000      	b.n	8002ddc <HAL_PCD_IRQHandler+0x93c>
      return;
 8002dda:	bf00      	nop
    }
  }
}
 8002ddc:	3734      	adds	r7, #52	@ 0x34
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd90      	pop	{r4, r7, pc}

08002de2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	460b      	mov	r3, r1
 8002dec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_PCD_SetAddress+0x1a>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e012      	b.n	8002e22 <HAL_PCD_SetAddress+0x40>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f002 fa22 	bl	800525c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	4608      	mov	r0, r1
 8002e34:	4611      	mov	r1, r2
 8002e36:	461a      	mov	r2, r3
 8002e38:	4603      	mov	r3, r0
 8002e3a:	70fb      	strb	r3, [r7, #3]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	803b      	strh	r3, [r7, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	da0f      	bge.n	8002e70 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	f003 020f 	and.w	r2, r3, #15
 8002e56:	4613      	mov	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	3310      	adds	r3, #16
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	4413      	add	r3, r2
 8002e64:	3304      	adds	r3, #4
 8002e66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	705a      	strb	r2, [r3, #1]
 8002e6e:	e00f      	b.n	8002e90 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	f003 020f 	and.w	r2, r3, #15
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	3304      	adds	r3, #4
 8002e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002e9c:	883b      	ldrh	r3, [r7, #0]
 8002e9e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	78ba      	ldrb	r2, [r7, #2]
 8002eaa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	785b      	ldrb	r3, [r3, #1]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d004      	beq.n	8002ebe <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ebe:	78bb      	ldrb	r3, [r7, #2]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d102      	bne.n	8002eca <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_PCD_EP_Open+0xae>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e00e      	b.n	8002ef6 <HAL_PCD_EP_Open+0xcc>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68f9      	ldr	r1, [r7, #12]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f001 fba2 	bl	8004630 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002ef4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	460b      	mov	r3, r1
 8002f08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	da0f      	bge.n	8002f32 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	f003 020f 	and.w	r2, r3, #15
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	3310      	adds	r3, #16
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	3304      	adds	r3, #4
 8002f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	705a      	strb	r2, [r3, #1]
 8002f30:	e00f      	b.n	8002f52 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	f003 020f 	and.w	r2, r3, #15
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	4413      	add	r3, r2
 8002f48:	3304      	adds	r3, #4
 8002f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_PCD_EP_Close+0x6e>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e00e      	b.n	8002f8a <HAL_PCD_EP_Close+0x8c>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68f9      	ldr	r1, [r7, #12]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f001 fbe0 	bl	8004740 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b086      	sub	sp, #24
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fa2:	7afb      	ldrb	r3, [r7, #11]
 8002fa4:	f003 020f 	and.w	r2, r3, #15
 8002fa8:	4613      	mov	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3304      	adds	r3, #4
 8002fba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fd4:	7afb      	ldrb	r3, [r7, #11]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	799b      	ldrb	r3, [r3, #6]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d102      	bne.n	8002fee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	799b      	ldrb	r3, [r3, #6]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	6979      	ldr	r1, [r7, #20]
 8002ffa:	f001 fc7d 	bl	80048f8 <USB_EPStartXfer>

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	f003 020f 	and.w	r2, r3, #15
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800302a:	681b      	ldr	r3, [r3, #0]
}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	460b      	mov	r3, r1
 8003046:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003048:	7afb      	ldrb	r3, [r7, #11]
 800304a:	f003 020f 	and.w	r2, r3, #15
 800304e:	4613      	mov	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	3310      	adds	r3, #16
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	3304      	adds	r3, #4
 800305e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2200      	movs	r2, #0
 8003070:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2201      	movs	r2, #1
 8003076:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003078:	7afb      	ldrb	r3, [r7, #11]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	b2da      	uxtb	r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	799b      	ldrb	r3, [r3, #6]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d102      	bne.n	8003092 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	799b      	ldrb	r3, [r3, #6]
 800309a:	461a      	mov	r2, r3
 800309c:	6979      	ldr	r1, [r7, #20]
 800309e:	f001 fc2b 	bl	80048f8 <USB_EPStartXfer>

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	7912      	ldrb	r2, [r2, #4]
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e04f      	b.n	800316a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	da0f      	bge.n	80030f2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d2:	78fb      	ldrb	r3, [r7, #3]
 80030d4:	f003 020f 	and.w	r2, r3, #15
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	3310      	adds	r3, #16
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	4413      	add	r3, r2
 80030e6:	3304      	adds	r3, #4
 80030e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2201      	movs	r2, #1
 80030ee:	705a      	strb	r2, [r3, #1]
 80030f0:	e00d      	b.n	800310e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	4613      	mov	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	4413      	add	r3, r2
 8003104:	3304      	adds	r3, #4
 8003106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2201      	movs	r2, #1
 8003112:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	b2da      	uxtb	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_PCD_EP_SetStall+0x82>
 800312a:	2302      	movs	r3, #2
 800312c:	e01d      	b.n	800316a <HAL_PCD_EP_SetStall+0xbe>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68f9      	ldr	r1, [r7, #12]
 800313c:	4618      	mov	r0, r3
 800313e:	f001 ffb9 	bl	80050b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	2b00      	cmp	r3, #0
 800314a:	d109      	bne.n	8003160 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	7999      	ldrb	r1, [r3, #6]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800315a:	461a      	mov	r2, r3
 800315c:	f002 f9aa 	bl	80054b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	460b      	mov	r3, r1
 800317c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	7912      	ldrb	r2, [r2, #4]
 8003188:	4293      	cmp	r3, r2
 800318a:	d901      	bls.n	8003190 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e042      	b.n	8003216 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003190:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003194:	2b00      	cmp	r3, #0
 8003196:	da0f      	bge.n	80031b8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	f003 020f 	and.w	r2, r3, #15
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	3310      	adds	r3, #16
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	4413      	add	r3, r2
 80031ac:	3304      	adds	r3, #4
 80031ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	705a      	strb	r2, [r3, #1]
 80031b6:	e00f      	b.n	80031d8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	f003 020f 	and.w	r2, r3, #15
 80031be:	4613      	mov	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	4413      	add	r3, r2
 80031ce:	3304      	adds	r3, #4
 80031d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_PCD_EP_ClrStall+0x86>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e00e      	b.n	8003216 <HAL_PCD_EP_ClrStall+0xa4>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68f9      	ldr	r1, [r7, #12]
 8003206:	4618      	mov	r0, r3
 8003208:	f001 ffc2 	bl	8005190 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b084      	sub	sp, #16
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	460b      	mov	r3, r1
 8003228:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800322a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800322e:	2b00      	cmp	r3, #0
 8003230:	da0c      	bge.n	800324c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	f003 020f 	and.w	r2, r3, #15
 8003238:	4613      	mov	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	3310      	adds	r3, #16
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	4413      	add	r3, r2
 8003246:	3304      	adds	r3, #4
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	e00c      	b.n	8003266 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	f003 020f 	and.w	r2, r3, #15
 8003252:	4613      	mov	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	4413      	add	r3, r2
 8003262:	3304      	adds	r3, #4
 8003264:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68f9      	ldr	r1, [r7, #12]
 800326c:	4618      	mov	r0, r3
 800326e:	f001 fde1 	bl	8004e34 <USB_EPStopXfer>
 8003272:	4603      	mov	r3, r0
 8003274:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003276:	7afb      	ldrb	r3, [r7, #11]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08a      	sub	sp, #40	@ 0x28
 8003284:	af02      	add	r7, sp, #8
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	4613      	mov	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	3310      	adds	r3, #16
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	4413      	add	r3, r2
 80032a4:	3304      	adds	r3, #4
 80032a6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	695a      	ldr	r2, [r3, #20]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d901      	bls.n	80032b8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e06b      	b.n	8003390 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d902      	bls.n	80032d4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	3303      	adds	r3, #3
 80032d8:	089b      	lsrs	r3, r3, #2
 80032da:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032dc:	e02a      	b.n	8003334 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	69fa      	ldr	r2, [r7, #28]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d902      	bls.n	80032fa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3303      	adds	r3, #3
 80032fe:	089b      	lsrs	r3, r3, #2
 8003300:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	68d9      	ldr	r1, [r3, #12]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	b2da      	uxtb	r2, r3
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	4603      	mov	r3, r0
 8003316:	6978      	ldr	r0, [r7, #20]
 8003318:	f001 fe36 	bl	8004f88 <USB_WritePacket>

    ep->xfer_buff  += len;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	441a      	add	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	695a      	ldr	r2, [r3, #20]
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	441a      	add	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4413      	add	r3, r2
 800333c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	429a      	cmp	r2, r3
 8003348:	d809      	bhi.n	800335e <PCD_WriteEmptyTxFifo+0xde>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003352:	429a      	cmp	r2, r3
 8003354:	d203      	bcs.n	800335e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1bf      	bne.n	80032de <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	429a      	cmp	r2, r3
 8003368:	d811      	bhi.n	800338e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	2201      	movs	r2, #1
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800337e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	43db      	mvns	r3, r3
 8003384:	6939      	ldr	r1, [r7, #16]
 8003386:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800338a:	4013      	ands	r3, r2
 800338c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3720      	adds	r7, #32
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	333c      	adds	r3, #60	@ 0x3c
 80033b0:	3304      	adds	r3, #4
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	799b      	ldrb	r3, [r3, #6]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d17b      	bne.n	80034c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d015      	beq.n	8003404 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	4a61      	ldr	r2, [pc, #388]	@ (8003560 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	f240 80b9 	bls.w	8003554 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80b3 	beq.w	8003554 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033fa:	461a      	mov	r2, r3
 80033fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003400:	6093      	str	r3, [r2, #8]
 8003402:	e0a7      	b.n	8003554 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f003 0320 	and.w	r3, r3, #32
 800340a:	2b00      	cmp	r3, #0
 800340c:	d009      	beq.n	8003422 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800341a:	461a      	mov	r2, r3
 800341c:	2320      	movs	r3, #32
 800341e:	6093      	str	r3, [r2, #8]
 8003420:	e098      	b.n	8003554 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003428:	2b00      	cmp	r3, #0
 800342a:	f040 8093 	bne.w	8003554 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	4a4b      	ldr	r2, [pc, #300]	@ (8003560 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d90f      	bls.n	8003456 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800344c:	461a      	mov	r2, r3
 800344e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003452:	6093      	str	r3, [r2, #8]
 8003454:	e07e      	b.n	8003554 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	4613      	mov	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	4413      	add	r3, r2
 8003468:	3304      	adds	r3, #4
 800346a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a1a      	ldr	r2, [r3, #32]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	0159      	lsls	r1, r3, #5
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	440b      	add	r3, r1
 8003478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003482:	1ad2      	subs	r2, r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d114      	bne.n	80034b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034a0:	461a      	mov	r2, r3
 80034a2:	2101      	movs	r1, #1
 80034a4:	f002 f806 	bl	80054b4 <USB_EP0_OutStart>
 80034a8:	e006      	b.n	80034b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	441a      	add	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	4619      	mov	r1, r3
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f004 fac6 	bl	8007a50 <HAL_PCD_DataOutStageCallback>
 80034c4:	e046      	b.n	8003554 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	4a26      	ldr	r2, [pc, #152]	@ (8003564 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d124      	bne.n	8003518 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034e4:	461a      	mov	r2, r3
 80034e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034ea:	6093      	str	r3, [r2, #8]
 80034ec:	e032      	b.n	8003554 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f003 0320 	and.w	r3, r3, #32
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003504:	461a      	mov	r2, r3
 8003506:	2320      	movs	r3, #32
 8003508:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	4619      	mov	r1, r3
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f004 fa9d 	bl	8007a50 <HAL_PCD_DataOutStageCallback>
 8003516:	e01d      	b.n	8003554 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d114      	bne.n	8003548 <PCD_EP_OutXfrComplete_int+0x1b0>
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	4613      	mov	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d108      	bne.n	8003548 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003540:	461a      	mov	r2, r3
 8003542:	2100      	movs	r1, #0
 8003544:	f001 ffb6 	bl	80054b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	4619      	mov	r1, r3
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f004 fa7e 	bl	8007a50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3720      	adds	r7, #32
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	4f54300a 	.word	0x4f54300a
 8003564:	4f54310a 	.word	0x4f54310a

08003568 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	333c      	adds	r3, #60	@ 0x3c
 8003580:	3304      	adds	r3, #4
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	015a      	lsls	r2, r3, #5
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4413      	add	r3, r2
 800358e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4a15      	ldr	r2, [pc, #84]	@ (80035f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d90e      	bls.n	80035bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d009      	beq.n	80035bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035b4:	461a      	mov	r2, r3
 80035b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f004 fa35 	bl	8007a2c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4a0a      	ldr	r2, [pc, #40]	@ (80035f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d90c      	bls.n	80035e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	799b      	ldrb	r3, [r3, #6]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d108      	bne.n	80035e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035dc:	461a      	mov	r2, r3
 80035de:	2101      	movs	r1, #1
 80035e0:	f001 ff68 	bl	80054b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	4f54300a 	.word	0x4f54300a

080035f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	70fb      	strb	r3, [r7, #3]
 8003600:	4613      	mov	r3, r2
 8003602:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d107      	bne.n	8003622 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003612:	883b      	ldrh	r3, [r7, #0]
 8003614:	0419      	lsls	r1, r3, #16
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	430a      	orrs	r2, r1
 800361e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003620:	e028      	b.n	8003674 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003628:	0c1b      	lsrs	r3, r3, #16
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	4413      	add	r3, r2
 800362e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003630:	2300      	movs	r3, #0
 8003632:	73fb      	strb	r3, [r7, #15]
 8003634:	e00d      	b.n	8003652 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	3340      	adds	r3, #64	@ 0x40
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	4413      	add	r3, r2
 800364a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	3301      	adds	r3, #1
 8003650:	73fb      	strb	r3, [r7, #15]
 8003652:	7bfa      	ldrb	r2, [r7, #15]
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	3b01      	subs	r3, #1
 8003658:	429a      	cmp	r2, r3
 800365a:	d3ec      	bcc.n	8003636 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800365c:	883b      	ldrh	r3, [r7, #0]
 800365e:	0418      	lsls	r0, r3, #16
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6819      	ldr	r1, [r3, #0]
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	3b01      	subs	r3, #1
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	4302      	orrs	r2, r0
 800366c:	3340      	adds	r3, #64	@ 0x40
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	887a      	ldrh	r2, [r7, #2]
 8003694:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e267      	b.n	8003b9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d075      	beq.n	80037c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036da:	4b88      	ldr	r3, [pc, #544]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 030c 	and.w	r3, r3, #12
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d00c      	beq.n	8003700 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036e6:	4b85      	ldr	r3, [pc, #532]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d112      	bne.n	8003718 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036f2:	4b82      	ldr	r3, [pc, #520]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036fe:	d10b      	bne.n	8003718 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003700:	4b7e      	ldr	r3, [pc, #504]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d05b      	beq.n	80037c4 <HAL_RCC_OscConfig+0x108>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d157      	bne.n	80037c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e242      	b.n	8003b9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003720:	d106      	bne.n	8003730 <HAL_RCC_OscConfig+0x74>
 8003722:	4b76      	ldr	r3, [pc, #472]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a75      	ldr	r2, [pc, #468]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 8003728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	e01d      	b.n	800376c <HAL_RCC_OscConfig+0xb0>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003738:	d10c      	bne.n	8003754 <HAL_RCC_OscConfig+0x98>
 800373a:	4b70      	ldr	r3, [pc, #448]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a6f      	ldr	r2, [pc, #444]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 8003740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	4b6d      	ldr	r3, [pc, #436]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a6c      	ldr	r2, [pc, #432]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 800374c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	e00b      	b.n	800376c <HAL_RCC_OscConfig+0xb0>
 8003754:	4b69      	ldr	r3, [pc, #420]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a68      	ldr	r2, [pc, #416]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 800375a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	4b66      	ldr	r3, [pc, #408]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a65      	ldr	r2, [pc, #404]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 8003766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800376a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d013      	beq.n	800379c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003774:	f7fd fa5e 	bl	8000c34 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800377c:	f7fd fa5a 	bl	8000c34 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b64      	cmp	r3, #100	@ 0x64
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e207      	b.n	8003b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378e:	4b5b      	ldr	r3, [pc, #364]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0xc0>
 800379a:	e014      	b.n	80037c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379c:	f7fd fa4a 	bl	8000c34 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a4:	f7fd fa46 	bl	8000c34 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b64      	cmp	r3, #100	@ 0x64
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e1f3      	b.n	8003b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037b6:	4b51      	ldr	r3, [pc, #324]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0xe8>
 80037c2:	e000      	b.n	80037c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d063      	beq.n	800389a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037d2:	4b4a      	ldr	r3, [pc, #296]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 030c 	and.w	r3, r3, #12
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00b      	beq.n	80037f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037de:	4b47      	ldr	r3, [pc, #284]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d11c      	bne.n	8003824 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ea:	4b44      	ldr	r3, [pc, #272]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d116      	bne.n	8003824 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f6:	4b41      	ldr	r3, [pc, #260]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d005      	beq.n	800380e <HAL_RCC_OscConfig+0x152>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d001      	beq.n	800380e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e1c7      	b.n	8003b9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380e:	4b3b      	ldr	r3, [pc, #236]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4937      	ldr	r1, [pc, #220]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 800381e:	4313      	orrs	r3, r2
 8003820:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003822:	e03a      	b.n	800389a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d020      	beq.n	800386e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800382c:	4b34      	ldr	r3, [pc, #208]	@ (8003900 <HAL_RCC_OscConfig+0x244>)
 800382e:	2201      	movs	r2, #1
 8003830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003832:	f7fd f9ff 	bl	8000c34 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800383a:	f7fd f9fb 	bl	8000c34 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e1a8      	b.n	8003b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384c:	4b2b      	ldr	r3, [pc, #172]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0f0      	beq.n	800383a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003858:	4b28      	ldr	r3, [pc, #160]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	4925      	ldr	r1, [pc, #148]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 8003868:	4313      	orrs	r3, r2
 800386a:	600b      	str	r3, [r1, #0]
 800386c:	e015      	b.n	800389a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800386e:	4b24      	ldr	r3, [pc, #144]	@ (8003900 <HAL_RCC_OscConfig+0x244>)
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fd f9de 	bl	8000c34 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800387c:	f7fd f9da 	bl	8000c34 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e187      	b.n	8003b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388e:	4b1b      	ldr	r3, [pc, #108]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d036      	beq.n	8003914 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d016      	beq.n	80038dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ae:	4b15      	ldr	r3, [pc, #84]	@ (8003904 <HAL_RCC_OscConfig+0x248>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b4:	f7fd f9be 	bl	8000c34 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038bc:	f7fd f9ba 	bl	8000c34 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e167      	b.n	8003b9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ce:	4b0b      	ldr	r3, [pc, #44]	@ (80038fc <HAL_RCC_OscConfig+0x240>)
 80038d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCC_OscConfig+0x200>
 80038da:	e01b      	b.n	8003914 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038dc:	4b09      	ldr	r3, [pc, #36]	@ (8003904 <HAL_RCC_OscConfig+0x248>)
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e2:	f7fd f9a7 	bl	8000c34 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e8:	e00e      	b.n	8003908 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ea:	f7fd f9a3 	bl	8000c34 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d907      	bls.n	8003908 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e150      	b.n	8003b9e <HAL_RCC_OscConfig+0x4e2>
 80038fc:	40023800 	.word	0x40023800
 8003900:	42470000 	.word	0x42470000
 8003904:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003908:	4b88      	ldr	r3, [pc, #544]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 800390a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1ea      	bne.n	80038ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 8097 	beq.w	8003a50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003922:	2300      	movs	r3, #0
 8003924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003926:	4b81      	ldr	r3, [pc, #516]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 8003928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10f      	bne.n	8003952 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003932:	2300      	movs	r3, #0
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	4b7d      	ldr	r3, [pc, #500]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393a:	4a7c      	ldr	r2, [pc, #496]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 800393c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003940:	6413      	str	r3, [r2, #64]	@ 0x40
 8003942:	4b7a      	ldr	r3, [pc, #488]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800394a:	60bb      	str	r3, [r7, #8]
 800394c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800394e:	2301      	movs	r3, #1
 8003950:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003952:	4b77      	ldr	r3, [pc, #476]	@ (8003b30 <HAL_RCC_OscConfig+0x474>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800395a:	2b00      	cmp	r3, #0
 800395c:	d118      	bne.n	8003990 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800395e:	4b74      	ldr	r3, [pc, #464]	@ (8003b30 <HAL_RCC_OscConfig+0x474>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a73      	ldr	r2, [pc, #460]	@ (8003b30 <HAL_RCC_OscConfig+0x474>)
 8003964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800396a:	f7fd f963 	bl	8000c34 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003972:	f7fd f95f 	bl	8000c34 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e10c      	b.n	8003b9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003984:	4b6a      	ldr	r3, [pc, #424]	@ (8003b30 <HAL_RCC_OscConfig+0x474>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d106      	bne.n	80039a6 <HAL_RCC_OscConfig+0x2ea>
 8003998:	4b64      	ldr	r3, [pc, #400]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 800399a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800399c:	4a63      	ldr	r2, [pc, #396]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80039a4:	e01c      	b.n	80039e0 <HAL_RCC_OscConfig+0x324>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	2b05      	cmp	r3, #5
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x30c>
 80039ae:	4b5f      	ldr	r3, [pc, #380]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b2:	4a5e      	ldr	r2, [pc, #376]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 80039b4:	f043 0304 	orr.w	r3, r3, #4
 80039b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80039ba:	4b5c      	ldr	r3, [pc, #368]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 80039bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039be:	4a5b      	ldr	r2, [pc, #364]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 80039c0:	f043 0301 	orr.w	r3, r3, #1
 80039c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80039c6:	e00b      	b.n	80039e0 <HAL_RCC_OscConfig+0x324>
 80039c8:	4b58      	ldr	r3, [pc, #352]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 80039ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039cc:	4a57      	ldr	r2, [pc, #348]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 80039ce:	f023 0301 	bic.w	r3, r3, #1
 80039d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80039d4:	4b55      	ldr	r3, [pc, #340]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 80039d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d8:	4a54      	ldr	r2, [pc, #336]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 80039da:	f023 0304 	bic.w	r3, r3, #4
 80039de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d015      	beq.n	8003a14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e8:	f7fd f924 	bl	8000c34 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ee:	e00a      	b.n	8003a06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f0:	f7fd f920 	bl	8000c34 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e0cb      	b.n	8003b9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a06:	4b49      	ldr	r3, [pc, #292]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0ee      	beq.n	80039f0 <HAL_RCC_OscConfig+0x334>
 8003a12:	e014      	b.n	8003a3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a14:	f7fd f90e 	bl	8000c34 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a1a:	e00a      	b.n	8003a32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a1c:	f7fd f90a 	bl	8000c34 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e0b5      	b.n	8003b9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a32:	4b3e      	ldr	r3, [pc, #248]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 8003a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1ee      	bne.n	8003a1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a3e:	7dfb      	ldrb	r3, [r7, #23]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d105      	bne.n	8003a50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a44:	4b39      	ldr	r3, [pc, #228]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 8003a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a48:	4a38      	ldr	r2, [pc, #224]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 8003a4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 80a1 	beq.w	8003b9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a5a:	4b34      	ldr	r3, [pc, #208]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d05c      	beq.n	8003b20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d141      	bne.n	8003af2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a6e:	4b31      	ldr	r3, [pc, #196]	@ (8003b34 <HAL_RCC_OscConfig+0x478>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a74:	f7fd f8de 	bl	8000c34 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7c:	f7fd f8da 	bl	8000c34 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e087      	b.n	8003b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8e:	4b27      	ldr	r3, [pc, #156]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f0      	bne.n	8003a7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69da      	ldr	r2, [r3, #28]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa8:	019b      	lsls	r3, r3, #6
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab0:	085b      	lsrs	r3, r3, #1
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	041b      	lsls	r3, r3, #16
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003abc:	061b      	lsls	r3, r3, #24
 8003abe:	491b      	ldr	r1, [pc, #108]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b34 <HAL_RCC_OscConfig+0x478>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aca:	f7fd f8b3 	bl	8000c34 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad2:	f7fd f8af 	bl	8000c34 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e05c      	b.n	8003b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae4:	4b11      	ldr	r3, [pc, #68]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x416>
 8003af0:	e054      	b.n	8003b9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af2:	4b10      	ldr	r3, [pc, #64]	@ (8003b34 <HAL_RCC_OscConfig+0x478>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af8:	f7fd f89c 	bl	8000c34 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b00:	f7fd f898 	bl	8000c34 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e045      	b.n	8003b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b12:	4b06      	ldr	r3, [pc, #24]	@ (8003b2c <HAL_RCC_OscConfig+0x470>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_OscConfig+0x444>
 8003b1e:	e03d      	b.n	8003b9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d107      	bne.n	8003b38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e038      	b.n	8003b9e <HAL_RCC_OscConfig+0x4e2>
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	40007000 	.word	0x40007000
 8003b34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b38:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba8 <HAL_RCC_OscConfig+0x4ec>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d028      	beq.n	8003b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d121      	bne.n	8003b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d11a      	bne.n	8003b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b68:	4013      	ands	r3, r2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d111      	bne.n	8003b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7e:	085b      	lsrs	r3, r3, #1
 8003b80:	3b01      	subs	r3, #1
 8003b82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d107      	bne.n	8003b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d001      	beq.n	8003b9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e000      	b.n	8003b9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40023800 	.word	0x40023800

08003bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0cc      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc0:	4b68      	ldr	r3, [pc, #416]	@ (8003d64 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d90c      	bls.n	8003be8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bce:	4b65      	ldr	r3, [pc, #404]	@ (8003d64 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd6:	4b63      	ldr	r3, [pc, #396]	@ (8003d64 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d001      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0b8      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d020      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c00:	4b59      	ldr	r3, [pc, #356]	@ (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	4a58      	ldr	r2, [pc, #352]	@ (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c18:	4b53      	ldr	r3, [pc, #332]	@ (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	4a52      	ldr	r2, [pc, #328]	@ (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c24:	4b50      	ldr	r3, [pc, #320]	@ (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	494d      	ldr	r1, [pc, #308]	@ (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d044      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d107      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4a:	4b47      	ldr	r3, [pc, #284]	@ (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d119      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e07f      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d003      	beq.n	8003c6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c66:	2b03      	cmp	r3, #3
 8003c68:	d107      	bne.n	8003c7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d109      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e06f      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e067      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c8a:	4b37      	ldr	r3, [pc, #220]	@ (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f023 0203 	bic.w	r2, r3, #3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	4934      	ldr	r1, [pc, #208]	@ (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c9c:	f7fc ffca 	bl	8000c34 <HAL_GetTick>
 8003ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca2:	e00a      	b.n	8003cba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca4:	f7fc ffc6 	bl	8000c34 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e04f      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cba:	4b2b      	ldr	r3, [pc, #172]	@ (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 020c 	and.w	r2, r3, #12
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d1eb      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ccc:	4b25      	ldr	r3, [pc, #148]	@ (8003d64 <HAL_RCC_ClockConfig+0x1b8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d20c      	bcs.n	8003cf4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cda:	4b22      	ldr	r3, [pc, #136]	@ (8003d64 <HAL_RCC_ClockConfig+0x1b8>)
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce2:	4b20      	ldr	r3, [pc, #128]	@ (8003d64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e032      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d00:	4b19      	ldr	r3, [pc, #100]	@ (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4916      	ldr	r1, [pc, #88]	@ (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d009      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d1e:	4b12      	ldr	r3, [pc, #72]	@ (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	490e      	ldr	r1, [pc, #56]	@ (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d32:	f000 f821 	bl	8003d78 <HAL_RCC_GetSysClockFreq>
 8003d36:	4602      	mov	r2, r0
 8003d38:	4b0b      	ldr	r3, [pc, #44]	@ (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	490a      	ldr	r1, [pc, #40]	@ (8003d6c <HAL_RCC_ClockConfig+0x1c0>)
 8003d44:	5ccb      	ldrb	r3, [r1, r3]
 8003d46:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4a:	4a09      	ldr	r2, [pc, #36]	@ (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d4e:	4b09      	ldr	r3, [pc, #36]	@ (8003d74 <HAL_RCC_ClockConfig+0x1c8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fc ff2a 	bl	8000bac <HAL_InitTick>

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40023c00 	.word	0x40023c00
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	08008964 	.word	0x08008964
 8003d70:	20000000 	.word	0x20000000
 8003d74:	20000004 	.word	0x20000004

08003d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d7c:	b090      	sub	sp, #64	@ 0x40
 8003d7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d90:	4b59      	ldr	r3, [pc, #356]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 030c 	and.w	r3, r3, #12
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d00d      	beq.n	8003db8 <HAL_RCC_GetSysClockFreq+0x40>
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	f200 80a1 	bhi.w	8003ee4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <HAL_RCC_GetSysClockFreq+0x34>
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d003      	beq.n	8003db2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003daa:	e09b      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dac:	4b53      	ldr	r3, [pc, #332]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x184>)
 8003dae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003db0:	e09b      	b.n	8003eea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003db2:	4b53      	ldr	r3, [pc, #332]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x188>)
 8003db4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003db6:	e098      	b.n	8003eea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003db8:	4b4f      	ldr	r3, [pc, #316]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dc0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dc2:	4b4d      	ldr	r3, [pc, #308]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d028      	beq.n	8003e20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dce:	4b4a      	ldr	r3, [pc, #296]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	099b      	lsrs	r3, r3, #6
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	623b      	str	r3, [r7, #32]
 8003dd8:	627a      	str	r2, [r7, #36]	@ 0x24
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003de0:	2100      	movs	r1, #0
 8003de2:	4b47      	ldr	r3, [pc, #284]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x188>)
 8003de4:	fb03 f201 	mul.w	r2, r3, r1
 8003de8:	2300      	movs	r3, #0
 8003dea:	fb00 f303 	mul.w	r3, r0, r3
 8003dee:	4413      	add	r3, r2
 8003df0:	4a43      	ldr	r2, [pc, #268]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x188>)
 8003df2:	fba0 1202 	umull	r1, r2, r0, r2
 8003df6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003df8:	460a      	mov	r2, r1
 8003dfa:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003dfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dfe:	4413      	add	r3, r2
 8003e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e04:	2200      	movs	r2, #0
 8003e06:	61bb      	str	r3, [r7, #24]
 8003e08:	61fa      	str	r2, [r7, #28]
 8003e0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003e12:	f7fc fa2d 	bl	8000270 <__aeabi_uldivmod>
 8003e16:	4602      	mov	r2, r0
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e1e:	e053      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e20:	4b35      	ldr	r3, [pc, #212]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	099b      	lsrs	r3, r3, #6
 8003e26:	2200      	movs	r2, #0
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	617a      	str	r2, [r7, #20]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e32:	f04f 0b00 	mov.w	fp, #0
 8003e36:	4652      	mov	r2, sl
 8003e38:	465b      	mov	r3, fp
 8003e3a:	f04f 0000 	mov.w	r0, #0
 8003e3e:	f04f 0100 	mov.w	r1, #0
 8003e42:	0159      	lsls	r1, r3, #5
 8003e44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e48:	0150      	lsls	r0, r2, #5
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	ebb2 080a 	subs.w	r8, r2, sl
 8003e52:	eb63 090b 	sbc.w	r9, r3, fp
 8003e56:	f04f 0200 	mov.w	r2, #0
 8003e5a:	f04f 0300 	mov.w	r3, #0
 8003e5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e6a:	ebb2 0408 	subs.w	r4, r2, r8
 8003e6e:	eb63 0509 	sbc.w	r5, r3, r9
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	00eb      	lsls	r3, r5, #3
 8003e7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e80:	00e2      	lsls	r2, r4, #3
 8003e82:	4614      	mov	r4, r2
 8003e84:	461d      	mov	r5, r3
 8003e86:	eb14 030a 	adds.w	r3, r4, sl
 8003e8a:	603b      	str	r3, [r7, #0]
 8003e8c:	eb45 030b 	adc.w	r3, r5, fp
 8003e90:	607b      	str	r3, [r7, #4]
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e9e:	4629      	mov	r1, r5
 8003ea0:	028b      	lsls	r3, r1, #10
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ea8:	4621      	mov	r1, r4
 8003eaa:	028a      	lsls	r2, r1, #10
 8003eac:	4610      	mov	r0, r2
 8003eae:	4619      	mov	r1, r3
 8003eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	60bb      	str	r3, [r7, #8]
 8003eb6:	60fa      	str	r2, [r7, #12]
 8003eb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ebc:	f7fc f9d8 	bl	8000270 <__aeabi_uldivmod>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	0c1b      	lsrs	r3, r3, #16
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003ed8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ee2:	e002      	b.n	8003eea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ee4:	4b05      	ldr	r3, [pc, #20]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x184>)
 8003ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3740      	adds	r7, #64	@ 0x40
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	00f42400 	.word	0x00f42400
 8003f00:	017d7840 	.word	0x017d7840

08003f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f08:	4b03      	ldr	r3, [pc, #12]	@ (8003f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	20000000 	.word	0x20000000

08003f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f20:	f7ff fff0 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8003f24:	4602      	mov	r2, r0
 8003f26:	4b05      	ldr	r3, [pc, #20]	@ (8003f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	0a9b      	lsrs	r3, r3, #10
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	4903      	ldr	r1, [pc, #12]	@ (8003f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f32:	5ccb      	ldrb	r3, [r1, r3]
 8003f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	08008974 	.word	0x08008974

08003f44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f44:	b084      	sub	sp, #16
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b084      	sub	sp, #16
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	f107 001c 	add.w	r0, r7, #28
 8003f52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f56:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d123      	bne.n	8003fa6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f62:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003f72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d105      	bne.n	8003f9a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f001 fae8 	bl	8005570 <USB_CoreReset>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	73fb      	strb	r3, [r7, #15]
 8003fa4:	e01b      	b.n	8003fde <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f001 fadc 	bl	8005570 <USB_CoreReset>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003fbc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d106      	bne.n	8003fd2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	639a      	str	r2, [r3, #56]	@ 0x38
 8003fd0:	e005      	b.n	8003fde <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003fde:	7fbb      	ldrb	r3, [r7, #30]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d10b      	bne.n	8003ffc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f043 0206 	orr.w	r2, r3, #6
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f043 0220 	orr.w	r2, r3, #32
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004008:	b004      	add	sp, #16
 800400a:	4770      	bx	lr

0800400c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	4613      	mov	r3, r2
 8004018:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	2b02      	cmp	r3, #2
 800401e:	d165      	bne.n	80040ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4a41      	ldr	r2, [pc, #260]	@ (8004128 <USB_SetTurnaroundTime+0x11c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d906      	bls.n	8004036 <USB_SetTurnaroundTime+0x2a>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4a40      	ldr	r2, [pc, #256]	@ (800412c <USB_SetTurnaroundTime+0x120>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d202      	bcs.n	8004036 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004030:	230f      	movs	r3, #15
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	e062      	b.n	80040fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4a3c      	ldr	r2, [pc, #240]	@ (800412c <USB_SetTurnaroundTime+0x120>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d306      	bcc.n	800404c <USB_SetTurnaroundTime+0x40>
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	4a3b      	ldr	r2, [pc, #236]	@ (8004130 <USB_SetTurnaroundTime+0x124>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d202      	bcs.n	800404c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004046:	230e      	movs	r3, #14
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	e057      	b.n	80040fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4a38      	ldr	r2, [pc, #224]	@ (8004130 <USB_SetTurnaroundTime+0x124>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d306      	bcc.n	8004062 <USB_SetTurnaroundTime+0x56>
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4a37      	ldr	r2, [pc, #220]	@ (8004134 <USB_SetTurnaroundTime+0x128>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d202      	bcs.n	8004062 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800405c:	230d      	movs	r3, #13
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	e04c      	b.n	80040fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4a33      	ldr	r2, [pc, #204]	@ (8004134 <USB_SetTurnaroundTime+0x128>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d306      	bcc.n	8004078 <USB_SetTurnaroundTime+0x6c>
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	4a32      	ldr	r2, [pc, #200]	@ (8004138 <USB_SetTurnaroundTime+0x12c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d802      	bhi.n	8004078 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004072:	230c      	movs	r3, #12
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	e041      	b.n	80040fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4a2f      	ldr	r2, [pc, #188]	@ (8004138 <USB_SetTurnaroundTime+0x12c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d906      	bls.n	800408e <USB_SetTurnaroundTime+0x82>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4a2e      	ldr	r2, [pc, #184]	@ (800413c <USB_SetTurnaroundTime+0x130>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d802      	bhi.n	800408e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004088:	230b      	movs	r3, #11
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	e036      	b.n	80040fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	4a2a      	ldr	r2, [pc, #168]	@ (800413c <USB_SetTurnaroundTime+0x130>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d906      	bls.n	80040a4 <USB_SetTurnaroundTime+0x98>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	4a29      	ldr	r2, [pc, #164]	@ (8004140 <USB_SetTurnaroundTime+0x134>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d802      	bhi.n	80040a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800409e:	230a      	movs	r3, #10
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	e02b      	b.n	80040fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4a26      	ldr	r2, [pc, #152]	@ (8004140 <USB_SetTurnaroundTime+0x134>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d906      	bls.n	80040ba <USB_SetTurnaroundTime+0xae>
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4a25      	ldr	r2, [pc, #148]	@ (8004144 <USB_SetTurnaroundTime+0x138>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d202      	bcs.n	80040ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80040b4:	2309      	movs	r3, #9
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	e020      	b.n	80040fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	4a21      	ldr	r2, [pc, #132]	@ (8004144 <USB_SetTurnaroundTime+0x138>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d306      	bcc.n	80040d0 <USB_SetTurnaroundTime+0xc4>
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	4a20      	ldr	r2, [pc, #128]	@ (8004148 <USB_SetTurnaroundTime+0x13c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d802      	bhi.n	80040d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80040ca:	2308      	movs	r3, #8
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	e015      	b.n	80040fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004148 <USB_SetTurnaroundTime+0x13c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d906      	bls.n	80040e6 <USB_SetTurnaroundTime+0xda>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4a1c      	ldr	r2, [pc, #112]	@ (800414c <USB_SetTurnaroundTime+0x140>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d202      	bcs.n	80040e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80040e0:	2307      	movs	r3, #7
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	e00a      	b.n	80040fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80040e6:	2306      	movs	r3, #6
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	e007      	b.n	80040fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d102      	bne.n	80040f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80040f2:	2309      	movs	r3, #9
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	e001      	b.n	80040fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80040f8:	2309      	movs	r3, #9
 80040fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	029b      	lsls	r3, r3, #10
 8004110:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004114:	431a      	orrs	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	371c      	adds	r7, #28
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	00d8acbf 	.word	0x00d8acbf
 800412c:	00e4e1c0 	.word	0x00e4e1c0
 8004130:	00f42400 	.word	0x00f42400
 8004134:	01067380 	.word	0x01067380
 8004138:	011a499f 	.word	0x011a499f
 800413c:	01312cff 	.word	0x01312cff
 8004140:	014ca43f 	.word	0x014ca43f
 8004144:	016e3600 	.word	0x016e3600
 8004148:	01a6ab1f 	.word	0x01a6ab1f
 800414c:	01e84800 	.word	0x01e84800

08004150 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f043 0201 	orr.w	r2, r3, #1
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f023 0201 	bic.w	r2, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80041b0:	78fb      	ldrb	r3, [r7, #3]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d115      	bne.n	80041e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80041c2:	200a      	movs	r0, #10
 80041c4:	f7fc fd42 	bl	8000c4c <HAL_Delay>
      ms += 10U;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	330a      	adds	r3, #10
 80041cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f001 f93f 	bl	8005452 <USB_GetMode>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d01e      	beq.n	8004218 <USB_SetCurrentMode+0x84>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2bc7      	cmp	r3, #199	@ 0xc7
 80041de:	d9f0      	bls.n	80041c2 <USB_SetCurrentMode+0x2e>
 80041e0:	e01a      	b.n	8004218 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d115      	bne.n	8004214 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80041f4:	200a      	movs	r0, #10
 80041f6:	f7fc fd29 	bl	8000c4c <HAL_Delay>
      ms += 10U;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	330a      	adds	r3, #10
 80041fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f001 f926 	bl	8005452 <USB_GetMode>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <USB_SetCurrentMode+0x84>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004210:	d9f0      	bls.n	80041f4 <USB_SetCurrentMode+0x60>
 8004212:	e001      	b.n	8004218 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e005      	b.n	8004224 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2bc8      	cmp	r3, #200	@ 0xc8
 800421c:	d101      	bne.n	8004222 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800422c:	b084      	sub	sp, #16
 800422e:	b580      	push	{r7, lr}
 8004230:	b086      	sub	sp, #24
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800423a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004246:	2300      	movs	r3, #0
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	e009      	b.n	8004260 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	3340      	adds	r3, #64	@ 0x40
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	2200      	movs	r2, #0
 8004258:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	3301      	adds	r3, #1
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	2b0e      	cmp	r3, #14
 8004264:	d9f2      	bls.n	800424c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004266:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800426a:	2b00      	cmp	r3, #0
 800426c:	d11c      	bne.n	80042a8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800427c:	f043 0302 	orr.w	r3, r3, #2
 8004280:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004286:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004292:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80042a6:	e00b      	b.n	80042c0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ac:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80042c6:	461a      	mov	r2, r3
 80042c8:	2300      	movs	r3, #0
 80042ca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042cc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d10d      	bne.n	80042f0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d104      	bne.n	80042e6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042dc:	2100      	movs	r1, #0
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f968 	bl	80045b4 <USB_SetDevSpeed>
 80042e4:	e008      	b.n	80042f8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042e6:	2101      	movs	r1, #1
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f963 	bl	80045b4 <USB_SetDevSpeed>
 80042ee:	e003      	b.n	80042f8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042f0:	2103      	movs	r1, #3
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f95e 	bl	80045b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042f8:	2110      	movs	r1, #16
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f8fa 	bl	80044f4 <USB_FlushTxFifo>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f924 	bl	8004558 <USB_FlushRxFifo>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004320:	461a      	mov	r2, r3
 8004322:	2300      	movs	r3, #0
 8004324:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800432c:	461a      	mov	r2, r3
 800432e:	2300      	movs	r3, #0
 8004330:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004338:	461a      	mov	r2, r3
 800433a:	2300      	movs	r3, #0
 800433c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800433e:	2300      	movs	r3, #0
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	e043      	b.n	80043cc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004356:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800435a:	d118      	bne.n	800438e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800436e:	461a      	mov	r2, r3
 8004370:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	e013      	b.n	80043a0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004384:	461a      	mov	r2, r3
 8004386:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	e008      	b.n	80043a0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4413      	add	r3, r2
 8004396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800439a:	461a      	mov	r2, r3
 800439c:	2300      	movs	r3, #0
 800439e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043ac:	461a      	mov	r2, r3
 80043ae:	2300      	movs	r3, #0
 80043b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043be:	461a      	mov	r2, r3
 80043c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80043c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	3301      	adds	r3, #1
 80043ca:	613b      	str	r3, [r7, #16]
 80043cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80043d0:	461a      	mov	r2, r3
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d3b5      	bcc.n	8004344 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043d8:	2300      	movs	r3, #0
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	e043      	b.n	8004466 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043f4:	d118      	bne.n	8004428 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004408:	461a      	mov	r2, r3
 800440a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	e013      	b.n	800443a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800441e:	461a      	mov	r2, r3
 8004420:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	e008      	b.n	800443a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004434:	461a      	mov	r2, r3
 8004436:	2300      	movs	r3, #0
 8004438:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004446:	461a      	mov	r2, r3
 8004448:	2300      	movs	r3, #0
 800444a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4413      	add	r3, r2
 8004454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004458:	461a      	mov	r2, r3
 800445a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800445e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	3301      	adds	r3, #1
 8004464:	613b      	str	r3, [r7, #16]
 8004466:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800446a:	461a      	mov	r2, r3
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	4293      	cmp	r3, r2
 8004470:	d3b5      	bcc.n	80043de <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004484:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004492:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004494:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004498:	2b00      	cmp	r3, #0
 800449a:	d105      	bne.n	80044a8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	f043 0210 	orr.w	r2, r3, #16
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699a      	ldr	r2, [r3, #24]
 80044ac:	4b10      	ldr	r3, [pc, #64]	@ (80044f0 <USB_DevInit+0x2c4>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80044b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	f043 0208 	orr.w	r2, r3, #8
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80044c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d107      	bne.n	80044e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044d8:	f043 0304 	orr.w	r3, r3, #4
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80044e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044ec:	b004      	add	sp, #16
 80044ee:	4770      	bx	lr
 80044f0:	803c3800 	.word	0x803c3800

080044f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3301      	adds	r3, #1
 8004506:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800450e:	d901      	bls.n	8004514 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e01b      	b.n	800454c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	daf2      	bge.n	8004502 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	019b      	lsls	r3, r3, #6
 8004524:	f043 0220 	orr.w	r2, r3, #32
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	3301      	adds	r3, #1
 8004530:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004538:	d901      	bls.n	800453e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e006      	b.n	800454c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	2b20      	cmp	r3, #32
 8004548:	d0f0      	beq.n	800452c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3301      	adds	r3, #1
 8004568:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004570:	d901      	bls.n	8004576 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e018      	b.n	80045a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	daf2      	bge.n	8004564 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2210      	movs	r2, #16
 8004586:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3301      	adds	r3, #1
 800458c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004594:	d901      	bls.n	800459a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e006      	b.n	80045a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b10      	cmp	r3, #16
 80045a4:	d0f0      	beq.n	8004588 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	460b      	mov	r3, r1
 80045be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	78fb      	ldrb	r3, [r7, #3]
 80045ce:	68f9      	ldr	r1, [r7, #12]
 80045d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045d4:	4313      	orrs	r3, r2
 80045d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b087      	sub	sp, #28
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 0306 	and.w	r3, r3, #6
 80045fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d102      	bne.n	800460c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004606:	2300      	movs	r3, #0
 8004608:	75fb      	strb	r3, [r7, #23]
 800460a:	e00a      	b.n	8004622 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d002      	beq.n	8004618 <USB_GetDevSpeed+0x32>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b06      	cmp	r3, #6
 8004616:	d102      	bne.n	800461e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004618:	2302      	movs	r3, #2
 800461a:	75fb      	strb	r3, [r7, #23]
 800461c:	e001      	b.n	8004622 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800461e:	230f      	movs	r3, #15
 8004620:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004622:	7dfb      	ldrb	r3, [r7, #23]
}
 8004624:	4618      	mov	r0, r3
 8004626:	371c      	adds	r7, #28
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	785b      	ldrb	r3, [r3, #1]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d13a      	bne.n	80046c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004652:	69da      	ldr	r2, [r3, #28]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	f003 030f 	and.w	r3, r3, #15
 800465c:	2101      	movs	r1, #1
 800465e:	fa01 f303 	lsl.w	r3, r1, r3
 8004662:	b29b      	uxth	r3, r3
 8004664:	68f9      	ldr	r1, [r7, #12]
 8004666:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800466a:	4313      	orrs	r3, r2
 800466c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d155      	bne.n	8004730 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	791b      	ldrb	r3, [r3, #4]
 800469e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	059b      	lsls	r3, r3, #22
 80046a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046a8:	4313      	orrs	r3, r2
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	0151      	lsls	r1, r2, #5
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	440a      	add	r2, r1
 80046b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	e036      	b.n	8004730 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046c8:	69da      	ldr	r2, [r3, #28]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	2101      	movs	r1, #1
 80046d4:	fa01 f303 	lsl.w	r3, r1, r3
 80046d8:	041b      	lsls	r3, r3, #16
 80046da:	68f9      	ldr	r1, [r7, #12]
 80046dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d11a      	bne.n	8004730 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	791b      	ldrb	r3, [r3, #4]
 8004714:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004716:	430b      	orrs	r3, r1
 8004718:	4313      	orrs	r3, r2
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	0151      	lsls	r1, r2, #5
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	440a      	add	r2, r1
 8004722:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800472a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800472e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
	...

08004740 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	785b      	ldrb	r3, [r3, #1]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d161      	bne.n	8004820 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800476e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004772:	d11f      	bne.n	80047b4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	0151      	lsls	r1, r2, #5
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	440a      	add	r2, r1
 800478a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800478e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004792:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	0151      	lsls	r1, r2, #5
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	440a      	add	r2, r1
 80047aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80047b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	f003 030f 	and.w	r3, r3, #15
 80047c4:	2101      	movs	r1, #1
 80047c6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	43db      	mvns	r3, r3
 80047ce:	68f9      	ldr	r1, [r7, #12]
 80047d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047d4:	4013      	ands	r3, r2
 80047d6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047de:	69da      	ldr	r2, [r3, #28]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	2101      	movs	r1, #1
 80047ea:	fa01 f303 	lsl.w	r3, r1, r3
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	68f9      	ldr	r1, [r7, #12]
 80047f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047f8:	4013      	ands	r3, r2
 80047fa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	0159      	lsls	r1, r3, #5
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	440b      	add	r3, r1
 8004812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004816:	4619      	mov	r1, r3
 8004818:	4b35      	ldr	r3, [pc, #212]	@ (80048f0 <USB_DeactivateEndpoint+0x1b0>)
 800481a:	4013      	ands	r3, r2
 800481c:	600b      	str	r3, [r1, #0]
 800481e:	e060      	b.n	80048e2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004832:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004836:	d11f      	bne.n	8004878 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4413      	add	r3, r2
 8004840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	0151      	lsls	r1, r2, #5
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	440a      	add	r2, r1
 800484e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004852:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004856:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	0151      	lsls	r1, r2, #5
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	440a      	add	r2, r1
 800486e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004872:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004876:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800487e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	2101      	movs	r1, #1
 800488a:	fa01 f303 	lsl.w	r3, r1, r3
 800488e:	041b      	lsls	r3, r3, #16
 8004890:	43db      	mvns	r3, r3
 8004892:	68f9      	ldr	r1, [r7, #12]
 8004894:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004898:	4013      	ands	r3, r2
 800489a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048a2:	69da      	ldr	r2, [r3, #28]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	2101      	movs	r1, #1
 80048ae:	fa01 f303 	lsl.w	r3, r1, r3
 80048b2:	041b      	lsls	r3, r3, #16
 80048b4:	43db      	mvns	r3, r3
 80048b6:	68f9      	ldr	r1, [r7, #12]
 80048b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048bc:	4013      	ands	r3, r2
 80048be:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	0159      	lsls	r1, r3, #5
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	440b      	add	r3, r1
 80048d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048da:	4619      	mov	r1, r3
 80048dc:	4b05      	ldr	r3, [pc, #20]	@ (80048f4 <USB_DeactivateEndpoint+0x1b4>)
 80048de:	4013      	ands	r3, r2
 80048e0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	ec337800 	.word	0xec337800
 80048f4:	eff37800 	.word	0xeff37800

080048f8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08a      	sub	sp, #40	@ 0x28
 80048fc:	af02      	add	r7, sp, #8
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	4613      	mov	r3, r2
 8004904:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	785b      	ldrb	r3, [r3, #1]
 8004914:	2b01      	cmp	r3, #1
 8004916:	f040 817f 	bne.w	8004c18 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d132      	bne.n	8004988 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	0151      	lsls	r1, r2, #5
 8004934:	69fa      	ldr	r2, [r7, #28]
 8004936:	440a      	add	r2, r1
 8004938:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800493c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004940:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004944:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	0151      	lsls	r1, r2, #5
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	440a      	add	r2, r1
 800495c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004960:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004964:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	0151      	lsls	r1, r2, #5
 8004978:	69fa      	ldr	r2, [r7, #28]
 800497a:	440a      	add	r2, r1
 800497c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004980:	0cdb      	lsrs	r3, r3, #19
 8004982:	04db      	lsls	r3, r3, #19
 8004984:	6113      	str	r3, [r2, #16]
 8004986:	e097      	b.n	8004ab8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	0151      	lsls	r1, r2, #5
 800499a:	69fa      	ldr	r2, [r7, #28]
 800499c:	440a      	add	r2, r1
 800499e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049a2:	0cdb      	lsrs	r3, r3, #19
 80049a4:	04db      	lsls	r3, r3, #19
 80049a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	0151      	lsls	r1, r2, #5
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	440a      	add	r2, r1
 80049be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049c2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80049c6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80049ca:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d11a      	bne.n	8004a08 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	691a      	ldr	r2, [r3, #16]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d903      	bls.n	80049e6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	0151      	lsls	r1, r2, #5
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	440a      	add	r2, r1
 80049fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a04:	6113      	str	r3, [r2, #16]
 8004a06:	e044      	b.n	8004a92 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	691a      	ldr	r2, [r3, #16]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	4413      	add	r3, r2
 8004a12:	1e5a      	subs	r2, r3, #1
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a2a:	691a      	ldr	r2, [r3, #16]
 8004a2c:	8afb      	ldrh	r3, [r7, #22]
 8004a2e:	04d9      	lsls	r1, r3, #19
 8004a30:	4ba4      	ldr	r3, [pc, #656]	@ (8004cc4 <USB_EPStartXfer+0x3cc>)
 8004a32:	400b      	ands	r3, r1
 8004a34:	69b9      	ldr	r1, [r7, #24]
 8004a36:	0148      	lsls	r0, r1, #5
 8004a38:	69f9      	ldr	r1, [r7, #28]
 8004a3a:	4401      	add	r1, r0
 8004a3c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004a40:	4313      	orrs	r3, r2
 8004a42:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	791b      	ldrb	r3, [r3, #4]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d122      	bne.n	8004a92 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	0151      	lsls	r1, r2, #5
 8004a5e:	69fa      	ldr	r2, [r7, #28]
 8004a60:	440a      	add	r2, r1
 8004a62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a66:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004a6a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a78:	691a      	ldr	r2, [r3, #16]
 8004a7a:	8afb      	ldrh	r3, [r7, #22]
 8004a7c:	075b      	lsls	r3, r3, #29
 8004a7e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004a82:	69b9      	ldr	r1, [r7, #24]
 8004a84:	0148      	lsls	r0, r1, #5
 8004a86:	69f9      	ldr	r1, [r7, #28]
 8004a88:	4401      	add	r1, r0
 8004a8a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a9e:	691a      	ldr	r2, [r3, #16]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa8:	69b9      	ldr	r1, [r7, #24]
 8004aaa:	0148      	lsls	r0, r1, #5
 8004aac:	69f9      	ldr	r1, [r7, #28]
 8004aae:	4401      	add	r1, r0
 8004ab0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d14b      	bne.n	8004b56 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	791b      	ldrb	r3, [r3, #4]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d128      	bne.n	8004b34 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d110      	bne.n	8004b14 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	0151      	lsls	r1, r2, #5
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	440a      	add	r2, r1
 8004b08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b0c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	e00f      	b.n	8004b34 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	0151      	lsls	r1, r2, #5
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	440a      	add	r2, r1
 8004b2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b32:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	0151      	lsls	r1, r2, #5
 8004b46:	69fa      	ldr	r2, [r7, #28]
 8004b48:	440a      	add	r2, r1
 8004b4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b4e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	e166      	b.n	8004e24 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	0151      	lsls	r1, r2, #5
 8004b68:	69fa      	ldr	r2, [r7, #28]
 8004b6a:	440a      	add	r2, r1
 8004b6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b70:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004b74:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	791b      	ldrb	r3, [r3, #4]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d015      	beq.n	8004baa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 814e 	beq.w	8004e24 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	2101      	movs	r1, #1
 8004b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9e:	69f9      	ldr	r1, [r7, #28]
 8004ba0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	634b      	str	r3, [r1, #52]	@ 0x34
 8004ba8:	e13c      	b.n	8004e24 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d110      	bne.n	8004bdc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	0151      	lsls	r1, r2, #5
 8004bcc:	69fa      	ldr	r2, [r7, #28]
 8004bce:	440a      	add	r2, r1
 8004bd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bd4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	e00f      	b.n	8004bfc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	0151      	lsls	r1, r2, #5
 8004bee:	69fa      	ldr	r2, [r7, #28]
 8004bf0:	440a      	add	r2, r1
 8004bf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bfa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	68d9      	ldr	r1, [r3, #12]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	781a      	ldrb	r2, [r3, #0]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	b298      	uxth	r0, r3
 8004c0a:	79fb      	ldrb	r3, [r7, #7]
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	4603      	mov	r3, r0
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 f9b9 	bl	8004f88 <USB_WritePacket>
 8004c16:	e105      	b.n	8004e24 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	0151      	lsls	r1, r2, #5
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	440a      	add	r2, r1
 8004c2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c32:	0cdb      	lsrs	r3, r3, #19
 8004c34:	04db      	lsls	r3, r3, #19
 8004c36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	0151      	lsls	r1, r2, #5
 8004c4a:	69fa      	ldr	r2, [r7, #28]
 8004c4c:	440a      	add	r2, r1
 8004c4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c52:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004c56:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004c5a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d132      	bne.n	8004cc8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	689a      	ldr	r2, [r3, #8]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c86:	691a      	ldr	r2, [r3, #16]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c90:	69b9      	ldr	r1, [r7, #24]
 8004c92:	0148      	lsls	r0, r1, #5
 8004c94:	69f9      	ldr	r1, [r7, #28]
 8004c96:	4401      	add	r1, r0
 8004c98:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	0151      	lsls	r1, r2, #5
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	440a      	add	r2, r1
 8004cb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004cbe:	6113      	str	r3, [r2, #16]
 8004cc0:	e062      	b.n	8004d88 <USB_EPStartXfer+0x490>
 8004cc2:	bf00      	nop
 8004cc4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d123      	bne.n	8004d18 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cdc:	691a      	ldr	r2, [r3, #16]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ce6:	69b9      	ldr	r1, [r7, #24]
 8004ce8:	0148      	lsls	r0, r1, #5
 8004cea:	69f9      	ldr	r1, [r7, #28]
 8004cec:	4401      	add	r1, r0
 8004cee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	0151      	lsls	r1, r2, #5
 8004d08:	69fa      	ldr	r2, [r7, #28]
 8004d0a:	440a      	add	r2, r1
 8004d0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d14:	6113      	str	r3, [r2, #16]
 8004d16:	e037      	b.n	8004d88 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	4413      	add	r3, r2
 8004d22:	1e5a      	subs	r2, r3, #1
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	8afa      	ldrh	r2, [r7, #22]
 8004d34:	fb03 f202 	mul.w	r2, r3, r2
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d48:	691a      	ldr	r2, [r3, #16]
 8004d4a:	8afb      	ldrh	r3, [r7, #22]
 8004d4c:	04d9      	lsls	r1, r3, #19
 8004d4e:	4b38      	ldr	r3, [pc, #224]	@ (8004e30 <USB_EPStartXfer+0x538>)
 8004d50:	400b      	ands	r3, r1
 8004d52:	69b9      	ldr	r1, [r7, #24]
 8004d54:	0148      	lsls	r0, r1, #5
 8004d56:	69f9      	ldr	r1, [r7, #28]
 8004d58:	4401      	add	r1, r0
 8004d5a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d78:	69b9      	ldr	r1, [r7, #24]
 8004d7a:	0148      	lsls	r0, r1, #5
 8004d7c:	69f9      	ldr	r1, [r7, #28]
 8004d7e:	4401      	add	r1, r0
 8004d80:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004d84:	4313      	orrs	r3, r2
 8004d86:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d10d      	bne.n	8004daa <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d009      	beq.n	8004daa <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	68d9      	ldr	r1, [r3, #12]
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004da6:	460a      	mov	r2, r1
 8004da8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	791b      	ldrb	r3, [r3, #4]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d128      	bne.n	8004e04 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d110      	bne.n	8004de4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	0151      	lsls	r1, r2, #5
 8004dd4:	69fa      	ldr	r2, [r7, #28]
 8004dd6:	440a      	add	r2, r1
 8004dd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ddc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	e00f      	b.n	8004e04 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	0151      	lsls	r1, r2, #5
 8004df6:	69fa      	ldr	r2, [r7, #28]
 8004df8:	440a      	add	r2, r1
 8004dfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	0151      	lsls	r1, r2, #5
 8004e16:	69fa      	ldr	r2, [r7, #28]
 8004e18:	440a      	add	r2, r1
 8004e1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e1e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004e22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	1ff80000 	.word	0x1ff80000

08004e34 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	785b      	ldrb	r3, [r3, #1]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d14a      	bne.n	8004ee8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e6a:	f040 8086 	bne.w	8004f7a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	7812      	ldrb	r2, [r2, #0]
 8004e82:	0151      	lsls	r1, r2, #5
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	440a      	add	r2, r1
 8004e88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e8c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e90:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	7812      	ldrb	r2, [r2, #0]
 8004ea6:	0151      	lsls	r1, r2, #5
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	440a      	add	r2, r1
 8004eac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004eb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004eb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d902      	bls.n	8004ecc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	75fb      	strb	r3, [r7, #23]
          break;
 8004eca:	e056      	b.n	8004f7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ee4:	d0e7      	beq.n	8004eb6 <USB_EPStopXfer+0x82>
 8004ee6:	e048      	b.n	8004f7a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004efc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f00:	d13b      	bne.n	8004f7a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	7812      	ldrb	r2, [r2, #0]
 8004f16:	0151      	lsls	r1, r2, #5
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	440a      	add	r2, r1
 8004f1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f20:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f24:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	7812      	ldrb	r2, [r2, #0]
 8004f3a:	0151      	lsls	r1, r2, #5
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	440a      	add	r2, r1
 8004f40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d902      	bls.n	8004f60 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	75fb      	strb	r3, [r7, #23]
          break;
 8004f5e:	e00c      	b.n	8004f7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f78:	d0e7      	beq.n	8004f4a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	371c      	adds	r7, #28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b089      	sub	sp, #36	@ 0x24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	4611      	mov	r1, r2
 8004f94:	461a      	mov	r2, r3
 8004f96:	460b      	mov	r3, r1
 8004f98:	71fb      	strb	r3, [r7, #7]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004fa6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d123      	bne.n	8004ff6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004fae:	88bb      	ldrh	r3, [r7, #4]
 8004fb0:	3303      	adds	r3, #3
 8004fb2:	089b      	lsrs	r3, r3, #2
 8004fb4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61bb      	str	r3, [r7, #24]
 8004fba:	e018      	b.n	8004fee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004fbc:	79fb      	ldrb	r3, [r7, #7]
 8004fbe:	031a      	lsls	r2, r3, #12
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fc8:	461a      	mov	r2, r3
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	3301      	adds	r3, #1
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d3e2      	bcc.n	8004fbc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3724      	adds	r7, #36	@ 0x24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005004:	b480      	push	{r7}
 8005006:	b08b      	sub	sp, #44	@ 0x2c
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800501a:	88fb      	ldrh	r3, [r7, #6]
 800501c:	089b      	lsrs	r3, r3, #2
 800501e:	b29b      	uxth	r3, r3
 8005020:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005022:	88fb      	ldrh	r3, [r7, #6]
 8005024:	f003 0303 	and.w	r3, r3, #3
 8005028:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800502a:	2300      	movs	r3, #0
 800502c:	623b      	str	r3, [r7, #32]
 800502e:	e014      	b.n	800505a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503a:	601a      	str	r2, [r3, #0]
    pDest++;
 800503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503e:	3301      	adds	r3, #1
 8005040:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005044:	3301      	adds	r3, #1
 8005046:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504a:	3301      	adds	r3, #1
 800504c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800504e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005050:	3301      	adds	r3, #1
 8005052:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	3301      	adds	r3, #1
 8005058:	623b      	str	r3, [r7, #32]
 800505a:	6a3a      	ldr	r2, [r7, #32]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	429a      	cmp	r2, r3
 8005060:	d3e6      	bcc.n	8005030 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005062:	8bfb      	ldrh	r3, [r7, #30]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01e      	beq.n	80050a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005072:	461a      	mov	r2, r3
 8005074:	f107 0310 	add.w	r3, r7, #16
 8005078:	6812      	ldr	r2, [r2, #0]
 800507a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	b2db      	uxtb	r3, r3
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	fa22 f303 	lsr.w	r3, r2, r3
 8005088:	b2da      	uxtb	r2, r3
 800508a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508c:	701a      	strb	r2, [r3, #0]
      i++;
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	3301      	adds	r3, #1
 8005092:	623b      	str	r3, [r7, #32]
      pDest++;
 8005094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005096:	3301      	adds	r3, #1
 8005098:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800509a:	8bfb      	ldrh	r3, [r7, #30]
 800509c:	3b01      	subs	r3, #1
 800509e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80050a0:	8bfb      	ldrh	r3, [r7, #30]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1ea      	bne.n	800507c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	372c      	adds	r7, #44	@ 0x2c
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	785b      	ldrb	r3, [r3, #1]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d12c      	bne.n	800512a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	db12      	blt.n	8005108 <USB_EPSetStall+0x54>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00f      	beq.n	8005108 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	0151      	lsls	r1, r2, #5
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	440a      	add	r2, r1
 80050fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005102:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005106:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	0151      	lsls	r1, r2, #5
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	440a      	add	r2, r1
 800511e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005122:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	e02b      	b.n	8005182 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	db12      	blt.n	8005162 <USB_EPSetStall+0xae>
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00f      	beq.n	8005162 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	0151      	lsls	r1, r2, #5
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	440a      	add	r2, r1
 8005158:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800515c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005160:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	0151      	lsls	r1, r2, #5
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	440a      	add	r2, r1
 8005178:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800517c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005180:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	785b      	ldrb	r3, [r3, #1]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d128      	bne.n	80051fe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	0151      	lsls	r1, r2, #5
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	440a      	add	r2, r1
 80051c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80051ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	791b      	ldrb	r3, [r3, #4]
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	d003      	beq.n	80051dc <USB_EPClearStall+0x4c>
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	791b      	ldrb	r3, [r3, #4]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d138      	bne.n	800524e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	0151      	lsls	r1, r2, #5
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	440a      	add	r2, r1
 80051f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	e027      	b.n	800524e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	0151      	lsls	r1, r2, #5
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	440a      	add	r2, r1
 8005214:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005218:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800521c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	791b      	ldrb	r3, [r3, #4]
 8005222:	2b03      	cmp	r3, #3
 8005224:	d003      	beq.n	800522e <USB_EPClearStall+0x9e>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	791b      	ldrb	r3, [r3, #4]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d10f      	bne.n	800524e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	0151      	lsls	r1, r2, #5
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	440a      	add	r2, r1
 8005244:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800524c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	460b      	mov	r3, r1
 8005266:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800527a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800527e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005290:	68f9      	ldr	r1, [r7, #12]
 8005292:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005296:	4313      	orrs	r3, r2
 8005298:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80052c2:	f023 0303 	bic.w	r3, r3, #3
 80052c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052d6:	f023 0302 	bic.w	r3, r3, #2
 80052da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b085      	sub	sp, #20
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005304:	f023 0303 	bic.w	r3, r3, #3
 8005308:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005318:	f043 0302 	orr.w	r3, r3, #2
 800531c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4013      	ands	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005344:	68fb      	ldr	r3, [r7, #12]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005352:	b480      	push	{r7}
 8005354:	b085      	sub	sp, #20
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	4013      	ands	r3, r2
 8005374:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	0c1b      	lsrs	r3, r3, #16
}
 800537a:	4618      	mov	r0, r3
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005386:	b480      	push	{r7}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	4013      	ands	r3, r2
 80053a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	b29b      	uxth	r3, r3
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b085      	sub	sp, #20
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	460b      	mov	r3, r1
 80053c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80053ca:	78fb      	ldrb	r3, [r7, #3]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	4013      	ands	r3, r2
 80053e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80053e8:	68bb      	ldr	r3, [r7, #8]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b087      	sub	sp, #28
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	460b      	mov	r3, r1
 8005400:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005418:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	fa22 f303 	lsr.w	r3, r2, r3
 8005426:	01db      	lsls	r3, r3, #7
 8005428:	b2db      	uxtb	r3, r3
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005430:	78fb      	ldrb	r3, [r7, #3]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4013      	ands	r3, r2
 8005442:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005444:	68bb      	ldr	r3, [r7, #8]
}
 8005446:	4618      	mov	r0, r3
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	f003 0301 	and.w	r3, r3, #1
}
 8005462:	4618      	mov	r0, r3
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800546e:	b480      	push	{r7}
 8005470:	b085      	sub	sp, #20
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005488:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800548c:	f023 0307 	bic.w	r3, r3, #7
 8005490:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	460b      	mov	r3, r1
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	333c      	adds	r3, #60	@ 0x3c
 80054ca:	3304      	adds	r3, #4
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	4a26      	ldr	r2, [pc, #152]	@ (800556c <USB_EP0_OutStart+0xb8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d90a      	bls.n	80054ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054e8:	d101      	bne.n	80054ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	e037      	b.n	800555e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054f4:	461a      	mov	r2, r3
 80054f6:	2300      	movs	r3, #0
 80054f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005508:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800550c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800551c:	f043 0318 	orr.w	r3, r3, #24
 8005520:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005530:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005534:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005536:	7afb      	ldrb	r3, [r7, #11]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d10f      	bne.n	800555c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005542:	461a      	mov	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005556:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800555a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	4f54300a 	.word	0x4f54300a

08005570 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3301      	adds	r3, #1
 8005580:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005588:	d901      	bls.n	800558e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e01b      	b.n	80055c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	daf2      	bge.n	800557c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f043 0201 	orr.w	r2, r3, #1
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3301      	adds	r3, #1
 80055aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055b2:	d901      	bls.n	80055b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e006      	b.n	80055c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d0f0      	beq.n	80055a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
	...

080055d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80055e0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80055e4:	f002 fc9e 	bl	8007f24 <USBD_static_malloc>
 80055e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d109      	bne.n	8005604 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	32b0      	adds	r2, #176	@ 0xb0
 80055fa:	2100      	movs	r1, #0
 80055fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005600:	2302      	movs	r3, #2
 8005602:	e0d4      	b.n	80057ae <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005604:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005608:	2100      	movs	r1, #0
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f002 fcee 	bl	8007fec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	32b0      	adds	r2, #176	@ 0xb0
 800561a:	68f9      	ldr	r1, [r7, #12]
 800561c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	32b0      	adds	r2, #176	@ 0xb0
 800562a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	7c1b      	ldrb	r3, [r3, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d138      	bne.n	80056ae <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800563c:	4b5e      	ldr	r3, [pc, #376]	@ (80057b8 <USBD_CDC_Init+0x1e4>)
 800563e:	7819      	ldrb	r1, [r3, #0]
 8005640:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005644:	2202      	movs	r2, #2
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f002 fb49 	bl	8007cde <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800564c:	4b5a      	ldr	r3, [pc, #360]	@ (80057b8 <USBD_CDC_Init+0x1e4>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	f003 020f 	and.w	r2, r3, #15
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	4613      	mov	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4413      	add	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	440b      	add	r3, r1
 8005660:	3324      	adds	r3, #36	@ 0x24
 8005662:	2201      	movs	r2, #1
 8005664:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005666:	4b55      	ldr	r3, [pc, #340]	@ (80057bc <USBD_CDC_Init+0x1e8>)
 8005668:	7819      	ldrb	r1, [r3, #0]
 800566a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800566e:	2202      	movs	r2, #2
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f002 fb34 	bl	8007cde <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005676:	4b51      	ldr	r3, [pc, #324]	@ (80057bc <USBD_CDC_Init+0x1e8>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	f003 020f 	and.w	r2, r3, #15
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	4613      	mov	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800568e:	2201      	movs	r2, #1
 8005690:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005692:	4b4b      	ldr	r3, [pc, #300]	@ (80057c0 <USBD_CDC_Init+0x1ec>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	f003 020f 	and.w	r2, r3, #15
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	440b      	add	r3, r1
 80056a6:	3326      	adds	r3, #38	@ 0x26
 80056a8:	2210      	movs	r2, #16
 80056aa:	801a      	strh	r2, [r3, #0]
 80056ac:	e035      	b.n	800571a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80056ae:	4b42      	ldr	r3, [pc, #264]	@ (80057b8 <USBD_CDC_Init+0x1e4>)
 80056b0:	7819      	ldrb	r1, [r3, #0]
 80056b2:	2340      	movs	r3, #64	@ 0x40
 80056b4:	2202      	movs	r2, #2
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f002 fb11 	bl	8007cde <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80056bc:	4b3e      	ldr	r3, [pc, #248]	@ (80057b8 <USBD_CDC_Init+0x1e4>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	f003 020f 	and.w	r2, r3, #15
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	4613      	mov	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	440b      	add	r3, r1
 80056d0:	3324      	adds	r3, #36	@ 0x24
 80056d2:	2201      	movs	r2, #1
 80056d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80056d6:	4b39      	ldr	r3, [pc, #228]	@ (80057bc <USBD_CDC_Init+0x1e8>)
 80056d8:	7819      	ldrb	r1, [r3, #0]
 80056da:	2340      	movs	r3, #64	@ 0x40
 80056dc:	2202      	movs	r2, #2
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f002 fafd 	bl	8007cde <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80056e4:	4b35      	ldr	r3, [pc, #212]	@ (80057bc <USBD_CDC_Init+0x1e8>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	f003 020f 	and.w	r2, r3, #15
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	4613      	mov	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	440b      	add	r3, r1
 80056f8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80056fc:	2201      	movs	r2, #1
 80056fe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005700:	4b2f      	ldr	r3, [pc, #188]	@ (80057c0 <USBD_CDC_Init+0x1ec>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	f003 020f 	and.w	r2, r3, #15
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	4613      	mov	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	440b      	add	r3, r1
 8005714:	3326      	adds	r3, #38	@ 0x26
 8005716:	2210      	movs	r2, #16
 8005718:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800571a:	4b29      	ldr	r3, [pc, #164]	@ (80057c0 <USBD_CDC_Init+0x1ec>)
 800571c:	7819      	ldrb	r1, [r3, #0]
 800571e:	2308      	movs	r3, #8
 8005720:	2203      	movs	r2, #3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f002 fadb 	bl	8007cde <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005728:	4b25      	ldr	r3, [pc, #148]	@ (80057c0 <USBD_CDC_Init+0x1ec>)
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	f003 020f 	and.w	r2, r3, #15
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	4613      	mov	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	440b      	add	r3, r1
 800573c:	3324      	adds	r3, #36	@ 0x24
 800573e:	2201      	movs	r2, #1
 8005740:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	33b0      	adds	r3, #176	@ 0xb0
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005778:	2302      	movs	r3, #2
 800577a:	e018      	b.n	80057ae <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	7c1b      	ldrb	r3, [r3, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10a      	bne.n	800579a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005784:	4b0d      	ldr	r3, [pc, #52]	@ (80057bc <USBD_CDC_Init+0x1e8>)
 8005786:	7819      	ldrb	r1, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800578e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f002 fb92 	bl	8007ebc <USBD_LL_PrepareReceive>
 8005798:	e008      	b.n	80057ac <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800579a:	4b08      	ldr	r3, [pc, #32]	@ (80057bc <USBD_CDC_Init+0x1e8>)
 800579c:	7819      	ldrb	r1, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80057a4:	2340      	movs	r3, #64	@ 0x40
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f002 fb88 	bl	8007ebc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20000093 	.word	0x20000093
 80057bc:	20000094 	.word	0x20000094
 80057c0:	20000095 	.word	0x20000095

080057c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	460b      	mov	r3, r1
 80057ce:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80057d0:	4b3a      	ldr	r3, [pc, #232]	@ (80058bc <USBD_CDC_DeInit+0xf8>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	4619      	mov	r1, r3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f002 faa7 	bl	8007d2a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80057dc:	4b37      	ldr	r3, [pc, #220]	@ (80058bc <USBD_CDC_DeInit+0xf8>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	f003 020f 	and.w	r2, r3, #15
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	4613      	mov	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	440b      	add	r3, r1
 80057f0:	3324      	adds	r3, #36	@ 0x24
 80057f2:	2200      	movs	r2, #0
 80057f4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80057f6:	4b32      	ldr	r3, [pc, #200]	@ (80058c0 <USBD_CDC_DeInit+0xfc>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	4619      	mov	r1, r3
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f002 fa94 	bl	8007d2a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005802:	4b2f      	ldr	r3, [pc, #188]	@ (80058c0 <USBD_CDC_DeInit+0xfc>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	f003 020f 	and.w	r2, r3, #15
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	4613      	mov	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800581a:	2200      	movs	r2, #0
 800581c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800581e:	4b29      	ldr	r3, [pc, #164]	@ (80058c4 <USBD_CDC_DeInit+0x100>)
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	4619      	mov	r1, r3
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f002 fa80 	bl	8007d2a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800582a:	4b26      	ldr	r3, [pc, #152]	@ (80058c4 <USBD_CDC_DeInit+0x100>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	f003 020f 	and.w	r2, r3, #15
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	440b      	add	r3, r1
 800583e:	3324      	adds	r3, #36	@ 0x24
 8005840:	2200      	movs	r2, #0
 8005842:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005844:	4b1f      	ldr	r3, [pc, #124]	@ (80058c4 <USBD_CDC_DeInit+0x100>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	f003 020f 	and.w	r2, r3, #15
 800584c:	6879      	ldr	r1, [r7, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	440b      	add	r3, r1
 8005858:	3326      	adds	r3, #38	@ 0x26
 800585a:	2200      	movs	r2, #0
 800585c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	32b0      	adds	r2, #176	@ 0xb0
 8005868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01f      	beq.n	80058b0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	33b0      	adds	r3, #176	@ 0xb0
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	32b0      	adds	r2, #176	@ 0xb0
 800588e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005892:	4618      	mov	r0, r3
 8005894:	f002 fb54 	bl	8007f40 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	32b0      	adds	r2, #176	@ 0xb0
 80058a2:	2100      	movs	r1, #0
 80058a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3708      	adds	r7, #8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20000093 	.word	0x20000093
 80058c0:	20000094 	.word	0x20000094
 80058c4:	20000095 	.word	0x20000095

080058c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	32b0      	adds	r2, #176	@ 0xb0
 80058dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e0bf      	b.n	8005a78 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005900:	2b00      	cmp	r3, #0
 8005902:	d050      	beq.n	80059a6 <USBD_CDC_Setup+0xde>
 8005904:	2b20      	cmp	r3, #32
 8005906:	f040 80af 	bne.w	8005a68 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	88db      	ldrh	r3, [r3, #6]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d03a      	beq.n	8005988 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	b25b      	sxtb	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	da1b      	bge.n	8005954 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	33b0      	adds	r3, #176	@ 0xb0
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005932:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	88d2      	ldrh	r2, [r2, #6]
 8005938:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	88db      	ldrh	r3, [r3, #6]
 800593e:	2b07      	cmp	r3, #7
 8005940:	bf28      	it	cs
 8005942:	2307      	movcs	r3, #7
 8005944:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	89fa      	ldrh	r2, [r7, #14]
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f001 fd93 	bl	8007478 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005952:	e090      	b.n	8005a76 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	785a      	ldrb	r2, [r3, #1]
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	88db      	ldrh	r3, [r3, #6]
 8005962:	2b3f      	cmp	r3, #63	@ 0x3f
 8005964:	d803      	bhi.n	800596e <USBD_CDC_Setup+0xa6>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	88db      	ldrh	r3, [r3, #6]
 800596a:	b2da      	uxtb	r2, r3
 800596c:	e000      	b.n	8005970 <USBD_CDC_Setup+0xa8>
 800596e:	2240      	movs	r2, #64	@ 0x40
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005976:	6939      	ldr	r1, [r7, #16]
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800597e:	461a      	mov	r2, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f001 fda5 	bl	80074d0 <USBD_CtlPrepareRx>
      break;
 8005986:	e076      	b.n	8005a76 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	33b0      	adds	r3, #176	@ 0xb0
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	7850      	ldrb	r0, [r2, #1]
 800599e:	2200      	movs	r2, #0
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	4798      	blx	r3
      break;
 80059a4:	e067      	b.n	8005a76 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	2b0b      	cmp	r3, #11
 80059ac:	d851      	bhi.n	8005a52 <USBD_CDC_Setup+0x18a>
 80059ae:	a201      	add	r2, pc, #4	@ (adr r2, 80059b4 <USBD_CDC_Setup+0xec>)
 80059b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b4:	080059e5 	.word	0x080059e5
 80059b8:	08005a61 	.word	0x08005a61
 80059bc:	08005a53 	.word	0x08005a53
 80059c0:	08005a53 	.word	0x08005a53
 80059c4:	08005a53 	.word	0x08005a53
 80059c8:	08005a53 	.word	0x08005a53
 80059cc:	08005a53 	.word	0x08005a53
 80059d0:	08005a53 	.word	0x08005a53
 80059d4:	08005a53 	.word	0x08005a53
 80059d8:	08005a53 	.word	0x08005a53
 80059dc:	08005a0f 	.word	0x08005a0f
 80059e0:	08005a39 	.word	0x08005a39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b03      	cmp	r3, #3
 80059ee:	d107      	bne.n	8005a00 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80059f0:	f107 030a 	add.w	r3, r7, #10
 80059f4:	2202      	movs	r2, #2
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f001 fd3d 	bl	8007478 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059fe:	e032      	b.n	8005a66 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005a00:	6839      	ldr	r1, [r7, #0]
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f001 fcbb 	bl	800737e <USBD_CtlError>
            ret = USBD_FAIL;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	75fb      	strb	r3, [r7, #23]
          break;
 8005a0c:	e02b      	b.n	8005a66 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d107      	bne.n	8005a2a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005a1a:	f107 030d 	add.w	r3, r7, #13
 8005a1e:	2201      	movs	r2, #1
 8005a20:	4619      	mov	r1, r3
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f001 fd28 	bl	8007478 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a28:	e01d      	b.n	8005a66 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005a2a:	6839      	ldr	r1, [r7, #0]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f001 fca6 	bl	800737e <USBD_CtlError>
            ret = USBD_FAIL;
 8005a32:	2303      	movs	r3, #3
 8005a34:	75fb      	strb	r3, [r7, #23]
          break;
 8005a36:	e016      	b.n	8005a66 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d00f      	beq.n	8005a64 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005a44:	6839      	ldr	r1, [r7, #0]
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f001 fc99 	bl	800737e <USBD_CtlError>
            ret = USBD_FAIL;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005a50:	e008      	b.n	8005a64 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005a52:	6839      	ldr	r1, [r7, #0]
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f001 fc92 	bl	800737e <USBD_CtlError>
          ret = USBD_FAIL;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	75fb      	strb	r3, [r7, #23]
          break;
 8005a5e:	e002      	b.n	8005a66 <USBD_CDC_Setup+0x19e>
          break;
 8005a60:	bf00      	nop
 8005a62:	e008      	b.n	8005a76 <USBD_CDC_Setup+0x1ae>
          break;
 8005a64:	bf00      	nop
      }
      break;
 8005a66:	e006      	b.n	8005a76 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005a68:	6839      	ldr	r1, [r7, #0]
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f001 fc87 	bl	800737e <USBD_CtlError>
      ret = USBD_FAIL;
 8005a70:	2303      	movs	r3, #3
 8005a72:	75fb      	strb	r3, [r7, #23]
      break;
 8005a74:	bf00      	nop
  }

  return (uint8_t)ret;
 8005a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3718      	adds	r7, #24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005a92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	32b0      	adds	r2, #176	@ 0xb0
 8005a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e065      	b.n	8005b76 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	32b0      	adds	r2, #176	@ 0xb0
 8005ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005aba:	78fb      	ldrb	r3, [r7, #3]
 8005abc:	f003 020f 	and.w	r2, r3, #15
 8005ac0:	6879      	ldr	r1, [r7, #4]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	440b      	add	r3, r1
 8005acc:	3318      	adds	r3, #24
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d02f      	beq.n	8005b34 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005ad4:	78fb      	ldrb	r3, [r7, #3]
 8005ad6:	f003 020f 	and.w	r2, r3, #15
 8005ada:	6879      	ldr	r1, [r7, #4]
 8005adc:	4613      	mov	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	3318      	adds	r3, #24
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	78fb      	ldrb	r3, [r7, #3]
 8005aec:	f003 010f 	and.w	r1, r3, #15
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	460b      	mov	r3, r1
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	440b      	add	r3, r1
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4403      	add	r3, r0
 8005afc:	331c      	adds	r3, #28
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	fbb2 f1f3 	udiv	r1, r2, r3
 8005b04:	fb01 f303 	mul.w	r3, r1, r3
 8005b08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d112      	bne.n	8005b34 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005b0e:	78fb      	ldrb	r3, [r7, #3]
 8005b10:	f003 020f 	and.w	r2, r3, #15
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	440b      	add	r3, r1
 8005b20:	3318      	adds	r3, #24
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005b26:	78f9      	ldrb	r1, [r7, #3]
 8005b28:	2300      	movs	r3, #0
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f002 f9a4 	bl	8007e7a <USBD_LL_Transmit>
 8005b32:	e01f      	b.n	8005b74 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	33b0      	adds	r3, #176	@ 0xb0
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d010      	beq.n	8005b74 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	33b0      	adds	r3, #176	@ 0xb0
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005b70:	78fa      	ldrb	r2, [r7, #3]
 8005b72:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b084      	sub	sp, #16
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	460b      	mov	r3, r1
 8005b88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	32b0      	adds	r2, #176	@ 0xb0
 8005b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b98:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	32b0      	adds	r2, #176	@ 0xb0
 8005ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e01a      	b.n	8005be6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f002 f9a2 	bl	8007efe <USBD_LL_GetRxDataSize>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	33b0      	adds	r3, #176	@ 0xb0
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005be0:	4611      	mov	r1, r2
 8005be2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	32b0      	adds	r2, #176	@ 0xb0
 8005c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e024      	b.n	8005c5a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	33b0      	adds	r3, #176	@ 0xb0
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d019      	beq.n	8005c58 <USBD_CDC_EP0_RxReady+0x6a>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005c2a:	2bff      	cmp	r3, #255	@ 0xff
 8005c2c:	d014      	beq.n	8005c58 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	33b0      	adds	r3, #176	@ 0xb0
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005c46:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005c4e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	22ff      	movs	r2, #255	@ 0xff
 8005c54:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
	...

08005c64 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c6c:	2182      	movs	r1, #130	@ 0x82
 8005c6e:	4818      	ldr	r0, [pc, #96]	@ (8005cd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005c70:	f000 fd4f 	bl	8006712 <USBD_GetEpDesc>
 8005c74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c76:	2101      	movs	r1, #1
 8005c78:	4815      	ldr	r0, [pc, #84]	@ (8005cd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005c7a:	f000 fd4a 	bl	8006712 <USBD_GetEpDesc>
 8005c7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c80:	2181      	movs	r1, #129	@ 0x81
 8005c82:	4813      	ldr	r0, [pc, #76]	@ (8005cd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005c84:	f000 fd45 	bl	8006712 <USBD_GetEpDesc>
 8005c88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2210      	movs	r2, #16
 8005c94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d006      	beq.n	8005caa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ca4:	711a      	strb	r2, [r3, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d006      	beq.n	8005cbe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cb8:	711a      	strb	r2, [r3, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2243      	movs	r2, #67	@ 0x43
 8005cc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005cc4:	4b02      	ldr	r3, [pc, #8]	@ (8005cd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20000050 	.word	0x20000050

08005cd4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005cdc:	2182      	movs	r1, #130	@ 0x82
 8005cde:	4818      	ldr	r0, [pc, #96]	@ (8005d40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ce0:	f000 fd17 	bl	8006712 <USBD_GetEpDesc>
 8005ce4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	4815      	ldr	r0, [pc, #84]	@ (8005d40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005cea:	f000 fd12 	bl	8006712 <USBD_GetEpDesc>
 8005cee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005cf0:	2181      	movs	r1, #129	@ 0x81
 8005cf2:	4813      	ldr	r0, [pc, #76]	@ (8005d40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005cf4:	f000 fd0d 	bl	8006712 <USBD_GetEpDesc>
 8005cf8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2210      	movs	r2, #16
 8005d04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d006      	beq.n	8005d1a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	711a      	strb	r2, [r3, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f042 0202 	orr.w	r2, r2, #2
 8005d18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d006      	beq.n	8005d2e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	711a      	strb	r2, [r3, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f042 0202 	orr.w	r2, r2, #2
 8005d2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2243      	movs	r2, #67	@ 0x43
 8005d32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005d34:	4b02      	ldr	r3, [pc, #8]	@ (8005d40 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000050 	.word	0x20000050

08005d44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d4c:	2182      	movs	r1, #130	@ 0x82
 8005d4e:	4818      	ldr	r0, [pc, #96]	@ (8005db0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005d50:	f000 fcdf 	bl	8006712 <USBD_GetEpDesc>
 8005d54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d56:	2101      	movs	r1, #1
 8005d58:	4815      	ldr	r0, [pc, #84]	@ (8005db0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005d5a:	f000 fcda 	bl	8006712 <USBD_GetEpDesc>
 8005d5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d60:	2181      	movs	r1, #129	@ 0x81
 8005d62:	4813      	ldr	r0, [pc, #76]	@ (8005db0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005d64:	f000 fcd5 	bl	8006712 <USBD_GetEpDesc>
 8005d68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	2210      	movs	r2, #16
 8005d74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d006      	beq.n	8005d8a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d84:	711a      	strb	r2, [r3, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d006      	beq.n	8005d9e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d98:	711a      	strb	r2, [r3, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2243      	movs	r2, #67	@ 0x43
 8005da2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005da4:	4b02      	ldr	r3, [pc, #8]	@ (8005db0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	20000050 	.word	0x20000050

08005db4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	220a      	movs	r2, #10
 8005dc0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005dc2:	4b03      	ldr	r3, [pc, #12]	@ (8005dd0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	2000000c 	.word	0x2000000c

08005dd4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e009      	b.n	8005dfc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	33b0      	adds	r3, #176	@ 0xb0
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	32b0      	adds	r2, #176	@ 0xb0
 8005e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e22:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e008      	b.n	8005e40 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	371c      	adds	r7, #28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	32b0      	adds	r2, #176	@ 0xb0
 8005e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e64:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e004      	b.n	8005e7a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
	...

08005e88 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	32b0      	adds	r2, #176	@ 0xb0
 8005e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e025      	b.n	8005efa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d11f      	bne.n	8005ef8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005ec0:	4b10      	ldr	r3, [pc, #64]	@ (8005f04 <USBD_CDC_TransmitPacket+0x7c>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	f003 020f 	and.w	r2, r3, #15
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4403      	add	r3, r0
 8005eda:	3318      	adds	r3, #24
 8005edc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005ede:	4b09      	ldr	r3, [pc, #36]	@ (8005f04 <USBD_CDC_TransmitPacket+0x7c>)
 8005ee0:	7819      	ldrb	r1, [r3, #0]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f001 ffc3 	bl	8007e7a <USBD_LL_Transmit>

    ret = USBD_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20000093 	.word	0x20000093

08005f08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	32b0      	adds	r2, #176	@ 0xb0
 8005f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	32b0      	adds	r2, #176	@ 0xb0
 8005f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e018      	b.n	8005f68 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	7c1b      	ldrb	r3, [r3, #16]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10a      	bne.n	8005f54 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8005f70 <USBD_CDC_ReceivePacket+0x68>)
 8005f40:	7819      	ldrb	r1, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f001 ffb5 	bl	8007ebc <USBD_LL_PrepareReceive>
 8005f52:	e008      	b.n	8005f66 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f54:	4b06      	ldr	r3, [pc, #24]	@ (8005f70 <USBD_CDC_ReceivePacket+0x68>)
 8005f56:	7819      	ldrb	r1, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f5e:	2340      	movs	r3, #64	@ 0x40
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f001 ffab 	bl	8007ebc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	20000094 	.word	0x20000094

08005f74 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e01f      	b.n	8005fcc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	79fa      	ldrb	r2, [r7, #7]
 8005fbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f001 fe25 	bl	8007c10 <USBD_LL_Init>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e025      	b.n	8006038 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	32ae      	adds	r2, #174	@ 0xae
 8005ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00f      	beq.n	8006028 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	32ae      	adds	r2, #174	@ 0xae
 8006012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006018:	f107 020e 	add.w	r2, r7, #14
 800601c:	4610      	mov	r0, r2
 800601e:	4798      	blx	r3
 8006020:	4602      	mov	r2, r0
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 fe2d 	bl	8007ca8 <USBD_LL_Start>
 800604e:	4603      	mov	r3, r0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006060:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006062:	4618      	mov	r0, r3
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b084      	sub	sp, #16
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	460b      	mov	r3, r1
 8006078:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800607a:	2300      	movs	r3, #0
 800607c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006084:	2b00      	cmp	r3, #0
 8006086:	d009      	beq.n	800609c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	78fa      	ldrb	r2, [r7, #3]
 8006092:	4611      	mov	r1, r2
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	4798      	blx	r3
 8006098:	4603      	mov	r3, r0
 800609a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800609c:	7bfb      	ldrb	r3, [r7, #15]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b084      	sub	sp, #16
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	460b      	mov	r3, r1
 80060b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	78fa      	ldrb	r2, [r7, #3]
 80060c0:	4611      	mov	r1, r2
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	4798      	blx	r3
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80060cc:	2303      	movs	r3, #3
 80060ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b084      	sub	sp, #16
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
 80060e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80060ea:	6839      	ldr	r1, [r7, #0]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f001 f90c 	bl	800730a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006100:	461a      	mov	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800610e:	f003 031f 	and.w	r3, r3, #31
 8006112:	2b02      	cmp	r3, #2
 8006114:	d01a      	beq.n	800614c <USBD_LL_SetupStage+0x72>
 8006116:	2b02      	cmp	r3, #2
 8006118:	d822      	bhi.n	8006160 <USBD_LL_SetupStage+0x86>
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <USBD_LL_SetupStage+0x4a>
 800611e:	2b01      	cmp	r3, #1
 8006120:	d00a      	beq.n	8006138 <USBD_LL_SetupStage+0x5e>
 8006122:	e01d      	b.n	8006160 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fb63 	bl	80067f8 <USBD_StdDevReq>
 8006132:	4603      	mov	r3, r0
 8006134:	73fb      	strb	r3, [r7, #15]
      break;
 8006136:	e020      	b.n	800617a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800613e:	4619      	mov	r1, r3
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fbcb 	bl	80068dc <USBD_StdItfReq>
 8006146:	4603      	mov	r3, r0
 8006148:	73fb      	strb	r3, [r7, #15]
      break;
 800614a:	e016      	b.n	800617a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006152:	4619      	mov	r1, r3
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fc2d 	bl	80069b4 <USBD_StdEPReq>
 800615a:	4603      	mov	r3, r0
 800615c:	73fb      	strb	r3, [r7, #15]
      break;
 800615e:	e00c      	b.n	800617a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006166:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800616a:	b2db      	uxtb	r3, r3
 800616c:	4619      	mov	r1, r3
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f001 fdfa 	bl	8007d68 <USBD_LL_StallEP>
 8006174:	4603      	mov	r3, r0
 8006176:	73fb      	strb	r3, [r7, #15]
      break;
 8006178:	bf00      	nop
  }

  return ret;
 800617a:	7bfb      	ldrb	r3, [r7, #15]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	460b      	mov	r3, r1
 800618e:	607a      	str	r2, [r7, #4]
 8006190:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006196:	7afb      	ldrb	r3, [r7, #11]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d16e      	bne.n	800627a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80061a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	f040 8098 	bne.w	80062e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d913      	bls.n	80061e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	689a      	ldr	r2, [r3, #8]
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	1ad2      	subs	r2, r2, r3
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	68da      	ldr	r2, [r3, #12]
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	4293      	cmp	r3, r2
 80061d4:	bf28      	it	cs
 80061d6:	4613      	movcs	r3, r2
 80061d8:	461a      	mov	r2, r3
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f001 f994 	bl	800750a <USBD_CtlContinueRx>
 80061e2:	e07d      	b.n	80062e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80061ea:	f003 031f 	and.w	r3, r3, #31
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d014      	beq.n	800621c <USBD_LL_DataOutStage+0x98>
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d81d      	bhi.n	8006232 <USBD_LL_DataOutStage+0xae>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <USBD_LL_DataOutStage+0x7c>
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d003      	beq.n	8006206 <USBD_LL_DataOutStage+0x82>
 80061fe:	e018      	b.n	8006232 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006200:	2300      	movs	r3, #0
 8006202:	75bb      	strb	r3, [r7, #22]
            break;
 8006204:	e018      	b.n	8006238 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800620c:	b2db      	uxtb	r3, r3
 800620e:	4619      	mov	r1, r3
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 fa64 	bl	80066de <USBD_CoreFindIF>
 8006216:	4603      	mov	r3, r0
 8006218:	75bb      	strb	r3, [r7, #22]
            break;
 800621a:	e00d      	b.n	8006238 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006222:	b2db      	uxtb	r3, r3
 8006224:	4619      	mov	r1, r3
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 fa66 	bl	80066f8 <USBD_CoreFindEP>
 800622c:	4603      	mov	r3, r0
 800622e:	75bb      	strb	r3, [r7, #22]
            break;
 8006230:	e002      	b.n	8006238 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006232:	2300      	movs	r3, #0
 8006234:	75bb      	strb	r3, [r7, #22]
            break;
 8006236:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006238:	7dbb      	ldrb	r3, [r7, #22]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d119      	bne.n	8006272 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b03      	cmp	r3, #3
 8006248:	d113      	bne.n	8006272 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800624a:	7dba      	ldrb	r2, [r7, #22]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	32ae      	adds	r2, #174	@ 0xae
 8006250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00b      	beq.n	8006272 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800625a:	7dba      	ldrb	r2, [r7, #22]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006262:	7dba      	ldrb	r2, [r7, #22]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	32ae      	adds	r2, #174	@ 0xae
 8006268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f001 f95a 	bl	800752c <USBD_CtlSendStatus>
 8006278:	e032      	b.n	80062e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800627a:	7afb      	ldrb	r3, [r7, #11]
 800627c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006280:	b2db      	uxtb	r3, r3
 8006282:	4619      	mov	r1, r3
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 fa37 	bl	80066f8 <USBD_CoreFindEP>
 800628a:	4603      	mov	r3, r0
 800628c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800628e:	7dbb      	ldrb	r3, [r7, #22]
 8006290:	2bff      	cmp	r3, #255	@ 0xff
 8006292:	d025      	beq.n	80062e0 <USBD_LL_DataOutStage+0x15c>
 8006294:	7dbb      	ldrb	r3, [r7, #22]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d122      	bne.n	80062e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d117      	bne.n	80062d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80062a6:	7dba      	ldrb	r2, [r7, #22]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	32ae      	adds	r2, #174	@ 0xae
 80062ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00f      	beq.n	80062d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80062b6:	7dba      	ldrb	r2, [r7, #22]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80062be:	7dba      	ldrb	r2, [r7, #22]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	32ae      	adds	r2, #174	@ 0xae
 80062c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	7afa      	ldrb	r2, [r7, #11]
 80062cc:	4611      	mov	r1, r2
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	4798      	blx	r3
 80062d2:	4603      	mov	r3, r0
 80062d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80062dc:	7dfb      	ldrb	r3, [r7, #23]
 80062de:	e000      	b.n	80062e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3718      	adds	r7, #24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b086      	sub	sp, #24
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	60f8      	str	r0, [r7, #12]
 80062f2:	460b      	mov	r3, r1
 80062f4:	607a      	str	r2, [r7, #4]
 80062f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80062f8:	7afb      	ldrb	r3, [r7, #11]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d16f      	bne.n	80063de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	3314      	adds	r3, #20
 8006302:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800630a:	2b02      	cmp	r3, #2
 800630c:	d15a      	bne.n	80063c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	429a      	cmp	r2, r3
 8006318:	d914      	bls.n	8006344 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	1ad2      	subs	r2, r2, r3
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	461a      	mov	r2, r3
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f001 f8bc 	bl	80074ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006336:	2300      	movs	r3, #0
 8006338:	2200      	movs	r2, #0
 800633a:	2100      	movs	r1, #0
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f001 fdbd 	bl	8007ebc <USBD_LL_PrepareReceive>
 8006342:	e03f      	b.n	80063c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	429a      	cmp	r2, r3
 800634e:	d11c      	bne.n	800638a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006358:	429a      	cmp	r2, r3
 800635a:	d316      	bcc.n	800638a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006366:	429a      	cmp	r2, r3
 8006368:	d20f      	bcs.n	800638a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800636a:	2200      	movs	r2, #0
 800636c:	2100      	movs	r1, #0
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f001 f89d 	bl	80074ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800637c:	2300      	movs	r3, #0
 800637e:	2200      	movs	r2, #0
 8006380:	2100      	movs	r1, #0
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f001 fd9a 	bl	8007ebc <USBD_LL_PrepareReceive>
 8006388:	e01c      	b.n	80063c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b03      	cmp	r3, #3
 8006394:	d10f      	bne.n	80063b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d009      	beq.n	80063b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80063b6:	2180      	movs	r1, #128	@ 0x80
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f001 fcd5 	bl	8007d68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f001 f8c7 	bl	8007552 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d03a      	beq.n	8006444 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f7ff fe42 	bl	8006058 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80063dc:	e032      	b.n	8006444 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80063de:	7afb      	ldrb	r3, [r7, #11]
 80063e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	4619      	mov	r1, r3
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 f985 	bl	80066f8 <USBD_CoreFindEP>
 80063ee:	4603      	mov	r3, r0
 80063f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063f2:	7dfb      	ldrb	r3, [r7, #23]
 80063f4:	2bff      	cmp	r3, #255	@ 0xff
 80063f6:	d025      	beq.n	8006444 <USBD_LL_DataInStage+0x15a>
 80063f8:	7dfb      	ldrb	r3, [r7, #23]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d122      	bne.n	8006444 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b03      	cmp	r3, #3
 8006408:	d11c      	bne.n	8006444 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800640a:	7dfa      	ldrb	r2, [r7, #23]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	32ae      	adds	r2, #174	@ 0xae
 8006410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d014      	beq.n	8006444 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800641a:	7dfa      	ldrb	r2, [r7, #23]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006422:	7dfa      	ldrb	r2, [r7, #23]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	32ae      	adds	r2, #174	@ 0xae
 8006428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	7afa      	ldrb	r2, [r7, #11]
 8006430:	4611      	mov	r1, r2
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	4798      	blx	r3
 8006436:	4603      	mov	r3, r0
 8006438:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800643a:	7dbb      	ldrb	r3, [r7, #22]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006440:	7dbb      	ldrb	r3, [r7, #22]
 8006442:	e000      	b.n	8006446 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3718      	adds	r7, #24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b084      	sub	sp, #16
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006486:	2b00      	cmp	r3, #0
 8006488:	d014      	beq.n	80064b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00e      	beq.n	80064b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	6852      	ldr	r2, [r2, #4]
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	4611      	mov	r1, r2
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	4798      	blx	r3
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80064b0:	2303      	movs	r3, #3
 80064b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064b4:	2340      	movs	r3, #64	@ 0x40
 80064b6:	2200      	movs	r2, #0
 80064b8:	2100      	movs	r1, #0
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f001 fc0f 	bl	8007cde <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2240      	movs	r2, #64	@ 0x40
 80064cc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064d0:	2340      	movs	r3, #64	@ 0x40
 80064d2:	2200      	movs	r2, #0
 80064d4:	2180      	movs	r1, #128	@ 0x80
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f001 fc01 	bl	8007cde <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2240      	movs	r2, #64	@ 0x40
 80064e6:	621a      	str	r2, [r3, #32]

  return ret;
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b083      	sub	sp, #12
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	460b      	mov	r3, r1
 80064fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	78fa      	ldrb	r2, [r7, #3]
 8006502:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b04      	cmp	r3, #4
 8006524:	d006      	beq.n	8006534 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800652c:	b2da      	uxtb	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2204      	movs	r2, #4
 8006538:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800654a:	b480      	push	{r7}
 800654c:	b083      	sub	sp, #12
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b04      	cmp	r3, #4
 800655c:	d106      	bne.n	800656c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006564:	b2da      	uxtb	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b082      	sub	sp, #8
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b03      	cmp	r3, #3
 800658c:	d110      	bne.n	80065b0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00b      	beq.n	80065b0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800659e:	69db      	ldr	r3, [r3, #28]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d005      	beq.n	80065b0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b082      	sub	sp, #8
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	460b      	mov	r3, r1
 80065c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	32ae      	adds	r2, #174	@ 0xae
 80065d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80065d8:	2303      	movs	r3, #3
 80065da:	e01c      	b.n	8006616 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d115      	bne.n	8006614 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	32ae      	adds	r2, #174	@ 0xae
 80065f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00b      	beq.n	8006614 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	32ae      	adds	r2, #174	@ 0xae
 8006606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	78fa      	ldrb	r2, [r7, #3]
 800660e:	4611      	mov	r1, r2
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b082      	sub	sp, #8
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	460b      	mov	r3, r1
 8006628:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	32ae      	adds	r2, #174	@ 0xae
 8006634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800663c:	2303      	movs	r3, #3
 800663e:	e01c      	b.n	800667a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b03      	cmp	r3, #3
 800664a:	d115      	bne.n	8006678 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	32ae      	adds	r2, #174	@ 0xae
 8006656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800665a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00b      	beq.n	8006678 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	32ae      	adds	r2, #174	@ 0xae
 800666a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800666e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006670:	78fa      	ldrb	r2, [r7, #3]
 8006672:	4611      	mov	r1, r2
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006682:	b480      	push	{r7}
 8006684:	b083      	sub	sp, #12
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00e      	beq.n	80066d4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	6852      	ldr	r2, [r2, #4]
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	4611      	mov	r1, r2
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	4798      	blx	r3
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80066d0:	2303      	movs	r3, #3
 80066d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80066de:	b480      	push	{r7}
 80066e0:	b083      	sub	sp, #12
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	460b      	mov	r3, r1
 80066e8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80066ea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006704:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006706:	4618      	mov	r0, r3
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b086      	sub	sp, #24
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	460b      	mov	r3, r1
 800671c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006726:	2300      	movs	r3, #0
 8006728:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	885b      	ldrh	r3, [r3, #2]
 800672e:	b29b      	uxth	r3, r3
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	7812      	ldrb	r2, [r2, #0]
 8006734:	4293      	cmp	r3, r2
 8006736:	d91f      	bls.n	8006778 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800673e:	e013      	b.n	8006768 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006740:	f107 030a 	add.w	r3, r7, #10
 8006744:	4619      	mov	r1, r3
 8006746:	6978      	ldr	r0, [r7, #20]
 8006748:	f000 f81b 	bl	8006782 <USBD_GetNextDesc>
 800674c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	785b      	ldrb	r3, [r3, #1]
 8006752:	2b05      	cmp	r3, #5
 8006754:	d108      	bne.n	8006768 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	789b      	ldrb	r3, [r3, #2]
 800675e:	78fa      	ldrb	r2, [r7, #3]
 8006760:	429a      	cmp	r2, r3
 8006762:	d008      	beq.n	8006776 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006764:	2300      	movs	r3, #0
 8006766:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	885b      	ldrh	r3, [r3, #2]
 800676c:	b29a      	uxth	r2, r3
 800676e:	897b      	ldrh	r3, [r7, #10]
 8006770:	429a      	cmp	r2, r3
 8006772:	d8e5      	bhi.n	8006740 <USBD_GetEpDesc+0x2e>
 8006774:	e000      	b.n	8006778 <USBD_GetEpDesc+0x66>
          break;
 8006776:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006778:	693b      	ldr	r3, [r7, #16]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006782:	b480      	push	{r7}
 8006784:	b085      	sub	sp, #20
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
 800678a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	7812      	ldrb	r2, [r2, #0]
 8006798:	4413      	add	r3, r2
 800679a:	b29a      	uxth	r2, r3
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	461a      	mov	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4413      	add	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80067ac:	68fb      	ldr	r3, [r7, #12]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b087      	sub	sp, #28
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	3301      	adds	r3, #1
 80067d0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80067d8:	8a3b      	ldrh	r3, [r7, #16]
 80067da:	021b      	lsls	r3, r3, #8
 80067dc:	b21a      	sxth	r2, r3
 80067de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	b21b      	sxth	r3, r3
 80067e6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80067e8:	89fb      	ldrh	r3, [r7, #14]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	371c      	adds	r7, #28
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
	...

080067f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800680e:	2b40      	cmp	r3, #64	@ 0x40
 8006810:	d005      	beq.n	800681e <USBD_StdDevReq+0x26>
 8006812:	2b40      	cmp	r3, #64	@ 0x40
 8006814:	d857      	bhi.n	80068c6 <USBD_StdDevReq+0xce>
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00f      	beq.n	800683a <USBD_StdDevReq+0x42>
 800681a:	2b20      	cmp	r3, #32
 800681c:	d153      	bne.n	80068c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	32ae      	adds	r2, #174	@ 0xae
 8006828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	4798      	blx	r3
 8006834:	4603      	mov	r3, r0
 8006836:	73fb      	strb	r3, [r7, #15]
      break;
 8006838:	e04a      	b.n	80068d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	785b      	ldrb	r3, [r3, #1]
 800683e:	2b09      	cmp	r3, #9
 8006840:	d83b      	bhi.n	80068ba <USBD_StdDevReq+0xc2>
 8006842:	a201      	add	r2, pc, #4	@ (adr r2, 8006848 <USBD_StdDevReq+0x50>)
 8006844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006848:	0800689d 	.word	0x0800689d
 800684c:	080068b1 	.word	0x080068b1
 8006850:	080068bb 	.word	0x080068bb
 8006854:	080068a7 	.word	0x080068a7
 8006858:	080068bb 	.word	0x080068bb
 800685c:	0800687b 	.word	0x0800687b
 8006860:	08006871 	.word	0x08006871
 8006864:	080068bb 	.word	0x080068bb
 8006868:	08006893 	.word	0x08006893
 800686c:	08006885 	.word	0x08006885
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fa3c 	bl	8006cf0 <USBD_GetDescriptor>
          break;
 8006878:	e024      	b.n	80068c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800687a:	6839      	ldr	r1, [r7, #0]
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fba1 	bl	8006fc4 <USBD_SetAddress>
          break;
 8006882:	e01f      	b.n	80068c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006884:	6839      	ldr	r1, [r7, #0]
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fbe0 	bl	800704c <USBD_SetConfig>
 800688c:	4603      	mov	r3, r0
 800688e:	73fb      	strb	r3, [r7, #15]
          break;
 8006890:	e018      	b.n	80068c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fc83 	bl	80071a0 <USBD_GetConfig>
          break;
 800689a:	e013      	b.n	80068c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fcb4 	bl	800720c <USBD_GetStatus>
          break;
 80068a4:	e00e      	b.n	80068c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80068a6:	6839      	ldr	r1, [r7, #0]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fce3 	bl	8007274 <USBD_SetFeature>
          break;
 80068ae:	e009      	b.n	80068c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fd07 	bl	80072c6 <USBD_ClrFeature>
          break;
 80068b8:	e004      	b.n	80068c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80068ba:	6839      	ldr	r1, [r7, #0]
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fd5e 	bl	800737e <USBD_CtlError>
          break;
 80068c2:	bf00      	nop
      }
      break;
 80068c4:	e004      	b.n	80068d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80068c6:	6839      	ldr	r1, [r7, #0]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fd58 	bl	800737e <USBD_CtlError>
      break;
 80068ce:	bf00      	nop
  }

  return ret;
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop

080068dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80068f2:	2b40      	cmp	r3, #64	@ 0x40
 80068f4:	d005      	beq.n	8006902 <USBD_StdItfReq+0x26>
 80068f6:	2b40      	cmp	r3, #64	@ 0x40
 80068f8:	d852      	bhi.n	80069a0 <USBD_StdItfReq+0xc4>
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <USBD_StdItfReq+0x26>
 80068fe:	2b20      	cmp	r3, #32
 8006900:	d14e      	bne.n	80069a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006908:	b2db      	uxtb	r3, r3
 800690a:	3b01      	subs	r3, #1
 800690c:	2b02      	cmp	r3, #2
 800690e:	d840      	bhi.n	8006992 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	889b      	ldrh	r3, [r3, #4]
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b01      	cmp	r3, #1
 8006918:	d836      	bhi.n	8006988 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	889b      	ldrh	r3, [r3, #4]
 800691e:	b2db      	uxtb	r3, r3
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7ff fedb 	bl	80066de <USBD_CoreFindIF>
 8006928:	4603      	mov	r3, r0
 800692a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800692c:	7bbb      	ldrb	r3, [r7, #14]
 800692e:	2bff      	cmp	r3, #255	@ 0xff
 8006930:	d01d      	beq.n	800696e <USBD_StdItfReq+0x92>
 8006932:	7bbb      	ldrb	r3, [r7, #14]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d11a      	bne.n	800696e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006938:	7bba      	ldrb	r2, [r7, #14]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	32ae      	adds	r2, #174	@ 0xae
 800693e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00f      	beq.n	8006968 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006948:	7bba      	ldrb	r2, [r7, #14]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006950:	7bba      	ldrb	r2, [r7, #14]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	32ae      	adds	r2, #174	@ 0xae
 8006956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	4798      	blx	r3
 8006962:	4603      	mov	r3, r0
 8006964:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006966:	e004      	b.n	8006972 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006968:	2303      	movs	r3, #3
 800696a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800696c:	e001      	b.n	8006972 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800696e:	2303      	movs	r3, #3
 8006970:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	88db      	ldrh	r3, [r3, #6]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d110      	bne.n	800699c <USBD_StdItfReq+0xc0>
 800697a:	7bfb      	ldrb	r3, [r7, #15]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10d      	bne.n	800699c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fdd3 	bl	800752c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006986:	e009      	b.n	800699c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006988:	6839      	ldr	r1, [r7, #0]
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fcf7 	bl	800737e <USBD_CtlError>
          break;
 8006990:	e004      	b.n	800699c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fcf2 	bl	800737e <USBD_CtlError>
          break;
 800699a:	e000      	b.n	800699e <USBD_StdItfReq+0xc2>
          break;
 800699c:	bf00      	nop
      }
      break;
 800699e:	e004      	b.n	80069aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fceb 	bl	800737e <USBD_CtlError>
      break;
 80069a8:	bf00      	nop
  }

  return ret;
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	889b      	ldrh	r3, [r3, #4]
 80069c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80069d0:	2b40      	cmp	r3, #64	@ 0x40
 80069d2:	d007      	beq.n	80069e4 <USBD_StdEPReq+0x30>
 80069d4:	2b40      	cmp	r3, #64	@ 0x40
 80069d6:	f200 817f 	bhi.w	8006cd8 <USBD_StdEPReq+0x324>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d02a      	beq.n	8006a34 <USBD_StdEPReq+0x80>
 80069de:	2b20      	cmp	r3, #32
 80069e0:	f040 817a 	bne.w	8006cd8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80069e4:	7bbb      	ldrb	r3, [r7, #14]
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7ff fe85 	bl	80066f8 <USBD_CoreFindEP>
 80069ee:	4603      	mov	r3, r0
 80069f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069f2:	7b7b      	ldrb	r3, [r7, #13]
 80069f4:	2bff      	cmp	r3, #255	@ 0xff
 80069f6:	f000 8174 	beq.w	8006ce2 <USBD_StdEPReq+0x32e>
 80069fa:	7b7b      	ldrb	r3, [r7, #13]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f040 8170 	bne.w	8006ce2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006a02:	7b7a      	ldrb	r2, [r7, #13]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006a0a:	7b7a      	ldrb	r2, [r7, #13]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	32ae      	adds	r2, #174	@ 0xae
 8006a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 8163 	beq.w	8006ce2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006a1c:	7b7a      	ldrb	r2, [r7, #13]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	32ae      	adds	r2, #174	@ 0xae
 8006a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	4798      	blx	r3
 8006a2e:	4603      	mov	r3, r0
 8006a30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a32:	e156      	b.n	8006ce2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	785b      	ldrb	r3, [r3, #1]
 8006a38:	2b03      	cmp	r3, #3
 8006a3a:	d008      	beq.n	8006a4e <USBD_StdEPReq+0x9a>
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	f300 8145 	bgt.w	8006ccc <USBD_StdEPReq+0x318>
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 809b 	beq.w	8006b7e <USBD_StdEPReq+0x1ca>
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d03c      	beq.n	8006ac6 <USBD_StdEPReq+0x112>
 8006a4c:	e13e      	b.n	8006ccc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d002      	beq.n	8006a60 <USBD_StdEPReq+0xac>
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d016      	beq.n	8006a8c <USBD_StdEPReq+0xd8>
 8006a5e:	e02c      	b.n	8006aba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a60:	7bbb      	ldrb	r3, [r7, #14]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00d      	beq.n	8006a82 <USBD_StdEPReq+0xce>
 8006a66:	7bbb      	ldrb	r3, [r7, #14]
 8006a68:	2b80      	cmp	r3, #128	@ 0x80
 8006a6a:	d00a      	beq.n	8006a82 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a6c:	7bbb      	ldrb	r3, [r7, #14]
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f001 f979 	bl	8007d68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a76:	2180      	movs	r1, #128	@ 0x80
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f001 f975 	bl	8007d68 <USBD_LL_StallEP>
 8006a7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a80:	e020      	b.n	8006ac4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fc7a 	bl	800737e <USBD_CtlError>
              break;
 8006a8a:	e01b      	b.n	8006ac4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	885b      	ldrh	r3, [r3, #2]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10e      	bne.n	8006ab2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a94:	7bbb      	ldrb	r3, [r7, #14]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00b      	beq.n	8006ab2 <USBD_StdEPReq+0xfe>
 8006a9a:	7bbb      	ldrb	r3, [r7, #14]
 8006a9c:	2b80      	cmp	r3, #128	@ 0x80
 8006a9e:	d008      	beq.n	8006ab2 <USBD_StdEPReq+0xfe>
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	88db      	ldrh	r3, [r3, #6]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d104      	bne.n	8006ab2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006aa8:	7bbb      	ldrb	r3, [r7, #14]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f001 f95b 	bl	8007d68 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fd3a 	bl	800752c <USBD_CtlSendStatus>

              break;
 8006ab8:	e004      	b.n	8006ac4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fc5e 	bl	800737e <USBD_CtlError>
              break;
 8006ac2:	bf00      	nop
          }
          break;
 8006ac4:	e107      	b.n	8006cd6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d002      	beq.n	8006ad8 <USBD_StdEPReq+0x124>
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	d016      	beq.n	8006b04 <USBD_StdEPReq+0x150>
 8006ad6:	e04b      	b.n	8006b70 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ad8:	7bbb      	ldrb	r3, [r7, #14]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00d      	beq.n	8006afa <USBD_StdEPReq+0x146>
 8006ade:	7bbb      	ldrb	r3, [r7, #14]
 8006ae0:	2b80      	cmp	r3, #128	@ 0x80
 8006ae2:	d00a      	beq.n	8006afa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ae4:	7bbb      	ldrb	r3, [r7, #14]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f001 f93d 	bl	8007d68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006aee:	2180      	movs	r1, #128	@ 0x80
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f001 f939 	bl	8007d68 <USBD_LL_StallEP>
 8006af6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006af8:	e040      	b.n	8006b7c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fc3e 	bl	800737e <USBD_CtlError>
              break;
 8006b02:	e03b      	b.n	8006b7c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	885b      	ldrh	r3, [r3, #2]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d136      	bne.n	8006b7a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b0c:	7bbb      	ldrb	r3, [r7, #14]
 8006b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d004      	beq.n	8006b20 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b16:	7bbb      	ldrb	r3, [r7, #14]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f001 f943 	bl	8007da6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fd03 	bl	800752c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006b26:	7bbb      	ldrb	r3, [r7, #14]
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7ff fde4 	bl	80066f8 <USBD_CoreFindEP>
 8006b30:	4603      	mov	r3, r0
 8006b32:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b34:	7b7b      	ldrb	r3, [r7, #13]
 8006b36:	2bff      	cmp	r3, #255	@ 0xff
 8006b38:	d01f      	beq.n	8006b7a <USBD_StdEPReq+0x1c6>
 8006b3a:	7b7b      	ldrb	r3, [r7, #13]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d11c      	bne.n	8006b7a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006b40:	7b7a      	ldrb	r2, [r7, #13]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006b48:	7b7a      	ldrb	r2, [r7, #13]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	32ae      	adds	r2, #174	@ 0xae
 8006b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d010      	beq.n	8006b7a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b58:	7b7a      	ldrb	r2, [r7, #13]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	32ae      	adds	r2, #174	@ 0xae
 8006b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	4798      	blx	r3
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006b6e:	e004      	b.n	8006b7a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fc03 	bl	800737e <USBD_CtlError>
              break;
 8006b78:	e000      	b.n	8006b7c <USBD_StdEPReq+0x1c8>
              break;
 8006b7a:	bf00      	nop
          }
          break;
 8006b7c:	e0ab      	b.n	8006cd6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d002      	beq.n	8006b90 <USBD_StdEPReq+0x1dc>
 8006b8a:	2b03      	cmp	r3, #3
 8006b8c:	d032      	beq.n	8006bf4 <USBD_StdEPReq+0x240>
 8006b8e:	e097      	b.n	8006cc0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b90:	7bbb      	ldrb	r3, [r7, #14]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d007      	beq.n	8006ba6 <USBD_StdEPReq+0x1f2>
 8006b96:	7bbb      	ldrb	r3, [r7, #14]
 8006b98:	2b80      	cmp	r3, #128	@ 0x80
 8006b9a:	d004      	beq.n	8006ba6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fbed 	bl	800737e <USBD_CtlError>
                break;
 8006ba4:	e091      	b.n	8006cca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ba6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	da0b      	bge.n	8006bc6 <USBD_StdEPReq+0x212>
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	3310      	adds	r3, #16
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	e00b      	b.n	8006bde <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006bc6:	7bbb      	ldrb	r3, [r7, #14]
 8006bc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	4413      	add	r3, r2
 8006bdc:	3304      	adds	r3, #4
 8006bde:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2202      	movs	r2, #2
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fc43 	bl	8007478 <USBD_CtlSendData>
              break;
 8006bf2:	e06a      	b.n	8006cca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006bf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	da11      	bge.n	8006c20 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006bfc:	7bbb      	ldrb	r3, [r7, #14]
 8006bfe:	f003 020f 	and.w	r2, r3, #15
 8006c02:	6879      	ldr	r1, [r7, #4]
 8006c04:	4613      	mov	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	440b      	add	r3, r1
 8006c0e:	3324      	adds	r3, #36	@ 0x24
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d117      	bne.n	8006c46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fbb0 	bl	800737e <USBD_CtlError>
                  break;
 8006c1e:	e054      	b.n	8006cca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c20:	7bbb      	ldrb	r3, [r7, #14]
 8006c22:	f003 020f 	and.w	r2, r3, #15
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	440b      	add	r3, r1
 8006c32:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d104      	bne.n	8006c46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fb9d 	bl	800737e <USBD_CtlError>
                  break;
 8006c44:	e041      	b.n	8006cca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	da0b      	bge.n	8006c66 <USBD_StdEPReq+0x2b2>
 8006c4e:	7bbb      	ldrb	r3, [r7, #14]
 8006c50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	3310      	adds	r3, #16
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	4413      	add	r3, r2
 8006c62:	3304      	adds	r3, #4
 8006c64:	e00b      	b.n	8006c7e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c66:	7bbb      	ldrb	r3, [r7, #14]
 8006c68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c80:	7bbb      	ldrb	r3, [r7, #14]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d002      	beq.n	8006c8c <USBD_StdEPReq+0x2d8>
 8006c86:	7bbb      	ldrb	r3, [r7, #14]
 8006c88:	2b80      	cmp	r3, #128	@ 0x80
 8006c8a:	d103      	bne.n	8006c94 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	e00e      	b.n	8006cb2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f001 f8a3 	bl	8007de4 <USBD_LL_IsStallEP>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d003      	beq.n	8006cac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	e002      	b.n	8006cb2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 fbdd 	bl	8007478 <USBD_CtlSendData>
              break;
 8006cbe:	e004      	b.n	8006cca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fb5b 	bl	800737e <USBD_CtlError>
              break;
 8006cc8:	bf00      	nop
          }
          break;
 8006cca:	e004      	b.n	8006cd6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fb55 	bl	800737e <USBD_CtlError>
          break;
 8006cd4:	bf00      	nop
      }
      break;
 8006cd6:	e005      	b.n	8006ce4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006cd8:	6839      	ldr	r1, [r7, #0]
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fb4f 	bl	800737e <USBD_CtlError>
      break;
 8006ce0:	e000      	b.n	8006ce4 <USBD_StdEPReq+0x330>
      break;
 8006ce2:	bf00      	nop
  }

  return ret;
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
	...

08006cf0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	885b      	ldrh	r3, [r3, #2]
 8006d0a:	0a1b      	lsrs	r3, r3, #8
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	2b06      	cmp	r3, #6
 8006d12:	f200 8128 	bhi.w	8006f66 <USBD_GetDescriptor+0x276>
 8006d16:	a201      	add	r2, pc, #4	@ (adr r2, 8006d1c <USBD_GetDescriptor+0x2c>)
 8006d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1c:	08006d39 	.word	0x08006d39
 8006d20:	08006d51 	.word	0x08006d51
 8006d24:	08006d91 	.word	0x08006d91
 8006d28:	08006f67 	.word	0x08006f67
 8006d2c:	08006f67 	.word	0x08006f67
 8006d30:	08006f07 	.word	0x08006f07
 8006d34:	08006f33 	.word	0x08006f33
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	7c12      	ldrb	r2, [r2, #16]
 8006d44:	f107 0108 	add.w	r1, r7, #8
 8006d48:	4610      	mov	r0, r2
 8006d4a:	4798      	blx	r3
 8006d4c:	60f8      	str	r0, [r7, #12]
      break;
 8006d4e:	e112      	b.n	8006f76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	7c1b      	ldrb	r3, [r3, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10d      	bne.n	8006d74 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d60:	f107 0208 	add.w	r2, r7, #8
 8006d64:	4610      	mov	r0, r2
 8006d66:	4798      	blx	r3
 8006d68:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	2202      	movs	r2, #2
 8006d70:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d72:	e100      	b.n	8006f76 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7c:	f107 0208 	add.w	r2, r7, #8
 8006d80:	4610      	mov	r0, r2
 8006d82:	4798      	blx	r3
 8006d84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	701a      	strb	r2, [r3, #0]
      break;
 8006d8e:	e0f2      	b.n	8006f76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	885b      	ldrh	r3, [r3, #2]
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b05      	cmp	r3, #5
 8006d98:	f200 80ac 	bhi.w	8006ef4 <USBD_GetDescriptor+0x204>
 8006d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006da4 <USBD_GetDescriptor+0xb4>)
 8006d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da2:	bf00      	nop
 8006da4:	08006dbd 	.word	0x08006dbd
 8006da8:	08006df1 	.word	0x08006df1
 8006dac:	08006e25 	.word	0x08006e25
 8006db0:	08006e59 	.word	0x08006e59
 8006db4:	08006e8d 	.word	0x08006e8d
 8006db8:	08006ec1 	.word	0x08006ec1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00b      	beq.n	8006de0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	7c12      	ldrb	r2, [r2, #16]
 8006dd4:	f107 0108 	add.w	r1, r7, #8
 8006dd8:	4610      	mov	r0, r2
 8006dda:	4798      	blx	r3
 8006ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dde:	e091      	b.n	8006f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 facb 	bl	800737e <USBD_CtlError>
            err++;
 8006de8:	7afb      	ldrb	r3, [r7, #11]
 8006dea:	3301      	adds	r3, #1
 8006dec:	72fb      	strb	r3, [r7, #11]
          break;
 8006dee:	e089      	b.n	8006f04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00b      	beq.n	8006e14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	7c12      	ldrb	r2, [r2, #16]
 8006e08:	f107 0108 	add.w	r1, r7, #8
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	4798      	blx	r3
 8006e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e12:	e077      	b.n	8006f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fab1 	bl	800737e <USBD_CtlError>
            err++;
 8006e1c:	7afb      	ldrb	r3, [r7, #11]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	72fb      	strb	r3, [r7, #11]
          break;
 8006e22:	e06f      	b.n	8006f04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00b      	beq.n	8006e48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	7c12      	ldrb	r2, [r2, #16]
 8006e3c:	f107 0108 	add.w	r1, r7, #8
 8006e40:	4610      	mov	r0, r2
 8006e42:	4798      	blx	r3
 8006e44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e46:	e05d      	b.n	8006f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fa97 	bl	800737e <USBD_CtlError>
            err++;
 8006e50:	7afb      	ldrb	r3, [r7, #11]
 8006e52:	3301      	adds	r3, #1
 8006e54:	72fb      	strb	r3, [r7, #11]
          break;
 8006e56:	e055      	b.n	8006f04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00b      	beq.n	8006e7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	7c12      	ldrb	r2, [r2, #16]
 8006e70:	f107 0108 	add.w	r1, r7, #8
 8006e74:	4610      	mov	r0, r2
 8006e76:	4798      	blx	r3
 8006e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e7a:	e043      	b.n	8006f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e7c:	6839      	ldr	r1, [r7, #0]
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fa7d 	bl	800737e <USBD_CtlError>
            err++;
 8006e84:	7afb      	ldrb	r3, [r7, #11]
 8006e86:	3301      	adds	r3, #1
 8006e88:	72fb      	strb	r3, [r7, #11]
          break;
 8006e8a:	e03b      	b.n	8006f04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00b      	beq.n	8006eb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	7c12      	ldrb	r2, [r2, #16]
 8006ea4:	f107 0108 	add.w	r1, r7, #8
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	4798      	blx	r3
 8006eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eae:	e029      	b.n	8006f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fa63 	bl	800737e <USBD_CtlError>
            err++;
 8006eb8:	7afb      	ldrb	r3, [r7, #11]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ebe:	e021      	b.n	8006f04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00b      	beq.n	8006ee4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	7c12      	ldrb	r2, [r2, #16]
 8006ed8:	f107 0108 	add.w	r1, r7, #8
 8006edc:	4610      	mov	r0, r2
 8006ede:	4798      	blx	r3
 8006ee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ee2:	e00f      	b.n	8006f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fa49 	bl	800737e <USBD_CtlError>
            err++;
 8006eec:	7afb      	ldrb	r3, [r7, #11]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ef2:	e007      	b.n	8006f04 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fa41 	bl	800737e <USBD_CtlError>
          err++;
 8006efc:	7afb      	ldrb	r3, [r7, #11]
 8006efe:	3301      	adds	r3, #1
 8006f00:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006f02:	bf00      	nop
      }
      break;
 8006f04:	e037      	b.n	8006f76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	7c1b      	ldrb	r3, [r3, #16]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d109      	bne.n	8006f22 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f16:	f107 0208 	add.w	r2, r7, #8
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	4798      	blx	r3
 8006f1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f20:	e029      	b.n	8006f76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f22:	6839      	ldr	r1, [r7, #0]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fa2a 	bl	800737e <USBD_CtlError>
        err++;
 8006f2a:	7afb      	ldrb	r3, [r7, #11]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	72fb      	strb	r3, [r7, #11]
      break;
 8006f30:	e021      	b.n	8006f76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	7c1b      	ldrb	r3, [r3, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10d      	bne.n	8006f56 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f42:	f107 0208 	add.w	r2, r7, #8
 8006f46:	4610      	mov	r0, r2
 8006f48:	4798      	blx	r3
 8006f4a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	2207      	movs	r2, #7
 8006f52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f54:	e00f      	b.n	8006f76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fa10 	bl	800737e <USBD_CtlError>
        err++;
 8006f5e:	7afb      	ldrb	r3, [r7, #11]
 8006f60:	3301      	adds	r3, #1
 8006f62:	72fb      	strb	r3, [r7, #11]
      break;
 8006f64:	e007      	b.n	8006f76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fa08 	bl	800737e <USBD_CtlError>
      err++;
 8006f6e:	7afb      	ldrb	r3, [r7, #11]
 8006f70:	3301      	adds	r3, #1
 8006f72:	72fb      	strb	r3, [r7, #11]
      break;
 8006f74:	bf00      	nop
  }

  if (err != 0U)
 8006f76:	7afb      	ldrb	r3, [r7, #11]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d11e      	bne.n	8006fba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	88db      	ldrh	r3, [r3, #6]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d016      	beq.n	8006fb2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006f84:	893b      	ldrh	r3, [r7, #8]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00e      	beq.n	8006fa8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	88da      	ldrh	r2, [r3, #6]
 8006f8e:	893b      	ldrh	r3, [r7, #8]
 8006f90:	4293      	cmp	r3, r2
 8006f92:	bf28      	it	cs
 8006f94:	4613      	movcs	r3, r2
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f9a:	893b      	ldrh	r3, [r7, #8]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	68f9      	ldr	r1, [r7, #12]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fa69 	bl	8007478 <USBD_CtlSendData>
 8006fa6:	e009      	b.n	8006fbc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006fa8:	6839      	ldr	r1, [r7, #0]
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f9e7 	bl	800737e <USBD_CtlError>
 8006fb0:	e004      	b.n	8006fbc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 faba 	bl	800752c <USBD_CtlSendStatus>
 8006fb8:	e000      	b.n	8006fbc <USBD_GetDescriptor+0x2cc>
    return;
 8006fba:	bf00      	nop
  }
}
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop

08006fc4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	889b      	ldrh	r3, [r3, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d131      	bne.n	800703a <USBD_SetAddress+0x76>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	88db      	ldrh	r3, [r3, #6]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d12d      	bne.n	800703a <USBD_SetAddress+0x76>
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	885b      	ldrh	r3, [r3, #2]
 8006fe2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fe4:	d829      	bhi.n	800703a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	885b      	ldrh	r3, [r3, #2]
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ff0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b03      	cmp	r3, #3
 8006ffc:	d104      	bne.n	8007008 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f9bc 	bl	800737e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007006:	e01d      	b.n	8007044 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	7bfa      	ldrb	r2, [r7, #15]
 800700c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007010:	7bfb      	ldrb	r3, [r7, #15]
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 ff11 	bl	8007e3c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fa86 	bl	800752c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007020:	7bfb      	ldrb	r3, [r7, #15]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d004      	beq.n	8007030 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2202      	movs	r2, #2
 800702a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800702e:	e009      	b.n	8007044 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007038:	e004      	b.n	8007044 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800703a:	6839      	ldr	r1, [r7, #0]
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f99e 	bl	800737e <USBD_CtlError>
  }
}
 8007042:	bf00      	nop
 8007044:	bf00      	nop
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	885b      	ldrh	r3, [r3, #2]
 800705e:	b2da      	uxtb	r2, r3
 8007060:	4b4e      	ldr	r3, [pc, #312]	@ (800719c <USBD_SetConfig+0x150>)
 8007062:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007064:	4b4d      	ldr	r3, [pc, #308]	@ (800719c <USBD_SetConfig+0x150>)
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d905      	bls.n	8007078 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f985 	bl	800737e <USBD_CtlError>
    return USBD_FAIL;
 8007074:	2303      	movs	r3, #3
 8007076:	e08c      	b.n	8007192 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b02      	cmp	r3, #2
 8007082:	d002      	beq.n	800708a <USBD_SetConfig+0x3e>
 8007084:	2b03      	cmp	r3, #3
 8007086:	d029      	beq.n	80070dc <USBD_SetConfig+0x90>
 8007088:	e075      	b.n	8007176 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800708a:	4b44      	ldr	r3, [pc, #272]	@ (800719c <USBD_SetConfig+0x150>)
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d020      	beq.n	80070d4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007092:	4b42      	ldr	r3, [pc, #264]	@ (800719c <USBD_SetConfig+0x150>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800709c:	4b3f      	ldr	r3, [pc, #252]	@ (800719c <USBD_SetConfig+0x150>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f7fe ffe3 	bl	800606e <USBD_SetClassConfig>
 80070a8:	4603      	mov	r3, r0
 80070aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d008      	beq.n	80070c4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f962 	bl	800737e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2202      	movs	r2, #2
 80070be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80070c2:	e065      	b.n	8007190 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fa31 	bl	800752c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2203      	movs	r2, #3
 80070ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80070d2:	e05d      	b.n	8007190 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fa29 	bl	800752c <USBD_CtlSendStatus>
      break;
 80070da:	e059      	b.n	8007190 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80070dc:	4b2f      	ldr	r3, [pc, #188]	@ (800719c <USBD_SetConfig+0x150>)
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d112      	bne.n	800710a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80070ec:	4b2b      	ldr	r3, [pc, #172]	@ (800719c <USBD_SetConfig+0x150>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	461a      	mov	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80070f6:	4b29      	ldr	r3, [pc, #164]	@ (800719c <USBD_SetConfig+0x150>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7fe ffd2 	bl	80060a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fa12 	bl	800752c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007108:	e042      	b.n	8007190 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800710a:	4b24      	ldr	r3, [pc, #144]	@ (800719c <USBD_SetConfig+0x150>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	429a      	cmp	r2, r3
 8007116:	d02a      	beq.n	800716e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	b2db      	uxtb	r3, r3
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7fe ffc0 	bl	80060a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007126:	4b1d      	ldr	r3, [pc, #116]	@ (800719c <USBD_SetConfig+0x150>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007130:	4b1a      	ldr	r3, [pc, #104]	@ (800719c <USBD_SetConfig+0x150>)
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	4619      	mov	r1, r3
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7fe ff99 	bl	800606e <USBD_SetClassConfig>
 800713c:	4603      	mov	r3, r0
 800713e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00f      	beq.n	8007166 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f918 	bl	800737e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7fe ffa5 	bl	80060a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2202      	movs	r2, #2
 8007160:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007164:	e014      	b.n	8007190 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f9e0 	bl	800752c <USBD_CtlSendStatus>
      break;
 800716c:	e010      	b.n	8007190 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f9dc 	bl	800752c <USBD_CtlSendStatus>
      break;
 8007174:	e00c      	b.n	8007190 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f900 	bl	800737e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800717e:	4b07      	ldr	r3, [pc, #28]	@ (800719c <USBD_SetConfig+0x150>)
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7fe ff8e 	bl	80060a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800718a:	2303      	movs	r3, #3
 800718c:	73fb      	strb	r3, [r7, #15]
      break;
 800718e:	bf00      	nop
  }

  return ret;
 8007190:	7bfb      	ldrb	r3, [r7, #15]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	200002d0 	.word	0x200002d0

080071a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	88db      	ldrh	r3, [r3, #6]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d004      	beq.n	80071bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f8e2 	bl	800737e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80071ba:	e023      	b.n	8007204 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	dc02      	bgt.n	80071ce <USBD_GetConfig+0x2e>
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	dc03      	bgt.n	80071d4 <USBD_GetConfig+0x34>
 80071cc:	e015      	b.n	80071fa <USBD_GetConfig+0x5a>
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d00b      	beq.n	80071ea <USBD_GetConfig+0x4a>
 80071d2:	e012      	b.n	80071fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	3308      	adds	r3, #8
 80071de:	2201      	movs	r2, #1
 80071e0:	4619      	mov	r1, r3
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f948 	bl	8007478 <USBD_CtlSendData>
        break;
 80071e8:	e00c      	b.n	8007204 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	3304      	adds	r3, #4
 80071ee:	2201      	movs	r2, #1
 80071f0:	4619      	mov	r1, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f940 	bl	8007478 <USBD_CtlSendData>
        break;
 80071f8:	e004      	b.n	8007204 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f8be 	bl	800737e <USBD_CtlError>
        break;
 8007202:	bf00      	nop
}
 8007204:	bf00      	nop
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800721c:	b2db      	uxtb	r3, r3
 800721e:	3b01      	subs	r3, #1
 8007220:	2b02      	cmp	r3, #2
 8007222:	d81e      	bhi.n	8007262 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	88db      	ldrh	r3, [r3, #6]
 8007228:	2b02      	cmp	r3, #2
 800722a:	d004      	beq.n	8007236 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f8a5 	bl	800737e <USBD_CtlError>
        break;
 8007234:	e01a      	b.n	800726c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007242:	2b00      	cmp	r3, #0
 8007244:	d005      	beq.n	8007252 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	f043 0202 	orr.w	r2, r3, #2
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	330c      	adds	r3, #12
 8007256:	2202      	movs	r2, #2
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f90c 	bl	8007478 <USBD_CtlSendData>
      break;
 8007260:	e004      	b.n	800726c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f88a 	bl	800737e <USBD_CtlError>
      break;
 800726a:	bf00      	nop
  }
}
 800726c:	bf00      	nop
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	885b      	ldrh	r3, [r3, #2]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d107      	bne.n	8007296 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f94c 	bl	800752c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007294:	e013      	b.n	80072be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	885b      	ldrh	r3, [r3, #2]
 800729a:	2b02      	cmp	r3, #2
 800729c:	d10b      	bne.n	80072b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	889b      	ldrh	r3, [r3, #4]
 80072a2:	0a1b      	lsrs	r3, r3, #8
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f93c 	bl	800752c <USBD_CtlSendStatus>
}
 80072b4:	e003      	b.n	80072be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f860 	bl	800737e <USBD_CtlError>
}
 80072be:	bf00      	nop
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b082      	sub	sp, #8
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
 80072ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	3b01      	subs	r3, #1
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d80b      	bhi.n	80072f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	885b      	ldrh	r3, [r3, #2]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d10c      	bne.n	8007300 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f91c 	bl	800752c <USBD_CtlSendStatus>
      }
      break;
 80072f4:	e004      	b.n	8007300 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80072f6:	6839      	ldr	r1, [r7, #0]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f840 	bl	800737e <USBD_CtlError>
      break;
 80072fe:	e000      	b.n	8007302 <USBD_ClrFeature+0x3c>
      break;
 8007300:	bf00      	nop
  }
}
 8007302:	bf00      	nop
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b084      	sub	sp, #16
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	781a      	ldrb	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	3301      	adds	r3, #1
 8007324:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	781a      	ldrb	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	3301      	adds	r3, #1
 8007332:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f7ff fa40 	bl	80067ba <SWAPBYTE>
 800733a:	4603      	mov	r3, r0
 800733c:	461a      	mov	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	3301      	adds	r3, #1
 8007346:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	3301      	adds	r3, #1
 800734c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f7ff fa33 	bl	80067ba <SWAPBYTE>
 8007354:	4603      	mov	r3, r0
 8007356:	461a      	mov	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3301      	adds	r3, #1
 8007360:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3301      	adds	r3, #1
 8007366:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f7ff fa26 	bl	80067ba <SWAPBYTE>
 800736e:	4603      	mov	r3, r0
 8007370:	461a      	mov	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	80da      	strh	r2, [r3, #6]
}
 8007376:	bf00      	nop
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b082      	sub	sp, #8
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007388:	2180      	movs	r1, #128	@ 0x80
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fcec 	bl	8007d68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007390:	2100      	movs	r1, #0
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fce8 	bl	8007d68 <USBD_LL_StallEP>
}
 8007398:	bf00      	nop
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d042      	beq.n	800743c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80073ba:	6938      	ldr	r0, [r7, #16]
 80073bc:	f000 f842 	bl	8007444 <USBD_GetLen>
 80073c0:	4603      	mov	r3, r0
 80073c2:	3301      	adds	r3, #1
 80073c4:	005b      	lsls	r3, r3, #1
 80073c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073ca:	d808      	bhi.n	80073de <USBD_GetString+0x3e>
 80073cc:	6938      	ldr	r0, [r7, #16]
 80073ce:	f000 f839 	bl	8007444 <USBD_GetLen>
 80073d2:	4603      	mov	r3, r0
 80073d4:	3301      	adds	r3, #1
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	005b      	lsls	r3, r3, #1
 80073da:	b29a      	uxth	r2, r3
 80073dc:	e001      	b.n	80073e2 <USBD_GetString+0x42>
 80073de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80073e6:	7dfb      	ldrb	r3, [r7, #23]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	4413      	add	r3, r2
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	7812      	ldrb	r2, [r2, #0]
 80073f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80073f2:	7dfb      	ldrb	r3, [r7, #23]
 80073f4:	3301      	adds	r3, #1
 80073f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80073f8:	7dfb      	ldrb	r3, [r7, #23]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	4413      	add	r3, r2
 80073fe:	2203      	movs	r2, #3
 8007400:	701a      	strb	r2, [r3, #0]
  idx++;
 8007402:	7dfb      	ldrb	r3, [r7, #23]
 8007404:	3301      	adds	r3, #1
 8007406:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007408:	e013      	b.n	8007432 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800740a:	7dfb      	ldrb	r3, [r7, #23]
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	4413      	add	r3, r2
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	7812      	ldrb	r2, [r2, #0]
 8007414:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	3301      	adds	r3, #1
 800741a:	613b      	str	r3, [r7, #16]
    idx++;
 800741c:	7dfb      	ldrb	r3, [r7, #23]
 800741e:	3301      	adds	r3, #1
 8007420:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007422:	7dfb      	ldrb	r3, [r7, #23]
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	4413      	add	r3, r2
 8007428:	2200      	movs	r2, #0
 800742a:	701a      	strb	r2, [r3, #0]
    idx++;
 800742c:	7dfb      	ldrb	r3, [r7, #23]
 800742e:	3301      	adds	r3, #1
 8007430:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e7      	bne.n	800740a <USBD_GetString+0x6a>
 800743a:	e000      	b.n	800743e <USBD_GetString+0x9e>
    return;
 800743c:	bf00      	nop
  }
}
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007454:	e005      	b.n	8007462 <USBD_GetLen+0x1e>
  {
    len++;
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	3301      	adds	r3, #1
 800745a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	3301      	adds	r3, #1
 8007460:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1f5      	bne.n	8007456 <USBD_GetLen+0x12>
  }

  return len;
 800746a:	7bfb      	ldrb	r3, [r7, #15]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2202      	movs	r2, #2
 8007488:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	2100      	movs	r1, #0
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 fceb 	bl	8007e7a <USBD_LL_Transmit>

  return USBD_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	60f8      	str	r0, [r7, #12]
 80074b6:	60b9      	str	r1, [r7, #8]
 80074b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68ba      	ldr	r2, [r7, #8]
 80074be:	2100      	movs	r1, #0
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 fcda 	bl	8007e7a <USBD_LL_Transmit>

  return USBD_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2203      	movs	r2, #3
 80074e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	2100      	movs	r1, #0
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 fcde 	bl	8007ebc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	60f8      	str	r0, [r7, #12]
 8007512:	60b9      	str	r1, [r7, #8]
 8007514:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	2100      	movs	r1, #0
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f000 fccd 	bl	8007ebc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2204      	movs	r2, #4
 8007538:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800753c:	2300      	movs	r3, #0
 800753e:	2200      	movs	r2, #0
 8007540:	2100      	movs	r1, #0
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fc99 	bl	8007e7a <USBD_LL_Transmit>

  return USBD_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b082      	sub	sp, #8
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2205      	movs	r2, #5
 800755e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007562:	2300      	movs	r3, #0
 8007564:	2200      	movs	r2, #0
 8007566:	2100      	movs	r1, #0
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fca7 	bl	8007ebc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800757c:	2200      	movs	r2, #0
 800757e:	4912      	ldr	r1, [pc, #72]	@ (80075c8 <MX_USB_DEVICE_Init+0x50>)
 8007580:	4812      	ldr	r0, [pc, #72]	@ (80075cc <MX_USB_DEVICE_Init+0x54>)
 8007582:	f7fe fcf7 	bl	8005f74 <USBD_Init>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d001      	beq.n	8007590 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800758c:	f7f9 f9ca 	bl	8000924 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007590:	490f      	ldr	r1, [pc, #60]	@ (80075d0 <MX_USB_DEVICE_Init+0x58>)
 8007592:	480e      	ldr	r0, [pc, #56]	@ (80075cc <MX_USB_DEVICE_Init+0x54>)
 8007594:	f7fe fd1e 	bl	8005fd4 <USBD_RegisterClass>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800759e:	f7f9 f9c1 	bl	8000924 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80075a2:	490c      	ldr	r1, [pc, #48]	@ (80075d4 <MX_USB_DEVICE_Init+0x5c>)
 80075a4:	4809      	ldr	r0, [pc, #36]	@ (80075cc <MX_USB_DEVICE_Init+0x54>)
 80075a6:	f7fe fc15 	bl	8005dd4 <USBD_CDC_RegisterInterface>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80075b0:	f7f9 f9b8 	bl	8000924 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80075b4:	4805      	ldr	r0, [pc, #20]	@ (80075cc <MX_USB_DEVICE_Init+0x54>)
 80075b6:	f7fe fd43 	bl	8006040 <USBD_Start>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d001      	beq.n	80075c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80075c0:	f7f9 f9b0 	bl	8000924 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80075c4:	bf00      	nop
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	200000ac 	.word	0x200000ac
 80075cc:	200002d4 	.word	0x200002d4
 80075d0:	20000018 	.word	0x20000018
 80075d4:	20000098 	.word	0x20000098

080075d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80075dc:	2200      	movs	r2, #0
 80075de:	4905      	ldr	r1, [pc, #20]	@ (80075f4 <CDC_Init_FS+0x1c>)
 80075e0:	4805      	ldr	r0, [pc, #20]	@ (80075f8 <CDC_Init_FS+0x20>)
 80075e2:	f7fe fc11 	bl	8005e08 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80075e6:	4905      	ldr	r1, [pc, #20]	@ (80075fc <CDC_Init_FS+0x24>)
 80075e8:	4803      	ldr	r0, [pc, #12]	@ (80075f8 <CDC_Init_FS+0x20>)
 80075ea:	f7fe fc2f 	bl	8005e4c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80075ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	20000db0 	.word	0x20000db0
 80075f8:	200002d4 	.word	0x200002d4
 80075fc:	200005b0 	.word	0x200005b0

08007600 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007600:	b480      	push	{r7}
 8007602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007604:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007606:	4618      	mov	r0, r3
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	4603      	mov	r3, r0
 8007618:	6039      	str	r1, [r7, #0]
 800761a:	71fb      	strb	r3, [r7, #7]
 800761c:	4613      	mov	r3, r2
 800761e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	2b23      	cmp	r3, #35	@ 0x23
 8007624:	d84a      	bhi.n	80076bc <CDC_Control_FS+0xac>
 8007626:	a201      	add	r2, pc, #4	@ (adr r2, 800762c <CDC_Control_FS+0x1c>)
 8007628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762c:	080076bd 	.word	0x080076bd
 8007630:	080076bd 	.word	0x080076bd
 8007634:	080076bd 	.word	0x080076bd
 8007638:	080076bd 	.word	0x080076bd
 800763c:	080076bd 	.word	0x080076bd
 8007640:	080076bd 	.word	0x080076bd
 8007644:	080076bd 	.word	0x080076bd
 8007648:	080076bd 	.word	0x080076bd
 800764c:	080076bd 	.word	0x080076bd
 8007650:	080076bd 	.word	0x080076bd
 8007654:	080076bd 	.word	0x080076bd
 8007658:	080076bd 	.word	0x080076bd
 800765c:	080076bd 	.word	0x080076bd
 8007660:	080076bd 	.word	0x080076bd
 8007664:	080076bd 	.word	0x080076bd
 8007668:	080076bd 	.word	0x080076bd
 800766c:	080076bd 	.word	0x080076bd
 8007670:	080076bd 	.word	0x080076bd
 8007674:	080076bd 	.word	0x080076bd
 8007678:	080076bd 	.word	0x080076bd
 800767c:	080076bd 	.word	0x080076bd
 8007680:	080076bd 	.word	0x080076bd
 8007684:	080076bd 	.word	0x080076bd
 8007688:	080076bd 	.word	0x080076bd
 800768c:	080076bd 	.word	0x080076bd
 8007690:	080076bd 	.word	0x080076bd
 8007694:	080076bd 	.word	0x080076bd
 8007698:	080076bd 	.word	0x080076bd
 800769c:	080076bd 	.word	0x080076bd
 80076a0:	080076bd 	.word	0x080076bd
 80076a4:	080076bd 	.word	0x080076bd
 80076a8:	080076bd 	.word	0x080076bd
 80076ac:	080076bd 	.word	0x080076bd
 80076b0:	080076bd 	.word	0x080076bd
 80076b4:	080076bd 	.word	0x080076bd
 80076b8:	080076bd 	.word	0x080076bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80076bc:	bf00      	nop
  }

  return (USBD_OK);
 80076be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80076d6:	6879      	ldr	r1, [r7, #4]
 80076d8:	4805      	ldr	r0, [pc, #20]	@ (80076f0 <CDC_Receive_FS+0x24>)
 80076da:	f7fe fbb7 	bl	8005e4c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80076de:	4804      	ldr	r0, [pc, #16]	@ (80076f0 <CDC_Receive_FS+0x24>)
 80076e0:	f7fe fc12 	bl	8005f08 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80076e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	200002d4 	.word	0x200002d4

080076f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	460b      	mov	r3, r1
 80076fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007704:	4b0d      	ldr	r3, [pc, #52]	@ (800773c <CDC_Transmit_FS+0x48>)
 8007706:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800770a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007716:	2301      	movs	r3, #1
 8007718:	e00b      	b.n	8007732 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800771a:	887b      	ldrh	r3, [r7, #2]
 800771c:	461a      	mov	r2, r3
 800771e:	6879      	ldr	r1, [r7, #4]
 8007720:	4806      	ldr	r0, [pc, #24]	@ (800773c <CDC_Transmit_FS+0x48>)
 8007722:	f7fe fb71 	bl	8005e08 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007726:	4805      	ldr	r0, [pc, #20]	@ (800773c <CDC_Transmit_FS+0x48>)
 8007728:	f7fe fbae 	bl	8005e88 <USBD_CDC_TransmitPacket>
 800772c:	4603      	mov	r3, r0
 800772e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007730:	7bfb      	ldrb	r3, [r7, #15]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	200002d4 	.word	0x200002d4

08007740 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	4613      	mov	r3, r2
 800774c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007752:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007756:	4618      	mov	r0, r3
 8007758:	371c      	adds	r7, #28
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
	...

08007764 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	4603      	mov	r3, r0
 800776c:	6039      	str	r1, [r7, #0]
 800776e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	2212      	movs	r2, #18
 8007774:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007776:	4b03      	ldr	r3, [pc, #12]	@ (8007784 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007778:	4618      	mov	r0, r3
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	200000c8 	.word	0x200000c8

08007788 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	4603      	mov	r3, r0
 8007790:	6039      	str	r1, [r7, #0]
 8007792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2204      	movs	r2, #4
 8007798:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800779a:	4b03      	ldr	r3, [pc, #12]	@ (80077a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800779c:	4618      	mov	r0, r3
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	200000dc 	.word	0x200000dc

080077ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	4603      	mov	r3, r0
 80077b4:	6039      	str	r1, [r7, #0]
 80077b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077b8:	79fb      	ldrb	r3, [r7, #7]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d105      	bne.n	80077ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	4907      	ldr	r1, [pc, #28]	@ (80077e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80077c2:	4808      	ldr	r0, [pc, #32]	@ (80077e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80077c4:	f7ff fdec 	bl	80073a0 <USBD_GetString>
 80077c8:	e004      	b.n	80077d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	4904      	ldr	r1, [pc, #16]	@ (80077e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80077ce:	4805      	ldr	r0, [pc, #20]	@ (80077e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80077d0:	f7ff fde6 	bl	80073a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077d4:	4b02      	ldr	r3, [pc, #8]	@ (80077e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	200015b0 	.word	0x200015b0
 80077e4:	0800891c 	.word	0x0800891c

080077e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	4603      	mov	r3, r0
 80077f0:	6039      	str	r1, [r7, #0]
 80077f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80077f4:	683a      	ldr	r2, [r7, #0]
 80077f6:	4904      	ldr	r1, [pc, #16]	@ (8007808 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80077f8:	4804      	ldr	r0, [pc, #16]	@ (800780c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80077fa:	f7ff fdd1 	bl	80073a0 <USBD_GetString>
  return USBD_StrDesc;
 80077fe:	4b02      	ldr	r3, [pc, #8]	@ (8007808 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007800:	4618      	mov	r0, r3
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	200015b0 	.word	0x200015b0
 800780c:	08008934 	.word	0x08008934

08007810 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	4603      	mov	r3, r0
 8007818:	6039      	str	r1, [r7, #0]
 800781a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	221a      	movs	r2, #26
 8007820:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007822:	f000 f843 	bl	80078ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007826:	4b02      	ldr	r3, [pc, #8]	@ (8007830 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007828:	4618      	mov	r0, r3
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	200000e0 	.word	0x200000e0

08007834 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	4603      	mov	r3, r0
 800783c:	6039      	str	r1, [r7, #0]
 800783e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007840:	79fb      	ldrb	r3, [r7, #7]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d105      	bne.n	8007852 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	4907      	ldr	r1, [pc, #28]	@ (8007868 <USBD_FS_ConfigStrDescriptor+0x34>)
 800784a:	4808      	ldr	r0, [pc, #32]	@ (800786c <USBD_FS_ConfigStrDescriptor+0x38>)
 800784c:	f7ff fda8 	bl	80073a0 <USBD_GetString>
 8007850:	e004      	b.n	800785c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	4904      	ldr	r1, [pc, #16]	@ (8007868 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007856:	4805      	ldr	r0, [pc, #20]	@ (800786c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007858:	f7ff fda2 	bl	80073a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800785c:	4b02      	ldr	r3, [pc, #8]	@ (8007868 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	200015b0 	.word	0x200015b0
 800786c:	08008948 	.word	0x08008948

08007870 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	4603      	mov	r3, r0
 8007878:	6039      	str	r1, [r7, #0]
 800787a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800787c:	79fb      	ldrb	r3, [r7, #7]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d105      	bne.n	800788e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	4907      	ldr	r1, [pc, #28]	@ (80078a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007886:	4808      	ldr	r0, [pc, #32]	@ (80078a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007888:	f7ff fd8a 	bl	80073a0 <USBD_GetString>
 800788c:	e004      	b.n	8007898 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	4904      	ldr	r1, [pc, #16]	@ (80078a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007892:	4805      	ldr	r0, [pc, #20]	@ (80078a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007894:	f7ff fd84 	bl	80073a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007898:	4b02      	ldr	r3, [pc, #8]	@ (80078a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	200015b0 	.word	0x200015b0
 80078a8:	08008954 	.word	0x08008954

080078ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80078b2:	4b0f      	ldr	r3, [pc, #60]	@ (80078f0 <Get_SerialNum+0x44>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80078b8:	4b0e      	ldr	r3, [pc, #56]	@ (80078f4 <Get_SerialNum+0x48>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80078be:	4b0e      	ldr	r3, [pc, #56]	@ (80078f8 <Get_SerialNum+0x4c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4413      	add	r3, r2
 80078ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d009      	beq.n	80078e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80078d2:	2208      	movs	r2, #8
 80078d4:	4909      	ldr	r1, [pc, #36]	@ (80078fc <Get_SerialNum+0x50>)
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f000 f814 	bl	8007904 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80078dc:	2204      	movs	r2, #4
 80078de:	4908      	ldr	r1, [pc, #32]	@ (8007900 <Get_SerialNum+0x54>)
 80078e0:	68b8      	ldr	r0, [r7, #8]
 80078e2:	f000 f80f 	bl	8007904 <IntToUnicode>
  }
}
 80078e6:	bf00      	nop
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	1fff7a10 	.word	0x1fff7a10
 80078f4:	1fff7a14 	.word	0x1fff7a14
 80078f8:	1fff7a18 	.word	0x1fff7a18
 80078fc:	200000e2 	.word	0x200000e2
 8007900:	200000f2 	.word	0x200000f2

08007904 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007904:	b480      	push	{r7}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	4613      	mov	r3, r2
 8007910:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007912:	2300      	movs	r3, #0
 8007914:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007916:	2300      	movs	r3, #0
 8007918:	75fb      	strb	r3, [r7, #23]
 800791a:	e027      	b.n	800796c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	0f1b      	lsrs	r3, r3, #28
 8007920:	2b09      	cmp	r3, #9
 8007922:	d80b      	bhi.n	800793c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	0f1b      	lsrs	r3, r3, #28
 8007928:	b2da      	uxtb	r2, r3
 800792a:	7dfb      	ldrb	r3, [r7, #23]
 800792c:	005b      	lsls	r3, r3, #1
 800792e:	4619      	mov	r1, r3
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	440b      	add	r3, r1
 8007934:	3230      	adds	r2, #48	@ 0x30
 8007936:	b2d2      	uxtb	r2, r2
 8007938:	701a      	strb	r2, [r3, #0]
 800793a:	e00a      	b.n	8007952 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	0f1b      	lsrs	r3, r3, #28
 8007940:	b2da      	uxtb	r2, r3
 8007942:	7dfb      	ldrb	r3, [r7, #23]
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	4619      	mov	r1, r3
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	440b      	add	r3, r1
 800794c:	3237      	adds	r2, #55	@ 0x37
 800794e:	b2d2      	uxtb	r2, r2
 8007950:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	011b      	lsls	r3, r3, #4
 8007956:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007958:	7dfb      	ldrb	r3, [r7, #23]
 800795a:	005b      	lsls	r3, r3, #1
 800795c:	3301      	adds	r3, #1
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	4413      	add	r3, r2
 8007962:	2200      	movs	r2, #0
 8007964:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007966:	7dfb      	ldrb	r3, [r7, #23]
 8007968:	3301      	adds	r3, #1
 800796a:	75fb      	strb	r3, [r7, #23]
 800796c:	7dfa      	ldrb	r2, [r7, #23]
 800796e:	79fb      	ldrb	r3, [r7, #7]
 8007970:	429a      	cmp	r2, r3
 8007972:	d3d3      	bcc.n	800791c <IntToUnicode+0x18>
  }
}
 8007974:	bf00      	nop
 8007976:	bf00      	nop
 8007978:	371c      	adds	r7, #28
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
	...

08007984 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b08a      	sub	sp, #40	@ 0x28
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800798c:	f107 0314 	add.w	r3, r7, #20
 8007990:	2200      	movs	r2, #0
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	605a      	str	r2, [r3, #4]
 8007996:	609a      	str	r2, [r3, #8]
 8007998:	60da      	str	r2, [r3, #12]
 800799a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079a4:	d13a      	bne.n	8007a1c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079a6:	2300      	movs	r3, #0
 80079a8:	613b      	str	r3, [r7, #16]
 80079aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007a24 <HAL_PCD_MspInit+0xa0>)
 80079ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ae:	4a1d      	ldr	r2, [pc, #116]	@ (8007a24 <HAL_PCD_MspInit+0xa0>)
 80079b0:	f043 0301 	orr.w	r3, r3, #1
 80079b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80079b6:	4b1b      	ldr	r3, [pc, #108]	@ (8007a24 <HAL_PCD_MspInit+0xa0>)
 80079b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	613b      	str	r3, [r7, #16]
 80079c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80079c2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80079c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079c8:	2302      	movs	r3, #2
 80079ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079cc:	2300      	movs	r3, #0
 80079ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079d0:	2303      	movs	r3, #3
 80079d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80079d4:	230a      	movs	r3, #10
 80079d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079d8:	f107 0314 	add.w	r3, r7, #20
 80079dc:	4619      	mov	r1, r3
 80079de:	4812      	ldr	r0, [pc, #72]	@ (8007a28 <HAL_PCD_MspInit+0xa4>)
 80079e0:	f7f9 fa6a 	bl	8000eb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80079e4:	4b0f      	ldr	r3, [pc, #60]	@ (8007a24 <HAL_PCD_MspInit+0xa0>)
 80079e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079e8:	4a0e      	ldr	r2, [pc, #56]	@ (8007a24 <HAL_PCD_MspInit+0xa0>)
 80079ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079ee:	6353      	str	r3, [r2, #52]	@ 0x34
 80079f0:	2300      	movs	r3, #0
 80079f2:	60fb      	str	r3, [r7, #12]
 80079f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007a24 <HAL_PCD_MspInit+0xa0>)
 80079f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079f8:	4a0a      	ldr	r2, [pc, #40]	@ (8007a24 <HAL_PCD_MspInit+0xa0>)
 80079fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80079fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8007a00:	4b08      	ldr	r3, [pc, #32]	@ (8007a24 <HAL_PCD_MspInit+0xa0>)
 8007a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a08:	60fb      	str	r3, [r7, #12]
 8007a0a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	2100      	movs	r1, #0
 8007a10:	2043      	movs	r0, #67	@ 0x43
 8007a12:	f7f9 fa1a 	bl	8000e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a16:	2043      	movs	r0, #67	@ 0x43
 8007a18:	f7f9 fa33 	bl	8000e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a1c:	bf00      	nop
 8007a1e:	3728      	adds	r7, #40	@ 0x28
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	40023800 	.word	0x40023800
 8007a28:	40020000 	.word	0x40020000

08007a2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007a40:	4619      	mov	r1, r3
 8007a42:	4610      	mov	r0, r2
 8007a44:	f7fe fb49 	bl	80060da <USBD_LL_SetupStage>
}
 8007a48:	bf00      	nop
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007a62:	78fa      	ldrb	r2, [r7, #3]
 8007a64:	6879      	ldr	r1, [r7, #4]
 8007a66:	4613      	mov	r3, r2
 8007a68:	00db      	lsls	r3, r3, #3
 8007a6a:	4413      	add	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	440b      	add	r3, r1
 8007a70:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	78fb      	ldrb	r3, [r7, #3]
 8007a78:	4619      	mov	r1, r3
 8007a7a:	f7fe fb83 	bl	8006184 <USBD_LL_DataOutStage>
}
 8007a7e:	bf00      	nop
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b082      	sub	sp, #8
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
 8007a8e:	460b      	mov	r3, r1
 8007a90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007a98:	78fa      	ldrb	r2, [r7, #3]
 8007a9a:	6879      	ldr	r1, [r7, #4]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	00db      	lsls	r3, r3, #3
 8007aa0:	4413      	add	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	440b      	add	r3, r1
 8007aa6:	3320      	adds	r3, #32
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	78fb      	ldrb	r3, [r7, #3]
 8007aac:	4619      	mov	r1, r3
 8007aae:	f7fe fc1c 	bl	80062ea <USBD_LL_DataInStage>
}
 8007ab2:	bf00      	nop
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b082      	sub	sp, #8
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7fe fd56 	bl	800657a <USBD_LL_SOF>
}
 8007ace:	bf00      	nop
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b084      	sub	sp, #16
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	79db      	ldrb	r3, [r3, #7]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d102      	bne.n	8007af0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007aea:	2300      	movs	r3, #0
 8007aec:	73fb      	strb	r3, [r7, #15]
 8007aee:	e008      	b.n	8007b02 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	79db      	ldrb	r3, [r3, #7]
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d102      	bne.n	8007afe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007af8:	2301      	movs	r3, #1
 8007afa:	73fb      	strb	r3, [r7, #15]
 8007afc:	e001      	b.n	8007b02 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007afe:	f7f8 ff11 	bl	8000924 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007b08:	7bfa      	ldrb	r2, [r7, #15]
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fe fcf0 	bl	80064f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fe fc98 	bl	800644e <USBD_LL_Reset>
}
 8007b1e:	bf00      	nop
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
	...

08007b28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fe fceb 	bl	8006512 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	6812      	ldr	r2, [r2, #0]
 8007b4a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007b4e:	f043 0301 	orr.w	r3, r3, #1
 8007b52:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	7adb      	ldrb	r3, [r3, #11]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d005      	beq.n	8007b68 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b5c:	4b04      	ldr	r3, [pc, #16]	@ (8007b70 <HAL_PCD_SuspendCallback+0x48>)
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	4a03      	ldr	r2, [pc, #12]	@ (8007b70 <HAL_PCD_SuspendCallback+0x48>)
 8007b62:	f043 0306 	orr.w	r3, r3, #6
 8007b66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007b68:	bf00      	nop
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	e000ed00 	.word	0xe000ed00

08007b74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fe fce1 	bl	800654a <USBD_LL_Resume>
}
 8007b88:	bf00      	nop
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ba2:	78fa      	ldrb	r2, [r7, #3]
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fe fd39 	bl	800661e <USBD_LL_IsoOUTIncomplete>
}
 8007bac:	bf00      	nop
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007bc6:	78fa      	ldrb	r2, [r7, #3]
 8007bc8:	4611      	mov	r1, r2
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fe fcf5 	bl	80065ba <USBD_LL_IsoINIncomplete>
}
 8007bd0:	bf00      	nop
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fe fd4b 	bl	8006682 <USBD_LL_DevConnected>
}
 8007bec:	bf00      	nop
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fe fd48 	bl	8006698 <USBD_LL_DevDisconnected>
}
 8007c08:	bf00      	nop
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d13c      	bne.n	8007c9a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007c20:	4a20      	ldr	r2, [pc, #128]	@ (8007ca4 <USBD_LL_Init+0x94>)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ca4 <USBD_LL_Init+0x94>)
 8007c2c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007c30:	4b1c      	ldr	r3, [pc, #112]	@ (8007ca4 <USBD_LL_Init+0x94>)
 8007c32:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007c36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007c38:	4b1a      	ldr	r3, [pc, #104]	@ (8007ca4 <USBD_LL_Init+0x94>)
 8007c3a:	2204      	movs	r2, #4
 8007c3c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007c3e:	4b19      	ldr	r3, [pc, #100]	@ (8007ca4 <USBD_LL_Init+0x94>)
 8007c40:	2202      	movs	r2, #2
 8007c42:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007c44:	4b17      	ldr	r3, [pc, #92]	@ (8007ca4 <USBD_LL_Init+0x94>)
 8007c46:	2200      	movs	r2, #0
 8007c48:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c4a:	4b16      	ldr	r3, [pc, #88]	@ (8007ca4 <USBD_LL_Init+0x94>)
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c50:	4b14      	ldr	r3, [pc, #80]	@ (8007ca4 <USBD_LL_Init+0x94>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007c56:	4b13      	ldr	r3, [pc, #76]	@ (8007ca4 <USBD_LL_Init+0x94>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007c5c:	4b11      	ldr	r3, [pc, #68]	@ (8007ca4 <USBD_LL_Init+0x94>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007c62:	4b10      	ldr	r3, [pc, #64]	@ (8007ca4 <USBD_LL_Init+0x94>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007c68:	4b0e      	ldr	r3, [pc, #56]	@ (8007ca4 <USBD_LL_Init+0x94>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007c6e:	480d      	ldr	r0, [pc, #52]	@ (8007ca4 <USBD_LL_Init+0x94>)
 8007c70:	f7fa fad2 	bl	8002218 <HAL_PCD_Init>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007c7a:	f7f8 fe53 	bl	8000924 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007c7e:	2180      	movs	r1, #128	@ 0x80
 8007c80:	4808      	ldr	r0, [pc, #32]	@ (8007ca4 <USBD_LL_Init+0x94>)
 8007c82:	f7fb fcfe 	bl	8003682 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007c86:	2240      	movs	r2, #64	@ 0x40
 8007c88:	2100      	movs	r1, #0
 8007c8a:	4806      	ldr	r0, [pc, #24]	@ (8007ca4 <USBD_LL_Init+0x94>)
 8007c8c:	f7fb fcb2 	bl	80035f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007c90:	2280      	movs	r2, #128	@ 0x80
 8007c92:	2101      	movs	r1, #1
 8007c94:	4803      	ldr	r0, [pc, #12]	@ (8007ca4 <USBD_LL_Init+0x94>)
 8007c96:	f7fb fcad 	bl	80035f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	200017b0 	.word	0x200017b0

08007ca8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fa fbb9 	bl	8002436 <HAL_PCD_Start>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f000 f942 	bl	8007f54 <USBD_Get_USB_Status>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b084      	sub	sp, #16
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	4608      	mov	r0, r1
 8007ce8:	4611      	mov	r1, r2
 8007cea:	461a      	mov	r2, r3
 8007cec:	4603      	mov	r3, r0
 8007cee:	70fb      	strb	r3, [r7, #3]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	70bb      	strb	r3, [r7, #2]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007d06:	78bb      	ldrb	r3, [r7, #2]
 8007d08:	883a      	ldrh	r2, [r7, #0]
 8007d0a:	78f9      	ldrb	r1, [r7, #3]
 8007d0c:	f7fb f88d 	bl	8002e2a <HAL_PCD_EP_Open>
 8007d10:	4603      	mov	r3, r0
 8007d12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 f91c 	bl	8007f54 <USBD_Get_USB_Status>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b084      	sub	sp, #16
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
 8007d32:	460b      	mov	r3, r1
 8007d34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d44:	78fa      	ldrb	r2, [r7, #3]
 8007d46:	4611      	mov	r1, r2
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7fb f8d8 	bl	8002efe <HAL_PCD_EP_Close>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
 8007d54:	4618      	mov	r0, r3
 8007d56:	f000 f8fd 	bl	8007f54 <USBD_Get_USB_Status>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	460b      	mov	r3, r1
 8007d72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d74:	2300      	movs	r3, #0
 8007d76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d82:	78fa      	ldrb	r2, [r7, #3]
 8007d84:	4611      	mov	r1, r2
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fb f990 	bl	80030ac <HAL_PCD_EP_SetStall>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 f8de 	bl	8007f54 <USBD_Get_USB_Status>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b084      	sub	sp, #16
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	460b      	mov	r3, r1
 8007db0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007db2:	2300      	movs	r3, #0
 8007db4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007dc0:	78fa      	ldrb	r2, [r7, #3]
 8007dc2:	4611      	mov	r1, r2
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fb f9d4 	bl	8003172 <HAL_PCD_EP_ClrStall>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dce:	7bfb      	ldrb	r3, [r7, #15]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 f8bf 	bl	8007f54 <USBD_Get_USB_Status>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dda:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	460b      	mov	r3, r1
 8007dee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007df6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007df8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	da0b      	bge.n	8007e18 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e00:	78fb      	ldrb	r3, [r7, #3]
 8007e02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e06:	68f9      	ldr	r1, [r7, #12]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	00db      	lsls	r3, r3, #3
 8007e0c:	4413      	add	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	440b      	add	r3, r1
 8007e12:	3316      	adds	r3, #22
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	e00b      	b.n	8007e30 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e18:	78fb      	ldrb	r3, [r7, #3]
 8007e1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e1e:	68f9      	ldr	r1, [r7, #12]
 8007e20:	4613      	mov	r3, r2
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	4413      	add	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	440b      	add	r3, r1
 8007e2a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007e2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	460b      	mov	r3, r1
 8007e46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e56:	78fa      	ldrb	r2, [r7, #3]
 8007e58:	4611      	mov	r1, r2
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fa ffc1 	bl	8002de2 <HAL_PCD_SetAddress>
 8007e60:	4603      	mov	r3, r0
 8007e62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e64:	7bfb      	ldrb	r3, [r7, #15]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 f874 	bl	8007f54 <USBD_Get_USB_Status>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b086      	sub	sp, #24
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	60f8      	str	r0, [r7, #12]
 8007e82:	607a      	str	r2, [r7, #4]
 8007e84:	603b      	str	r3, [r7, #0]
 8007e86:	460b      	mov	r3, r1
 8007e88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007e98:	7af9      	ldrb	r1, [r7, #11]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	f7fb f8cb 	bl	8003038 <HAL_PCD_EP_Transmit>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ea6:	7dfb      	ldrb	r3, [r7, #23]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f000 f853 	bl	8007f54 <USBD_Get_USB_Status>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007eb2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	607a      	str	r2, [r7, #4]
 8007ec6:	603b      	str	r3, [r7, #0]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007eda:	7af9      	ldrb	r1, [r7, #11]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	f7fb f857 	bl	8002f92 <HAL_PCD_EP_Receive>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ee8:	7dfb      	ldrb	r3, [r7, #23]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 f832 	bl	8007f54 <USBD_Get_USB_Status>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ef4:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3718      	adds	r7, #24
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b082      	sub	sp, #8
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	460b      	mov	r3, r1
 8007f08:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f10:	78fa      	ldrb	r2, [r7, #3]
 8007f12:	4611      	mov	r1, r2
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fb f877 	bl	8003008 <HAL_PCD_EP_GetRxCount>
 8007f1a:	4603      	mov	r3, r0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f2c:	4b03      	ldr	r3, [pc, #12]	@ (8007f3c <USBD_static_malloc+0x18>)
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	20001c94 	.word	0x20001c94

08007f40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]

}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f62:	79fb      	ldrb	r3, [r7, #7]
 8007f64:	2b03      	cmp	r3, #3
 8007f66:	d817      	bhi.n	8007f98 <USBD_Get_USB_Status+0x44>
 8007f68:	a201      	add	r2, pc, #4	@ (adr r2, 8007f70 <USBD_Get_USB_Status+0x1c>)
 8007f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6e:	bf00      	nop
 8007f70:	08007f81 	.word	0x08007f81
 8007f74:	08007f87 	.word	0x08007f87
 8007f78:	08007f8d 	.word	0x08007f8d
 8007f7c:	08007f93 	.word	0x08007f93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	73fb      	strb	r3, [r7, #15]
    break;
 8007f84:	e00b      	b.n	8007f9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f86:	2303      	movs	r3, #3
 8007f88:	73fb      	strb	r3, [r7, #15]
    break;
 8007f8a:	e008      	b.n	8007f9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f90:	e005      	b.n	8007f9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f92:	2303      	movs	r3, #3
 8007f94:	73fb      	strb	r3, [r7, #15]
    break;
 8007f96:	e002      	b.n	8007f9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f9c:	bf00      	nop
  }
  return usb_status;
 8007f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <siprintf>:
 8007fac:	b40e      	push	{r1, r2, r3}
 8007fae:	b500      	push	{lr}
 8007fb0:	b09c      	sub	sp, #112	@ 0x70
 8007fb2:	ab1d      	add	r3, sp, #116	@ 0x74
 8007fb4:	9002      	str	r0, [sp, #8]
 8007fb6:	9006      	str	r0, [sp, #24]
 8007fb8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007fbc:	4809      	ldr	r0, [pc, #36]	@ (8007fe4 <siprintf+0x38>)
 8007fbe:	9107      	str	r1, [sp, #28]
 8007fc0:	9104      	str	r1, [sp, #16]
 8007fc2:	4909      	ldr	r1, [pc, #36]	@ (8007fe8 <siprintf+0x3c>)
 8007fc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fc8:	9105      	str	r1, [sp, #20]
 8007fca:	6800      	ldr	r0, [r0, #0]
 8007fcc:	9301      	str	r3, [sp, #4]
 8007fce:	a902      	add	r1, sp, #8
 8007fd0:	f000 f994 	bl	80082fc <_svfiprintf_r>
 8007fd4:	9b02      	ldr	r3, [sp, #8]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	701a      	strb	r2, [r3, #0]
 8007fda:	b01c      	add	sp, #112	@ 0x70
 8007fdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fe0:	b003      	add	sp, #12
 8007fe2:	4770      	bx	lr
 8007fe4:	200000fc 	.word	0x200000fc
 8007fe8:	ffff0208 	.word	0xffff0208

08007fec <memset>:
 8007fec:	4402      	add	r2, r0
 8007fee:	4603      	mov	r3, r0
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d100      	bne.n	8007ff6 <memset+0xa>
 8007ff4:	4770      	bx	lr
 8007ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8007ffa:	e7f9      	b.n	8007ff0 <memset+0x4>

08007ffc <__errno>:
 8007ffc:	4b01      	ldr	r3, [pc, #4]	@ (8008004 <__errno+0x8>)
 8007ffe:	6818      	ldr	r0, [r3, #0]
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	200000fc 	.word	0x200000fc

08008008 <__libc_init_array>:
 8008008:	b570      	push	{r4, r5, r6, lr}
 800800a:	4d0d      	ldr	r5, [pc, #52]	@ (8008040 <__libc_init_array+0x38>)
 800800c:	4c0d      	ldr	r4, [pc, #52]	@ (8008044 <__libc_init_array+0x3c>)
 800800e:	1b64      	subs	r4, r4, r5
 8008010:	10a4      	asrs	r4, r4, #2
 8008012:	2600      	movs	r6, #0
 8008014:	42a6      	cmp	r6, r4
 8008016:	d109      	bne.n	800802c <__libc_init_array+0x24>
 8008018:	4d0b      	ldr	r5, [pc, #44]	@ (8008048 <__libc_init_array+0x40>)
 800801a:	4c0c      	ldr	r4, [pc, #48]	@ (800804c <__libc_init_array+0x44>)
 800801c:	f000 fc66 	bl	80088ec <_init>
 8008020:	1b64      	subs	r4, r4, r5
 8008022:	10a4      	asrs	r4, r4, #2
 8008024:	2600      	movs	r6, #0
 8008026:	42a6      	cmp	r6, r4
 8008028:	d105      	bne.n	8008036 <__libc_init_array+0x2e>
 800802a:	bd70      	pop	{r4, r5, r6, pc}
 800802c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008030:	4798      	blx	r3
 8008032:	3601      	adds	r6, #1
 8008034:	e7ee      	b.n	8008014 <__libc_init_array+0xc>
 8008036:	f855 3b04 	ldr.w	r3, [r5], #4
 800803a:	4798      	blx	r3
 800803c:	3601      	adds	r6, #1
 800803e:	e7f2      	b.n	8008026 <__libc_init_array+0x1e>
 8008040:	080089b8 	.word	0x080089b8
 8008044:	080089b8 	.word	0x080089b8
 8008048:	080089b8 	.word	0x080089b8
 800804c:	080089bc 	.word	0x080089bc

08008050 <__retarget_lock_acquire_recursive>:
 8008050:	4770      	bx	lr

08008052 <__retarget_lock_release_recursive>:
 8008052:	4770      	bx	lr

08008054 <_free_r>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	4605      	mov	r5, r0
 8008058:	2900      	cmp	r1, #0
 800805a:	d041      	beq.n	80080e0 <_free_r+0x8c>
 800805c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008060:	1f0c      	subs	r4, r1, #4
 8008062:	2b00      	cmp	r3, #0
 8008064:	bfb8      	it	lt
 8008066:	18e4      	addlt	r4, r4, r3
 8008068:	f000 f8e0 	bl	800822c <__malloc_lock>
 800806c:	4a1d      	ldr	r2, [pc, #116]	@ (80080e4 <_free_r+0x90>)
 800806e:	6813      	ldr	r3, [r2, #0]
 8008070:	b933      	cbnz	r3, 8008080 <_free_r+0x2c>
 8008072:	6063      	str	r3, [r4, #4]
 8008074:	6014      	str	r4, [r2, #0]
 8008076:	4628      	mov	r0, r5
 8008078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800807c:	f000 b8dc 	b.w	8008238 <__malloc_unlock>
 8008080:	42a3      	cmp	r3, r4
 8008082:	d908      	bls.n	8008096 <_free_r+0x42>
 8008084:	6820      	ldr	r0, [r4, #0]
 8008086:	1821      	adds	r1, r4, r0
 8008088:	428b      	cmp	r3, r1
 800808a:	bf01      	itttt	eq
 800808c:	6819      	ldreq	r1, [r3, #0]
 800808e:	685b      	ldreq	r3, [r3, #4]
 8008090:	1809      	addeq	r1, r1, r0
 8008092:	6021      	streq	r1, [r4, #0]
 8008094:	e7ed      	b.n	8008072 <_free_r+0x1e>
 8008096:	461a      	mov	r2, r3
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	b10b      	cbz	r3, 80080a0 <_free_r+0x4c>
 800809c:	42a3      	cmp	r3, r4
 800809e:	d9fa      	bls.n	8008096 <_free_r+0x42>
 80080a0:	6811      	ldr	r1, [r2, #0]
 80080a2:	1850      	adds	r0, r2, r1
 80080a4:	42a0      	cmp	r0, r4
 80080a6:	d10b      	bne.n	80080c0 <_free_r+0x6c>
 80080a8:	6820      	ldr	r0, [r4, #0]
 80080aa:	4401      	add	r1, r0
 80080ac:	1850      	adds	r0, r2, r1
 80080ae:	4283      	cmp	r3, r0
 80080b0:	6011      	str	r1, [r2, #0]
 80080b2:	d1e0      	bne.n	8008076 <_free_r+0x22>
 80080b4:	6818      	ldr	r0, [r3, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	6053      	str	r3, [r2, #4]
 80080ba:	4408      	add	r0, r1
 80080bc:	6010      	str	r0, [r2, #0]
 80080be:	e7da      	b.n	8008076 <_free_r+0x22>
 80080c0:	d902      	bls.n	80080c8 <_free_r+0x74>
 80080c2:	230c      	movs	r3, #12
 80080c4:	602b      	str	r3, [r5, #0]
 80080c6:	e7d6      	b.n	8008076 <_free_r+0x22>
 80080c8:	6820      	ldr	r0, [r4, #0]
 80080ca:	1821      	adds	r1, r4, r0
 80080cc:	428b      	cmp	r3, r1
 80080ce:	bf04      	itt	eq
 80080d0:	6819      	ldreq	r1, [r3, #0]
 80080d2:	685b      	ldreq	r3, [r3, #4]
 80080d4:	6063      	str	r3, [r4, #4]
 80080d6:	bf04      	itt	eq
 80080d8:	1809      	addeq	r1, r1, r0
 80080da:	6021      	streq	r1, [r4, #0]
 80080dc:	6054      	str	r4, [r2, #4]
 80080de:	e7ca      	b.n	8008076 <_free_r+0x22>
 80080e0:	bd38      	pop	{r3, r4, r5, pc}
 80080e2:	bf00      	nop
 80080e4:	20001ff8 	.word	0x20001ff8

080080e8 <sbrk_aligned>:
 80080e8:	b570      	push	{r4, r5, r6, lr}
 80080ea:	4e0f      	ldr	r6, [pc, #60]	@ (8008128 <sbrk_aligned+0x40>)
 80080ec:	460c      	mov	r4, r1
 80080ee:	6831      	ldr	r1, [r6, #0]
 80080f0:	4605      	mov	r5, r0
 80080f2:	b911      	cbnz	r1, 80080fa <sbrk_aligned+0x12>
 80080f4:	f000 fba6 	bl	8008844 <_sbrk_r>
 80080f8:	6030      	str	r0, [r6, #0]
 80080fa:	4621      	mov	r1, r4
 80080fc:	4628      	mov	r0, r5
 80080fe:	f000 fba1 	bl	8008844 <_sbrk_r>
 8008102:	1c43      	adds	r3, r0, #1
 8008104:	d103      	bne.n	800810e <sbrk_aligned+0x26>
 8008106:	f04f 34ff 	mov.w	r4, #4294967295
 800810a:	4620      	mov	r0, r4
 800810c:	bd70      	pop	{r4, r5, r6, pc}
 800810e:	1cc4      	adds	r4, r0, #3
 8008110:	f024 0403 	bic.w	r4, r4, #3
 8008114:	42a0      	cmp	r0, r4
 8008116:	d0f8      	beq.n	800810a <sbrk_aligned+0x22>
 8008118:	1a21      	subs	r1, r4, r0
 800811a:	4628      	mov	r0, r5
 800811c:	f000 fb92 	bl	8008844 <_sbrk_r>
 8008120:	3001      	adds	r0, #1
 8008122:	d1f2      	bne.n	800810a <sbrk_aligned+0x22>
 8008124:	e7ef      	b.n	8008106 <sbrk_aligned+0x1e>
 8008126:	bf00      	nop
 8008128:	20001ff4 	.word	0x20001ff4

0800812c <_malloc_r>:
 800812c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008130:	1ccd      	adds	r5, r1, #3
 8008132:	f025 0503 	bic.w	r5, r5, #3
 8008136:	3508      	adds	r5, #8
 8008138:	2d0c      	cmp	r5, #12
 800813a:	bf38      	it	cc
 800813c:	250c      	movcc	r5, #12
 800813e:	2d00      	cmp	r5, #0
 8008140:	4606      	mov	r6, r0
 8008142:	db01      	blt.n	8008148 <_malloc_r+0x1c>
 8008144:	42a9      	cmp	r1, r5
 8008146:	d904      	bls.n	8008152 <_malloc_r+0x26>
 8008148:	230c      	movs	r3, #12
 800814a:	6033      	str	r3, [r6, #0]
 800814c:	2000      	movs	r0, #0
 800814e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008152:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008228 <_malloc_r+0xfc>
 8008156:	f000 f869 	bl	800822c <__malloc_lock>
 800815a:	f8d8 3000 	ldr.w	r3, [r8]
 800815e:	461c      	mov	r4, r3
 8008160:	bb44      	cbnz	r4, 80081b4 <_malloc_r+0x88>
 8008162:	4629      	mov	r1, r5
 8008164:	4630      	mov	r0, r6
 8008166:	f7ff ffbf 	bl	80080e8 <sbrk_aligned>
 800816a:	1c43      	adds	r3, r0, #1
 800816c:	4604      	mov	r4, r0
 800816e:	d158      	bne.n	8008222 <_malloc_r+0xf6>
 8008170:	f8d8 4000 	ldr.w	r4, [r8]
 8008174:	4627      	mov	r7, r4
 8008176:	2f00      	cmp	r7, #0
 8008178:	d143      	bne.n	8008202 <_malloc_r+0xd6>
 800817a:	2c00      	cmp	r4, #0
 800817c:	d04b      	beq.n	8008216 <_malloc_r+0xea>
 800817e:	6823      	ldr	r3, [r4, #0]
 8008180:	4639      	mov	r1, r7
 8008182:	4630      	mov	r0, r6
 8008184:	eb04 0903 	add.w	r9, r4, r3
 8008188:	f000 fb5c 	bl	8008844 <_sbrk_r>
 800818c:	4581      	cmp	r9, r0
 800818e:	d142      	bne.n	8008216 <_malloc_r+0xea>
 8008190:	6821      	ldr	r1, [r4, #0]
 8008192:	1a6d      	subs	r5, r5, r1
 8008194:	4629      	mov	r1, r5
 8008196:	4630      	mov	r0, r6
 8008198:	f7ff ffa6 	bl	80080e8 <sbrk_aligned>
 800819c:	3001      	adds	r0, #1
 800819e:	d03a      	beq.n	8008216 <_malloc_r+0xea>
 80081a0:	6823      	ldr	r3, [r4, #0]
 80081a2:	442b      	add	r3, r5
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	f8d8 3000 	ldr.w	r3, [r8]
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	bb62      	cbnz	r2, 8008208 <_malloc_r+0xdc>
 80081ae:	f8c8 7000 	str.w	r7, [r8]
 80081b2:	e00f      	b.n	80081d4 <_malloc_r+0xa8>
 80081b4:	6822      	ldr	r2, [r4, #0]
 80081b6:	1b52      	subs	r2, r2, r5
 80081b8:	d420      	bmi.n	80081fc <_malloc_r+0xd0>
 80081ba:	2a0b      	cmp	r2, #11
 80081bc:	d917      	bls.n	80081ee <_malloc_r+0xc2>
 80081be:	1961      	adds	r1, r4, r5
 80081c0:	42a3      	cmp	r3, r4
 80081c2:	6025      	str	r5, [r4, #0]
 80081c4:	bf18      	it	ne
 80081c6:	6059      	strne	r1, [r3, #4]
 80081c8:	6863      	ldr	r3, [r4, #4]
 80081ca:	bf08      	it	eq
 80081cc:	f8c8 1000 	streq.w	r1, [r8]
 80081d0:	5162      	str	r2, [r4, r5]
 80081d2:	604b      	str	r3, [r1, #4]
 80081d4:	4630      	mov	r0, r6
 80081d6:	f000 f82f 	bl	8008238 <__malloc_unlock>
 80081da:	f104 000b 	add.w	r0, r4, #11
 80081de:	1d23      	adds	r3, r4, #4
 80081e0:	f020 0007 	bic.w	r0, r0, #7
 80081e4:	1ac2      	subs	r2, r0, r3
 80081e6:	bf1c      	itt	ne
 80081e8:	1a1b      	subne	r3, r3, r0
 80081ea:	50a3      	strne	r3, [r4, r2]
 80081ec:	e7af      	b.n	800814e <_malloc_r+0x22>
 80081ee:	6862      	ldr	r2, [r4, #4]
 80081f0:	42a3      	cmp	r3, r4
 80081f2:	bf0c      	ite	eq
 80081f4:	f8c8 2000 	streq.w	r2, [r8]
 80081f8:	605a      	strne	r2, [r3, #4]
 80081fa:	e7eb      	b.n	80081d4 <_malloc_r+0xa8>
 80081fc:	4623      	mov	r3, r4
 80081fe:	6864      	ldr	r4, [r4, #4]
 8008200:	e7ae      	b.n	8008160 <_malloc_r+0x34>
 8008202:	463c      	mov	r4, r7
 8008204:	687f      	ldr	r7, [r7, #4]
 8008206:	e7b6      	b.n	8008176 <_malloc_r+0x4a>
 8008208:	461a      	mov	r2, r3
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	42a3      	cmp	r3, r4
 800820e:	d1fb      	bne.n	8008208 <_malloc_r+0xdc>
 8008210:	2300      	movs	r3, #0
 8008212:	6053      	str	r3, [r2, #4]
 8008214:	e7de      	b.n	80081d4 <_malloc_r+0xa8>
 8008216:	230c      	movs	r3, #12
 8008218:	6033      	str	r3, [r6, #0]
 800821a:	4630      	mov	r0, r6
 800821c:	f000 f80c 	bl	8008238 <__malloc_unlock>
 8008220:	e794      	b.n	800814c <_malloc_r+0x20>
 8008222:	6005      	str	r5, [r0, #0]
 8008224:	e7d6      	b.n	80081d4 <_malloc_r+0xa8>
 8008226:	bf00      	nop
 8008228:	20001ff8 	.word	0x20001ff8

0800822c <__malloc_lock>:
 800822c:	4801      	ldr	r0, [pc, #4]	@ (8008234 <__malloc_lock+0x8>)
 800822e:	f7ff bf0f 	b.w	8008050 <__retarget_lock_acquire_recursive>
 8008232:	bf00      	nop
 8008234:	20001ff0 	.word	0x20001ff0

08008238 <__malloc_unlock>:
 8008238:	4801      	ldr	r0, [pc, #4]	@ (8008240 <__malloc_unlock+0x8>)
 800823a:	f7ff bf0a 	b.w	8008052 <__retarget_lock_release_recursive>
 800823e:	bf00      	nop
 8008240:	20001ff0 	.word	0x20001ff0

08008244 <__ssputs_r>:
 8008244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008248:	688e      	ldr	r6, [r1, #8]
 800824a:	461f      	mov	r7, r3
 800824c:	42be      	cmp	r6, r7
 800824e:	680b      	ldr	r3, [r1, #0]
 8008250:	4682      	mov	sl, r0
 8008252:	460c      	mov	r4, r1
 8008254:	4690      	mov	r8, r2
 8008256:	d82d      	bhi.n	80082b4 <__ssputs_r+0x70>
 8008258:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800825c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008260:	d026      	beq.n	80082b0 <__ssputs_r+0x6c>
 8008262:	6965      	ldr	r5, [r4, #20]
 8008264:	6909      	ldr	r1, [r1, #16]
 8008266:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800826a:	eba3 0901 	sub.w	r9, r3, r1
 800826e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008272:	1c7b      	adds	r3, r7, #1
 8008274:	444b      	add	r3, r9
 8008276:	106d      	asrs	r5, r5, #1
 8008278:	429d      	cmp	r5, r3
 800827a:	bf38      	it	cc
 800827c:	461d      	movcc	r5, r3
 800827e:	0553      	lsls	r3, r2, #21
 8008280:	d527      	bpl.n	80082d2 <__ssputs_r+0x8e>
 8008282:	4629      	mov	r1, r5
 8008284:	f7ff ff52 	bl	800812c <_malloc_r>
 8008288:	4606      	mov	r6, r0
 800828a:	b360      	cbz	r0, 80082e6 <__ssputs_r+0xa2>
 800828c:	6921      	ldr	r1, [r4, #16]
 800828e:	464a      	mov	r2, r9
 8008290:	f000 fae8 	bl	8008864 <memcpy>
 8008294:	89a3      	ldrh	r3, [r4, #12]
 8008296:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800829a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800829e:	81a3      	strh	r3, [r4, #12]
 80082a0:	6126      	str	r6, [r4, #16]
 80082a2:	6165      	str	r5, [r4, #20]
 80082a4:	444e      	add	r6, r9
 80082a6:	eba5 0509 	sub.w	r5, r5, r9
 80082aa:	6026      	str	r6, [r4, #0]
 80082ac:	60a5      	str	r5, [r4, #8]
 80082ae:	463e      	mov	r6, r7
 80082b0:	42be      	cmp	r6, r7
 80082b2:	d900      	bls.n	80082b6 <__ssputs_r+0x72>
 80082b4:	463e      	mov	r6, r7
 80082b6:	6820      	ldr	r0, [r4, #0]
 80082b8:	4632      	mov	r2, r6
 80082ba:	4641      	mov	r1, r8
 80082bc:	f000 faa8 	bl	8008810 <memmove>
 80082c0:	68a3      	ldr	r3, [r4, #8]
 80082c2:	1b9b      	subs	r3, r3, r6
 80082c4:	60a3      	str	r3, [r4, #8]
 80082c6:	6823      	ldr	r3, [r4, #0]
 80082c8:	4433      	add	r3, r6
 80082ca:	6023      	str	r3, [r4, #0]
 80082cc:	2000      	movs	r0, #0
 80082ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d2:	462a      	mov	r2, r5
 80082d4:	f000 fad4 	bl	8008880 <_realloc_r>
 80082d8:	4606      	mov	r6, r0
 80082da:	2800      	cmp	r0, #0
 80082dc:	d1e0      	bne.n	80082a0 <__ssputs_r+0x5c>
 80082de:	6921      	ldr	r1, [r4, #16]
 80082e0:	4650      	mov	r0, sl
 80082e2:	f7ff feb7 	bl	8008054 <_free_r>
 80082e6:	230c      	movs	r3, #12
 80082e8:	f8ca 3000 	str.w	r3, [sl]
 80082ec:	89a3      	ldrh	r3, [r4, #12]
 80082ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082f2:	81a3      	strh	r3, [r4, #12]
 80082f4:	f04f 30ff 	mov.w	r0, #4294967295
 80082f8:	e7e9      	b.n	80082ce <__ssputs_r+0x8a>
	...

080082fc <_svfiprintf_r>:
 80082fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008300:	4698      	mov	r8, r3
 8008302:	898b      	ldrh	r3, [r1, #12]
 8008304:	061b      	lsls	r3, r3, #24
 8008306:	b09d      	sub	sp, #116	@ 0x74
 8008308:	4607      	mov	r7, r0
 800830a:	460d      	mov	r5, r1
 800830c:	4614      	mov	r4, r2
 800830e:	d510      	bpl.n	8008332 <_svfiprintf_r+0x36>
 8008310:	690b      	ldr	r3, [r1, #16]
 8008312:	b973      	cbnz	r3, 8008332 <_svfiprintf_r+0x36>
 8008314:	2140      	movs	r1, #64	@ 0x40
 8008316:	f7ff ff09 	bl	800812c <_malloc_r>
 800831a:	6028      	str	r0, [r5, #0]
 800831c:	6128      	str	r0, [r5, #16]
 800831e:	b930      	cbnz	r0, 800832e <_svfiprintf_r+0x32>
 8008320:	230c      	movs	r3, #12
 8008322:	603b      	str	r3, [r7, #0]
 8008324:	f04f 30ff 	mov.w	r0, #4294967295
 8008328:	b01d      	add	sp, #116	@ 0x74
 800832a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832e:	2340      	movs	r3, #64	@ 0x40
 8008330:	616b      	str	r3, [r5, #20]
 8008332:	2300      	movs	r3, #0
 8008334:	9309      	str	r3, [sp, #36]	@ 0x24
 8008336:	2320      	movs	r3, #32
 8008338:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800833c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008340:	2330      	movs	r3, #48	@ 0x30
 8008342:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80084e0 <_svfiprintf_r+0x1e4>
 8008346:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800834a:	f04f 0901 	mov.w	r9, #1
 800834e:	4623      	mov	r3, r4
 8008350:	469a      	mov	sl, r3
 8008352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008356:	b10a      	cbz	r2, 800835c <_svfiprintf_r+0x60>
 8008358:	2a25      	cmp	r2, #37	@ 0x25
 800835a:	d1f9      	bne.n	8008350 <_svfiprintf_r+0x54>
 800835c:	ebba 0b04 	subs.w	fp, sl, r4
 8008360:	d00b      	beq.n	800837a <_svfiprintf_r+0x7e>
 8008362:	465b      	mov	r3, fp
 8008364:	4622      	mov	r2, r4
 8008366:	4629      	mov	r1, r5
 8008368:	4638      	mov	r0, r7
 800836a:	f7ff ff6b 	bl	8008244 <__ssputs_r>
 800836e:	3001      	adds	r0, #1
 8008370:	f000 80a7 	beq.w	80084c2 <_svfiprintf_r+0x1c6>
 8008374:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008376:	445a      	add	r2, fp
 8008378:	9209      	str	r2, [sp, #36]	@ 0x24
 800837a:	f89a 3000 	ldrb.w	r3, [sl]
 800837e:	2b00      	cmp	r3, #0
 8008380:	f000 809f 	beq.w	80084c2 <_svfiprintf_r+0x1c6>
 8008384:	2300      	movs	r3, #0
 8008386:	f04f 32ff 	mov.w	r2, #4294967295
 800838a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800838e:	f10a 0a01 	add.w	sl, sl, #1
 8008392:	9304      	str	r3, [sp, #16]
 8008394:	9307      	str	r3, [sp, #28]
 8008396:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800839a:	931a      	str	r3, [sp, #104]	@ 0x68
 800839c:	4654      	mov	r4, sl
 800839e:	2205      	movs	r2, #5
 80083a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083a4:	484e      	ldr	r0, [pc, #312]	@ (80084e0 <_svfiprintf_r+0x1e4>)
 80083a6:	f7f7 ff13 	bl	80001d0 <memchr>
 80083aa:	9a04      	ldr	r2, [sp, #16]
 80083ac:	b9d8      	cbnz	r0, 80083e6 <_svfiprintf_r+0xea>
 80083ae:	06d0      	lsls	r0, r2, #27
 80083b0:	bf44      	itt	mi
 80083b2:	2320      	movmi	r3, #32
 80083b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083b8:	0711      	lsls	r1, r2, #28
 80083ba:	bf44      	itt	mi
 80083bc:	232b      	movmi	r3, #43	@ 0x2b
 80083be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083c2:	f89a 3000 	ldrb.w	r3, [sl]
 80083c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80083c8:	d015      	beq.n	80083f6 <_svfiprintf_r+0xfa>
 80083ca:	9a07      	ldr	r2, [sp, #28]
 80083cc:	4654      	mov	r4, sl
 80083ce:	2000      	movs	r0, #0
 80083d0:	f04f 0c0a 	mov.w	ip, #10
 80083d4:	4621      	mov	r1, r4
 80083d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083da:	3b30      	subs	r3, #48	@ 0x30
 80083dc:	2b09      	cmp	r3, #9
 80083de:	d94b      	bls.n	8008478 <_svfiprintf_r+0x17c>
 80083e0:	b1b0      	cbz	r0, 8008410 <_svfiprintf_r+0x114>
 80083e2:	9207      	str	r2, [sp, #28]
 80083e4:	e014      	b.n	8008410 <_svfiprintf_r+0x114>
 80083e6:	eba0 0308 	sub.w	r3, r0, r8
 80083ea:	fa09 f303 	lsl.w	r3, r9, r3
 80083ee:	4313      	orrs	r3, r2
 80083f0:	9304      	str	r3, [sp, #16]
 80083f2:	46a2      	mov	sl, r4
 80083f4:	e7d2      	b.n	800839c <_svfiprintf_r+0xa0>
 80083f6:	9b03      	ldr	r3, [sp, #12]
 80083f8:	1d19      	adds	r1, r3, #4
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	9103      	str	r1, [sp, #12]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	bfbb      	ittet	lt
 8008402:	425b      	neglt	r3, r3
 8008404:	f042 0202 	orrlt.w	r2, r2, #2
 8008408:	9307      	strge	r3, [sp, #28]
 800840a:	9307      	strlt	r3, [sp, #28]
 800840c:	bfb8      	it	lt
 800840e:	9204      	strlt	r2, [sp, #16]
 8008410:	7823      	ldrb	r3, [r4, #0]
 8008412:	2b2e      	cmp	r3, #46	@ 0x2e
 8008414:	d10a      	bne.n	800842c <_svfiprintf_r+0x130>
 8008416:	7863      	ldrb	r3, [r4, #1]
 8008418:	2b2a      	cmp	r3, #42	@ 0x2a
 800841a:	d132      	bne.n	8008482 <_svfiprintf_r+0x186>
 800841c:	9b03      	ldr	r3, [sp, #12]
 800841e:	1d1a      	adds	r2, r3, #4
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	9203      	str	r2, [sp, #12]
 8008424:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008428:	3402      	adds	r4, #2
 800842a:	9305      	str	r3, [sp, #20]
 800842c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80084f0 <_svfiprintf_r+0x1f4>
 8008430:	7821      	ldrb	r1, [r4, #0]
 8008432:	2203      	movs	r2, #3
 8008434:	4650      	mov	r0, sl
 8008436:	f7f7 fecb 	bl	80001d0 <memchr>
 800843a:	b138      	cbz	r0, 800844c <_svfiprintf_r+0x150>
 800843c:	9b04      	ldr	r3, [sp, #16]
 800843e:	eba0 000a 	sub.w	r0, r0, sl
 8008442:	2240      	movs	r2, #64	@ 0x40
 8008444:	4082      	lsls	r2, r0
 8008446:	4313      	orrs	r3, r2
 8008448:	3401      	adds	r4, #1
 800844a:	9304      	str	r3, [sp, #16]
 800844c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008450:	4824      	ldr	r0, [pc, #144]	@ (80084e4 <_svfiprintf_r+0x1e8>)
 8008452:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008456:	2206      	movs	r2, #6
 8008458:	f7f7 feba 	bl	80001d0 <memchr>
 800845c:	2800      	cmp	r0, #0
 800845e:	d036      	beq.n	80084ce <_svfiprintf_r+0x1d2>
 8008460:	4b21      	ldr	r3, [pc, #132]	@ (80084e8 <_svfiprintf_r+0x1ec>)
 8008462:	bb1b      	cbnz	r3, 80084ac <_svfiprintf_r+0x1b0>
 8008464:	9b03      	ldr	r3, [sp, #12]
 8008466:	3307      	adds	r3, #7
 8008468:	f023 0307 	bic.w	r3, r3, #7
 800846c:	3308      	adds	r3, #8
 800846e:	9303      	str	r3, [sp, #12]
 8008470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008472:	4433      	add	r3, r6
 8008474:	9309      	str	r3, [sp, #36]	@ 0x24
 8008476:	e76a      	b.n	800834e <_svfiprintf_r+0x52>
 8008478:	fb0c 3202 	mla	r2, ip, r2, r3
 800847c:	460c      	mov	r4, r1
 800847e:	2001      	movs	r0, #1
 8008480:	e7a8      	b.n	80083d4 <_svfiprintf_r+0xd8>
 8008482:	2300      	movs	r3, #0
 8008484:	3401      	adds	r4, #1
 8008486:	9305      	str	r3, [sp, #20]
 8008488:	4619      	mov	r1, r3
 800848a:	f04f 0c0a 	mov.w	ip, #10
 800848e:	4620      	mov	r0, r4
 8008490:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008494:	3a30      	subs	r2, #48	@ 0x30
 8008496:	2a09      	cmp	r2, #9
 8008498:	d903      	bls.n	80084a2 <_svfiprintf_r+0x1a6>
 800849a:	2b00      	cmp	r3, #0
 800849c:	d0c6      	beq.n	800842c <_svfiprintf_r+0x130>
 800849e:	9105      	str	r1, [sp, #20]
 80084a0:	e7c4      	b.n	800842c <_svfiprintf_r+0x130>
 80084a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80084a6:	4604      	mov	r4, r0
 80084a8:	2301      	movs	r3, #1
 80084aa:	e7f0      	b.n	800848e <_svfiprintf_r+0x192>
 80084ac:	ab03      	add	r3, sp, #12
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	462a      	mov	r2, r5
 80084b2:	4b0e      	ldr	r3, [pc, #56]	@ (80084ec <_svfiprintf_r+0x1f0>)
 80084b4:	a904      	add	r1, sp, #16
 80084b6:	4638      	mov	r0, r7
 80084b8:	f3af 8000 	nop.w
 80084bc:	1c42      	adds	r2, r0, #1
 80084be:	4606      	mov	r6, r0
 80084c0:	d1d6      	bne.n	8008470 <_svfiprintf_r+0x174>
 80084c2:	89ab      	ldrh	r3, [r5, #12]
 80084c4:	065b      	lsls	r3, r3, #25
 80084c6:	f53f af2d 	bmi.w	8008324 <_svfiprintf_r+0x28>
 80084ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084cc:	e72c      	b.n	8008328 <_svfiprintf_r+0x2c>
 80084ce:	ab03      	add	r3, sp, #12
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	462a      	mov	r2, r5
 80084d4:	4b05      	ldr	r3, [pc, #20]	@ (80084ec <_svfiprintf_r+0x1f0>)
 80084d6:	a904      	add	r1, sp, #16
 80084d8:	4638      	mov	r0, r7
 80084da:	f000 f879 	bl	80085d0 <_printf_i>
 80084de:	e7ed      	b.n	80084bc <_svfiprintf_r+0x1c0>
 80084e0:	0800897c 	.word	0x0800897c
 80084e4:	08008986 	.word	0x08008986
 80084e8:	00000000 	.word	0x00000000
 80084ec:	08008245 	.word	0x08008245
 80084f0:	08008982 	.word	0x08008982

080084f4 <_printf_common>:
 80084f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f8:	4616      	mov	r6, r2
 80084fa:	4698      	mov	r8, r3
 80084fc:	688a      	ldr	r2, [r1, #8]
 80084fe:	690b      	ldr	r3, [r1, #16]
 8008500:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008504:	4293      	cmp	r3, r2
 8008506:	bfb8      	it	lt
 8008508:	4613      	movlt	r3, r2
 800850a:	6033      	str	r3, [r6, #0]
 800850c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008510:	4607      	mov	r7, r0
 8008512:	460c      	mov	r4, r1
 8008514:	b10a      	cbz	r2, 800851a <_printf_common+0x26>
 8008516:	3301      	adds	r3, #1
 8008518:	6033      	str	r3, [r6, #0]
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	0699      	lsls	r1, r3, #26
 800851e:	bf42      	ittt	mi
 8008520:	6833      	ldrmi	r3, [r6, #0]
 8008522:	3302      	addmi	r3, #2
 8008524:	6033      	strmi	r3, [r6, #0]
 8008526:	6825      	ldr	r5, [r4, #0]
 8008528:	f015 0506 	ands.w	r5, r5, #6
 800852c:	d106      	bne.n	800853c <_printf_common+0x48>
 800852e:	f104 0a19 	add.w	sl, r4, #25
 8008532:	68e3      	ldr	r3, [r4, #12]
 8008534:	6832      	ldr	r2, [r6, #0]
 8008536:	1a9b      	subs	r3, r3, r2
 8008538:	42ab      	cmp	r3, r5
 800853a:	dc26      	bgt.n	800858a <_printf_common+0x96>
 800853c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008540:	6822      	ldr	r2, [r4, #0]
 8008542:	3b00      	subs	r3, #0
 8008544:	bf18      	it	ne
 8008546:	2301      	movne	r3, #1
 8008548:	0692      	lsls	r2, r2, #26
 800854a:	d42b      	bmi.n	80085a4 <_printf_common+0xb0>
 800854c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008550:	4641      	mov	r1, r8
 8008552:	4638      	mov	r0, r7
 8008554:	47c8      	blx	r9
 8008556:	3001      	adds	r0, #1
 8008558:	d01e      	beq.n	8008598 <_printf_common+0xa4>
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	6922      	ldr	r2, [r4, #16]
 800855e:	f003 0306 	and.w	r3, r3, #6
 8008562:	2b04      	cmp	r3, #4
 8008564:	bf02      	ittt	eq
 8008566:	68e5      	ldreq	r5, [r4, #12]
 8008568:	6833      	ldreq	r3, [r6, #0]
 800856a:	1aed      	subeq	r5, r5, r3
 800856c:	68a3      	ldr	r3, [r4, #8]
 800856e:	bf0c      	ite	eq
 8008570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008574:	2500      	movne	r5, #0
 8008576:	4293      	cmp	r3, r2
 8008578:	bfc4      	itt	gt
 800857a:	1a9b      	subgt	r3, r3, r2
 800857c:	18ed      	addgt	r5, r5, r3
 800857e:	2600      	movs	r6, #0
 8008580:	341a      	adds	r4, #26
 8008582:	42b5      	cmp	r5, r6
 8008584:	d11a      	bne.n	80085bc <_printf_common+0xc8>
 8008586:	2000      	movs	r0, #0
 8008588:	e008      	b.n	800859c <_printf_common+0xa8>
 800858a:	2301      	movs	r3, #1
 800858c:	4652      	mov	r2, sl
 800858e:	4641      	mov	r1, r8
 8008590:	4638      	mov	r0, r7
 8008592:	47c8      	blx	r9
 8008594:	3001      	adds	r0, #1
 8008596:	d103      	bne.n	80085a0 <_printf_common+0xac>
 8008598:	f04f 30ff 	mov.w	r0, #4294967295
 800859c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085a0:	3501      	adds	r5, #1
 80085a2:	e7c6      	b.n	8008532 <_printf_common+0x3e>
 80085a4:	18e1      	adds	r1, r4, r3
 80085a6:	1c5a      	adds	r2, r3, #1
 80085a8:	2030      	movs	r0, #48	@ 0x30
 80085aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80085ae:	4422      	add	r2, r4
 80085b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80085b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80085b8:	3302      	adds	r3, #2
 80085ba:	e7c7      	b.n	800854c <_printf_common+0x58>
 80085bc:	2301      	movs	r3, #1
 80085be:	4622      	mov	r2, r4
 80085c0:	4641      	mov	r1, r8
 80085c2:	4638      	mov	r0, r7
 80085c4:	47c8      	blx	r9
 80085c6:	3001      	adds	r0, #1
 80085c8:	d0e6      	beq.n	8008598 <_printf_common+0xa4>
 80085ca:	3601      	adds	r6, #1
 80085cc:	e7d9      	b.n	8008582 <_printf_common+0x8e>
	...

080085d0 <_printf_i>:
 80085d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085d4:	7e0f      	ldrb	r7, [r1, #24]
 80085d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085d8:	2f78      	cmp	r7, #120	@ 0x78
 80085da:	4691      	mov	r9, r2
 80085dc:	4680      	mov	r8, r0
 80085de:	460c      	mov	r4, r1
 80085e0:	469a      	mov	sl, r3
 80085e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085e6:	d807      	bhi.n	80085f8 <_printf_i+0x28>
 80085e8:	2f62      	cmp	r7, #98	@ 0x62
 80085ea:	d80a      	bhi.n	8008602 <_printf_i+0x32>
 80085ec:	2f00      	cmp	r7, #0
 80085ee:	f000 80d2 	beq.w	8008796 <_printf_i+0x1c6>
 80085f2:	2f58      	cmp	r7, #88	@ 0x58
 80085f4:	f000 80b9 	beq.w	800876a <_printf_i+0x19a>
 80085f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008600:	e03a      	b.n	8008678 <_printf_i+0xa8>
 8008602:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008606:	2b15      	cmp	r3, #21
 8008608:	d8f6      	bhi.n	80085f8 <_printf_i+0x28>
 800860a:	a101      	add	r1, pc, #4	@ (adr r1, 8008610 <_printf_i+0x40>)
 800860c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008610:	08008669 	.word	0x08008669
 8008614:	0800867d 	.word	0x0800867d
 8008618:	080085f9 	.word	0x080085f9
 800861c:	080085f9 	.word	0x080085f9
 8008620:	080085f9 	.word	0x080085f9
 8008624:	080085f9 	.word	0x080085f9
 8008628:	0800867d 	.word	0x0800867d
 800862c:	080085f9 	.word	0x080085f9
 8008630:	080085f9 	.word	0x080085f9
 8008634:	080085f9 	.word	0x080085f9
 8008638:	080085f9 	.word	0x080085f9
 800863c:	0800877d 	.word	0x0800877d
 8008640:	080086a7 	.word	0x080086a7
 8008644:	08008737 	.word	0x08008737
 8008648:	080085f9 	.word	0x080085f9
 800864c:	080085f9 	.word	0x080085f9
 8008650:	0800879f 	.word	0x0800879f
 8008654:	080085f9 	.word	0x080085f9
 8008658:	080086a7 	.word	0x080086a7
 800865c:	080085f9 	.word	0x080085f9
 8008660:	080085f9 	.word	0x080085f9
 8008664:	0800873f 	.word	0x0800873f
 8008668:	6833      	ldr	r3, [r6, #0]
 800866a:	1d1a      	adds	r2, r3, #4
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	6032      	str	r2, [r6, #0]
 8008670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008674:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008678:	2301      	movs	r3, #1
 800867a:	e09d      	b.n	80087b8 <_printf_i+0x1e8>
 800867c:	6833      	ldr	r3, [r6, #0]
 800867e:	6820      	ldr	r0, [r4, #0]
 8008680:	1d19      	adds	r1, r3, #4
 8008682:	6031      	str	r1, [r6, #0]
 8008684:	0606      	lsls	r6, r0, #24
 8008686:	d501      	bpl.n	800868c <_printf_i+0xbc>
 8008688:	681d      	ldr	r5, [r3, #0]
 800868a:	e003      	b.n	8008694 <_printf_i+0xc4>
 800868c:	0645      	lsls	r5, r0, #25
 800868e:	d5fb      	bpl.n	8008688 <_printf_i+0xb8>
 8008690:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008694:	2d00      	cmp	r5, #0
 8008696:	da03      	bge.n	80086a0 <_printf_i+0xd0>
 8008698:	232d      	movs	r3, #45	@ 0x2d
 800869a:	426d      	negs	r5, r5
 800869c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086a0:	4859      	ldr	r0, [pc, #356]	@ (8008808 <_printf_i+0x238>)
 80086a2:	230a      	movs	r3, #10
 80086a4:	e011      	b.n	80086ca <_printf_i+0xfa>
 80086a6:	6821      	ldr	r1, [r4, #0]
 80086a8:	6833      	ldr	r3, [r6, #0]
 80086aa:	0608      	lsls	r0, r1, #24
 80086ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80086b0:	d402      	bmi.n	80086b8 <_printf_i+0xe8>
 80086b2:	0649      	lsls	r1, r1, #25
 80086b4:	bf48      	it	mi
 80086b6:	b2ad      	uxthmi	r5, r5
 80086b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80086ba:	4853      	ldr	r0, [pc, #332]	@ (8008808 <_printf_i+0x238>)
 80086bc:	6033      	str	r3, [r6, #0]
 80086be:	bf14      	ite	ne
 80086c0:	230a      	movne	r3, #10
 80086c2:	2308      	moveq	r3, #8
 80086c4:	2100      	movs	r1, #0
 80086c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086ca:	6866      	ldr	r6, [r4, #4]
 80086cc:	60a6      	str	r6, [r4, #8]
 80086ce:	2e00      	cmp	r6, #0
 80086d0:	bfa2      	ittt	ge
 80086d2:	6821      	ldrge	r1, [r4, #0]
 80086d4:	f021 0104 	bicge.w	r1, r1, #4
 80086d8:	6021      	strge	r1, [r4, #0]
 80086da:	b90d      	cbnz	r5, 80086e0 <_printf_i+0x110>
 80086dc:	2e00      	cmp	r6, #0
 80086de:	d04b      	beq.n	8008778 <_printf_i+0x1a8>
 80086e0:	4616      	mov	r6, r2
 80086e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80086e6:	fb03 5711 	mls	r7, r3, r1, r5
 80086ea:	5dc7      	ldrb	r7, [r0, r7]
 80086ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086f0:	462f      	mov	r7, r5
 80086f2:	42bb      	cmp	r3, r7
 80086f4:	460d      	mov	r5, r1
 80086f6:	d9f4      	bls.n	80086e2 <_printf_i+0x112>
 80086f8:	2b08      	cmp	r3, #8
 80086fa:	d10b      	bne.n	8008714 <_printf_i+0x144>
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	07df      	lsls	r7, r3, #31
 8008700:	d508      	bpl.n	8008714 <_printf_i+0x144>
 8008702:	6923      	ldr	r3, [r4, #16]
 8008704:	6861      	ldr	r1, [r4, #4]
 8008706:	4299      	cmp	r1, r3
 8008708:	bfde      	ittt	le
 800870a:	2330      	movle	r3, #48	@ 0x30
 800870c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008710:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008714:	1b92      	subs	r2, r2, r6
 8008716:	6122      	str	r2, [r4, #16]
 8008718:	f8cd a000 	str.w	sl, [sp]
 800871c:	464b      	mov	r3, r9
 800871e:	aa03      	add	r2, sp, #12
 8008720:	4621      	mov	r1, r4
 8008722:	4640      	mov	r0, r8
 8008724:	f7ff fee6 	bl	80084f4 <_printf_common>
 8008728:	3001      	adds	r0, #1
 800872a:	d14a      	bne.n	80087c2 <_printf_i+0x1f2>
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	b004      	add	sp, #16
 8008732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008736:	6823      	ldr	r3, [r4, #0]
 8008738:	f043 0320 	orr.w	r3, r3, #32
 800873c:	6023      	str	r3, [r4, #0]
 800873e:	4833      	ldr	r0, [pc, #204]	@ (800880c <_printf_i+0x23c>)
 8008740:	2778      	movs	r7, #120	@ 0x78
 8008742:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008746:	6823      	ldr	r3, [r4, #0]
 8008748:	6831      	ldr	r1, [r6, #0]
 800874a:	061f      	lsls	r7, r3, #24
 800874c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008750:	d402      	bmi.n	8008758 <_printf_i+0x188>
 8008752:	065f      	lsls	r7, r3, #25
 8008754:	bf48      	it	mi
 8008756:	b2ad      	uxthmi	r5, r5
 8008758:	6031      	str	r1, [r6, #0]
 800875a:	07d9      	lsls	r1, r3, #31
 800875c:	bf44      	itt	mi
 800875e:	f043 0320 	orrmi.w	r3, r3, #32
 8008762:	6023      	strmi	r3, [r4, #0]
 8008764:	b11d      	cbz	r5, 800876e <_printf_i+0x19e>
 8008766:	2310      	movs	r3, #16
 8008768:	e7ac      	b.n	80086c4 <_printf_i+0xf4>
 800876a:	4827      	ldr	r0, [pc, #156]	@ (8008808 <_printf_i+0x238>)
 800876c:	e7e9      	b.n	8008742 <_printf_i+0x172>
 800876e:	6823      	ldr	r3, [r4, #0]
 8008770:	f023 0320 	bic.w	r3, r3, #32
 8008774:	6023      	str	r3, [r4, #0]
 8008776:	e7f6      	b.n	8008766 <_printf_i+0x196>
 8008778:	4616      	mov	r6, r2
 800877a:	e7bd      	b.n	80086f8 <_printf_i+0x128>
 800877c:	6833      	ldr	r3, [r6, #0]
 800877e:	6825      	ldr	r5, [r4, #0]
 8008780:	6961      	ldr	r1, [r4, #20]
 8008782:	1d18      	adds	r0, r3, #4
 8008784:	6030      	str	r0, [r6, #0]
 8008786:	062e      	lsls	r6, r5, #24
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	d501      	bpl.n	8008790 <_printf_i+0x1c0>
 800878c:	6019      	str	r1, [r3, #0]
 800878e:	e002      	b.n	8008796 <_printf_i+0x1c6>
 8008790:	0668      	lsls	r0, r5, #25
 8008792:	d5fb      	bpl.n	800878c <_printf_i+0x1bc>
 8008794:	8019      	strh	r1, [r3, #0]
 8008796:	2300      	movs	r3, #0
 8008798:	6123      	str	r3, [r4, #16]
 800879a:	4616      	mov	r6, r2
 800879c:	e7bc      	b.n	8008718 <_printf_i+0x148>
 800879e:	6833      	ldr	r3, [r6, #0]
 80087a0:	1d1a      	adds	r2, r3, #4
 80087a2:	6032      	str	r2, [r6, #0]
 80087a4:	681e      	ldr	r6, [r3, #0]
 80087a6:	6862      	ldr	r2, [r4, #4]
 80087a8:	2100      	movs	r1, #0
 80087aa:	4630      	mov	r0, r6
 80087ac:	f7f7 fd10 	bl	80001d0 <memchr>
 80087b0:	b108      	cbz	r0, 80087b6 <_printf_i+0x1e6>
 80087b2:	1b80      	subs	r0, r0, r6
 80087b4:	6060      	str	r0, [r4, #4]
 80087b6:	6863      	ldr	r3, [r4, #4]
 80087b8:	6123      	str	r3, [r4, #16]
 80087ba:	2300      	movs	r3, #0
 80087bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087c0:	e7aa      	b.n	8008718 <_printf_i+0x148>
 80087c2:	6923      	ldr	r3, [r4, #16]
 80087c4:	4632      	mov	r2, r6
 80087c6:	4649      	mov	r1, r9
 80087c8:	4640      	mov	r0, r8
 80087ca:	47d0      	blx	sl
 80087cc:	3001      	adds	r0, #1
 80087ce:	d0ad      	beq.n	800872c <_printf_i+0x15c>
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	079b      	lsls	r3, r3, #30
 80087d4:	d413      	bmi.n	80087fe <_printf_i+0x22e>
 80087d6:	68e0      	ldr	r0, [r4, #12]
 80087d8:	9b03      	ldr	r3, [sp, #12]
 80087da:	4298      	cmp	r0, r3
 80087dc:	bfb8      	it	lt
 80087de:	4618      	movlt	r0, r3
 80087e0:	e7a6      	b.n	8008730 <_printf_i+0x160>
 80087e2:	2301      	movs	r3, #1
 80087e4:	4632      	mov	r2, r6
 80087e6:	4649      	mov	r1, r9
 80087e8:	4640      	mov	r0, r8
 80087ea:	47d0      	blx	sl
 80087ec:	3001      	adds	r0, #1
 80087ee:	d09d      	beq.n	800872c <_printf_i+0x15c>
 80087f0:	3501      	adds	r5, #1
 80087f2:	68e3      	ldr	r3, [r4, #12]
 80087f4:	9903      	ldr	r1, [sp, #12]
 80087f6:	1a5b      	subs	r3, r3, r1
 80087f8:	42ab      	cmp	r3, r5
 80087fa:	dcf2      	bgt.n	80087e2 <_printf_i+0x212>
 80087fc:	e7eb      	b.n	80087d6 <_printf_i+0x206>
 80087fe:	2500      	movs	r5, #0
 8008800:	f104 0619 	add.w	r6, r4, #25
 8008804:	e7f5      	b.n	80087f2 <_printf_i+0x222>
 8008806:	bf00      	nop
 8008808:	0800898d 	.word	0x0800898d
 800880c:	0800899e 	.word	0x0800899e

08008810 <memmove>:
 8008810:	4288      	cmp	r0, r1
 8008812:	b510      	push	{r4, lr}
 8008814:	eb01 0402 	add.w	r4, r1, r2
 8008818:	d902      	bls.n	8008820 <memmove+0x10>
 800881a:	4284      	cmp	r4, r0
 800881c:	4623      	mov	r3, r4
 800881e:	d807      	bhi.n	8008830 <memmove+0x20>
 8008820:	1e43      	subs	r3, r0, #1
 8008822:	42a1      	cmp	r1, r4
 8008824:	d008      	beq.n	8008838 <memmove+0x28>
 8008826:	f811 2b01 	ldrb.w	r2, [r1], #1
 800882a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800882e:	e7f8      	b.n	8008822 <memmove+0x12>
 8008830:	4402      	add	r2, r0
 8008832:	4601      	mov	r1, r0
 8008834:	428a      	cmp	r2, r1
 8008836:	d100      	bne.n	800883a <memmove+0x2a>
 8008838:	bd10      	pop	{r4, pc}
 800883a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800883e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008842:	e7f7      	b.n	8008834 <memmove+0x24>

08008844 <_sbrk_r>:
 8008844:	b538      	push	{r3, r4, r5, lr}
 8008846:	4d06      	ldr	r5, [pc, #24]	@ (8008860 <_sbrk_r+0x1c>)
 8008848:	2300      	movs	r3, #0
 800884a:	4604      	mov	r4, r0
 800884c:	4608      	mov	r0, r1
 800884e:	602b      	str	r3, [r5, #0]
 8008850:	f7f8 f918 	bl	8000a84 <_sbrk>
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	d102      	bne.n	800885e <_sbrk_r+0x1a>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	b103      	cbz	r3, 800885e <_sbrk_r+0x1a>
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	bd38      	pop	{r3, r4, r5, pc}
 8008860:	20001fec 	.word	0x20001fec

08008864 <memcpy>:
 8008864:	440a      	add	r2, r1
 8008866:	4291      	cmp	r1, r2
 8008868:	f100 33ff 	add.w	r3, r0, #4294967295
 800886c:	d100      	bne.n	8008870 <memcpy+0xc>
 800886e:	4770      	bx	lr
 8008870:	b510      	push	{r4, lr}
 8008872:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008876:	f803 4f01 	strb.w	r4, [r3, #1]!
 800887a:	4291      	cmp	r1, r2
 800887c:	d1f9      	bne.n	8008872 <memcpy+0xe>
 800887e:	bd10      	pop	{r4, pc}

08008880 <_realloc_r>:
 8008880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008884:	4680      	mov	r8, r0
 8008886:	4615      	mov	r5, r2
 8008888:	460c      	mov	r4, r1
 800888a:	b921      	cbnz	r1, 8008896 <_realloc_r+0x16>
 800888c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008890:	4611      	mov	r1, r2
 8008892:	f7ff bc4b 	b.w	800812c <_malloc_r>
 8008896:	b92a      	cbnz	r2, 80088a4 <_realloc_r+0x24>
 8008898:	f7ff fbdc 	bl	8008054 <_free_r>
 800889c:	2400      	movs	r4, #0
 800889e:	4620      	mov	r0, r4
 80088a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088a4:	f000 f81a 	bl	80088dc <_malloc_usable_size_r>
 80088a8:	4285      	cmp	r5, r0
 80088aa:	4606      	mov	r6, r0
 80088ac:	d802      	bhi.n	80088b4 <_realloc_r+0x34>
 80088ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80088b2:	d8f4      	bhi.n	800889e <_realloc_r+0x1e>
 80088b4:	4629      	mov	r1, r5
 80088b6:	4640      	mov	r0, r8
 80088b8:	f7ff fc38 	bl	800812c <_malloc_r>
 80088bc:	4607      	mov	r7, r0
 80088be:	2800      	cmp	r0, #0
 80088c0:	d0ec      	beq.n	800889c <_realloc_r+0x1c>
 80088c2:	42b5      	cmp	r5, r6
 80088c4:	462a      	mov	r2, r5
 80088c6:	4621      	mov	r1, r4
 80088c8:	bf28      	it	cs
 80088ca:	4632      	movcs	r2, r6
 80088cc:	f7ff ffca 	bl	8008864 <memcpy>
 80088d0:	4621      	mov	r1, r4
 80088d2:	4640      	mov	r0, r8
 80088d4:	f7ff fbbe 	bl	8008054 <_free_r>
 80088d8:	463c      	mov	r4, r7
 80088da:	e7e0      	b.n	800889e <_realloc_r+0x1e>

080088dc <_malloc_usable_size_r>:
 80088dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088e0:	1f18      	subs	r0, r3, #4
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	bfbc      	itt	lt
 80088e6:	580b      	ldrlt	r3, [r1, r0]
 80088e8:	18c0      	addlt	r0, r0, r3
 80088ea:	4770      	bx	lr

080088ec <_init>:
 80088ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ee:	bf00      	nop
 80088f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088f2:	bc08      	pop	{r3}
 80088f4:	469e      	mov	lr, r3
 80088f6:	4770      	bx	lr

080088f8 <_fini>:
 80088f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fa:	bf00      	nop
 80088fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088fe:	bc08      	pop	{r3}
 8008900:	469e      	mov	lr, r3
 8008902:	4770      	bx	lr
